<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>UbisenseLocationServices</name>
  </assembly>
  <members>
    <member name="T:Ubisense.ULocationIntegration.Sensor">
      <summary> 
            The class representing the data model type Sensor.  This is a
            special object type because its unique id is not automatically
            generated, but is instead based on the sensor cell MAC address.
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.op_Equality(Ubisense.ULocationIntegration.Sensor,Ubisense.ULocationIntegration.Sensor)">
      <summary>
             The expression x == y is true if and only if x.CompareTo(y) == 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.op_Inequality(Ubisense.ULocationIntegration.Sensor,Ubisense.ULocationIntegration.Sensor)">
      <summary>
             The expression x != y is true if and only if x.CompareTo(y) != 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.op_LessThan(Ubisense.ULocationIntegration.Sensor,Ubisense.ULocationIntegration.Sensor)">
      <summary>
             The expression x &lt; y is true if and only if x.CompareTo(y) &lt; 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.op_GreaterThan(Ubisense.ULocationIntegration.Sensor,Ubisense.ULocationIntegration.Sensor)">
      <summary>
             The expression x &gt; y is true if and only if x.CompareTo(y) &gt; 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.op_Implicit(Ubisense.ULocationIntegration.Sensor)~Ubisense.UBase.UObject">
      <summary>
            Implicit conversion operator to ancestor type Ubisense.UBase.UObject
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.#cctor">
      <summary>
            The static constructor initialises the Sensor type.
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>
            Unsafe constructor to create an instance of type Sensor with a specific state.  
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            Attempted discovery of the cookie is prohibited by license agreement.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.#ctor(Ubisense.UBase.MAC)">
      <summary>
            Create a new Sensor instance based on the mac address of the sensor.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="mac">The mac id of the sensor, or UBase.Mac() to construct a Nil object</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.Narrow(Ubisense.UBase.IObject)">
      <summary>
            Assign another object to this one if and only if the other object's dynamic type
            inherits from the static type of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other">The object to assign to this object</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.Unique">
      <summary>
            Make this object into a new unique instance with DynamicType equal to Sensor
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.Nil">
      <summary>
            True iff this object is the nil instance of type Sensor
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.ToString">
      <summary>
            Returns a String representation of the value of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.ToString(System.String,System.IFormatProvider)">
      <summary>
            Equivalent to ToString()
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
      <seealso cref="M:Ubisense.ULocationIntegration.Sensor.ToString" />
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.Equals(System.Object)">
      <summary>
            True if this instance (boxed) equals obj
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="obj">The object to compare to this</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.GetHashCode">
      <summary>
            A suitable hash code for this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.CompareTo(Ubisense.ULocationIntegration.Sensor)">
      <summary>
            Compare this instance with 'other'
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other">The object to compare to this</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.Equals(Ubisense.ULocationIntegration.Sensor)">
      <summary>
            True if this instance equals obj
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other">The object to compare to this</param>
    </member>
    <member name="P:Ubisense.ULocationIntegration.Sensor.MAC">
      <summary>
            Get the mac address.  Returns UBase.MAC() if the sensor object is nil.
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="P:Ubisense.ULocationIntegration.Sensor.StaticType">
      <summary>
            The statically-declared type of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="P:Ubisense.ULocationIntegration.Sensor.DynamicType">
      <summary>
            The most-derived dynamic type of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="P:Ubisense.ULocationIntegration.Sensor.Id">
      <summary>
            The id of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.ULocationIntegration.SensorCell">
      <summary> 
             The class representing the data model type SensorCell.  This is a
             special object type because its unique id is not automatically
             generated, but is instead based on the sensor cell identifier.
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.op_Equality(Ubisense.ULocationIntegration.SensorCell,Ubisense.ULocationIntegration.SensorCell)">
      <summary>
             The expression x == y is true if and only if x.CompareTo(y) == 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.op_Inequality(Ubisense.ULocationIntegration.SensorCell,Ubisense.ULocationIntegration.SensorCell)">
      <summary>
             The expression x != y is true if and only if x.CompareTo(y) != 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.op_LessThan(Ubisense.ULocationIntegration.SensorCell,Ubisense.ULocationIntegration.SensorCell)">
      <summary>
             The expression x &lt; y is true if and only if x.CompareTo(y) &lt; 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.op_GreaterThan(Ubisense.ULocationIntegration.SensorCell,Ubisense.ULocationIntegration.SensorCell)">
      <summary>
             The expression x &gt; y is true if and only if x.CompareTo(y) &gt; 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.op_Implicit(Ubisense.ULocationIntegration.SensorCell)~Ubisense.UBase.UObject">
      <summary>
            Implicit conversion operator to ancestor type Ubisense.UBase.UObject
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.op_Implicit(Ubisense.ULocationIntegration.SensorCell)~Ubisense.UCell.Cell">
      <summary>
            Implicit conversion operator to ancestor type Ubisense.UCell.Cell
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.#cctor">
      <summary>
            Initialise the SensorCell type
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>
            Unsafe constructor to create an instance of type SensorCell with a specific state.  
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            Attempted discovery of the cookie is prohibited by license agreement.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.#ctor(System.UInt32)">
      <summary>
            Create a new SensorCell instance based on the cell Id.  
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="cellId">The cell id, or zero to construct a Nil object.</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.Narrow(Ubisense.UBase.IObject)">
      <summary>
            Assign another object to this one if and only if the other object's dynamic type
            inherits from the static type of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other">The object to assign to this object</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.Unique">
      <summary>
            Make this object into a new unique instance with DynamicType equal to SensorCell
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.Nil">
      <summary>
            True iff this object is the nil instance of type SensorCell
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.ToString">
      <summary>
            Returns a String representation of the value of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.ToString(System.String,System.IFormatProvider)">
      <summary>
            Equivalent to ToString()
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.Equals(System.Object)">
      <summary>
            True if this instance (boxed) equals obj
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="obj">The object to compare to this</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.GetHashCode">
      <summary>
            A suitable hash code for this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.CompareTo(Ubisense.ULocationIntegration.SensorCell)">
      <summary>
            Compare this instance with 'other'
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other">The object to compare to this</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.Equals(Ubisense.ULocationIntegration.SensorCell)">
      <summary>
            True if this instance equals obj
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other">The object to compare to this</param>
    </member>
    <member name="P:Ubisense.ULocationIntegration.SensorCell.CellId">
      <summary>
            Get the cell id.  Returns zero if the cell object is nil.
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="P:Ubisense.ULocationIntegration.SensorCell.StaticType">
      <summary>
            The statically-declared type of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="P:Ubisense.ULocationIntegration.SensorCell.DynamicType">
      <summary>
            The most-derived dynamic type of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="P:Ubisense.ULocationIntegration.SensorCell.Id">
      <summary>
            The id of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.ULocationIntegration.Tag">
      <summary> 
             The class representing the data model type Tag.  This is a
             special object type because its unique id is not automatically
             generated, but is instead based on the tag identifier.
             <seealso cref="!:Ubisense.ULocationEngine.Tag" /></summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.ConvertIdToString(System.UInt64,System.Char)">
      <summary>
            Static method to convert an unsigned long tag id into a string representation.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="id">The tag id</param>
      <param name="separateChar">The separator to use between octets, or '\0' for no separator</param>
      <returns>A string where each byte of the tag id is represented as a
            decimal number from 000 to 255.  Bytes are encoded from most
            significant to least significant.</returns>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.ConvertStringToId(System.String)">
      <summary>
            Static method to convert a string representation of a tag id to an unsigned long.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="value">The string form of the tag id</param>
      <returns>
            The equivalent tag id, or zero on failure. For Ubitags, the top 32
            bits will be zero, so it can safely coerced to an unsigned int and
            used to construct a <c>Ubisense.ULocationEngine.Tag</c>.
            </returns>
      <remarks>
            Supported formats, tested in this order, are:
            x Decimal octets, zero padded to three characters, with '-' separators.
            x If the string is a multiple of three characters long, treat as unseparated zero padded octets.
            x The decimal string representation of the tag id.
            </remarks>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.op_Equality(Ubisense.ULocationIntegration.Tag,Ubisense.ULocationIntegration.Tag)">
      <summary>
            x == y is true if and only if x.CompareTo(y) == 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.op_Inequality(Ubisense.ULocationIntegration.Tag,Ubisense.ULocationIntegration.Tag)">
      <summary>
            x != y is true if and only if x.CompareTo(y) != 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.op_LessThan(Ubisense.ULocationIntegration.Tag,Ubisense.ULocationIntegration.Tag)">
      <summary>
            x &lt; y is true if and only if x.CompareTo(y) &lt; 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.op_GreaterThan(Ubisense.ULocationIntegration.Tag,Ubisense.ULocationIntegration.Tag)">
      <summary>
            x &gt; y is true if and only if x.CompareTo(y) &gt; 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.op_Implicit(Ubisense.ULocationIntegration.Tag)~Ubisense.UBase.UObject">
      <summary>
            Implicit conversion operator to ancestor type Ubisense.UBase.UObject
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.#cctor">
      <summary>
            Initialise the Tag type
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>
            Unsafe constructor to create an instance of type Tag with a specific state.  
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            Attempted discovery of the cookie is prohibited by license agreement.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.#ctor(System.UInt64)">
      <summary>
            Create a new Tag instance based on the tag id
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="tagId">The tag id, or zero to construct a Nil object</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.Narrow(Ubisense.UBase.IObject)">
      <summary>
            Assign another object to this one if and only if the other object's dynamic type
            inherits from the static type of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other">The object to assign to this object</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.Unique">
      <summary>
            Make this object into a new unique instance with DynamicType equal to Tag
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.Nil">
      <summary>
            True iff this object is the nil instance of type Tag
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.ToString">
      <summary>
            Returns a String representation of the value of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.ToString(System.String,System.IFormatProvider)">
      <summary>
            Equivalent to ToString()
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.Equals(System.Object)">
      <summary>
            True if this instance (boxed) equals obj
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="obj">The object to compare to this</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.GetHashCode">
      <summary>
            A suitable hash code for this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.CompareTo(Ubisense.ULocationIntegration.Tag)">
      <summary>
            Compare this instance with 'other'
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other">The object to compare to this</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.Equals(Ubisense.ULocationIntegration.Tag)">
      <summary>
            True if this instance equals obj
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other">The object to compare to this</param>
    </member>
    <member name="P:Ubisense.ULocationIntegration.Tag.PhysicalId">
      <summary>
            Get the tag physical id.  Returns zero if the tag object is nil.
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="P:Ubisense.ULocationIntegration.Tag.StaticType">
      <summary>
            The statically-declared type of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="P:Ubisense.ULocationIntegration.Tag.DynamicType">
      <summary>
            The most-derived dynamic type of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="P:Ubisense.ULocationIntegration.Tag.Id">
      <summary>
            The id of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationIntegration.Sensor">
      <summary>
            Marshalling for sensors.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.Sensor.Marshall(System.IO.BinaryWriter,Ubisense.ULocationIntegration.Sensor)">
      <summary>
            Write to a sink.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.Sensor.Marshall(System.IO.BinaryWriter,Ubisense.ULocationIntegration.Sensor@)">
      <summary>
            Write to a sink.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.Sensor.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationIntegration.Sensor@)">
      <summary>
            Read from a source.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.Sensor.Unmarshall(System.IO.BinaryReader)">
      <summary>
            Read from a source.
            </summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationIntegration.SensorCell">
      <summary>
            Marshalling for sensor cells.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.SensorCell.Marshall(System.IO.BinaryWriter,Ubisense.ULocationIntegration.SensorCell)">
      <summary>
            Write to a sink.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.SensorCell.Marshall(System.IO.BinaryWriter,Ubisense.ULocationIntegration.SensorCell@)">
      <summary>
            Write to a sink.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.SensorCell.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationIntegration.SensorCell@)">
      <summary>
            Read from a source.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.SensorCell.Unmarshall(System.IO.BinaryReader)">
      <summary>
            Read from a source.
            </summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationIntegration.Tag">
      <summary>
            Marshalling a tag.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.Tag.Marshall(System.IO.BinaryWriter,Ubisense.ULocationIntegration.Tag)">
      <summary>
            Write to a sink.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.Tag.Marshall(System.IO.BinaryWriter,Ubisense.ULocationIntegration.Tag@)">
      <summary>
            Write to a sink.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.Tag.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationIntegration.Tag@)">
      <summary>
            Read from a source.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.Tag.Unmarshall(System.IO.BinaryReader)">
      <summary>
            Read from a source.
            </summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UName.Naming.ObjectName.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UName.Naming.ObjectName.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UName.Naming.ObjectName.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UName.Naming.ObjectName.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UName.Naming.ObjectName.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UName.Naming.ObjectName.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UName.Naming.ObjectName.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UName.Naming.ObjectName.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UName.Naming.Schema">
      <summary>The Ubisense.UName.Naming schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.UName.Naming.Schema._rxpo">
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UName.Naming.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UName.Naming.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.Schema.insert_object_name(Ubisense.UBase.UObject,System.String)">
      <summary>Add an object name, leaving other names for the object intact. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj">The object to give the new name. </param>
      <param name="name">The new name to give the object. </param>
    </member>
    <member name="M:Ubisense.UName.Naming.Schema.set_object_name(Ubisense.UBase.UObject,System.String)">
      <summary>Set an object name, replacing existing names for the object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj">The object to give the new name. </param>
      <param name="name">The new name to give the object. </param>
    </member>
    <member name="M:Ubisense.UName.Naming.Schema.remove_object_name(Ubisense.UBase.UObject,System.String)">
      <summary>Remove an object name </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj">The object in question. </param>
      <param name="name">The name to remove. </param>
    </member>
    <member name="M:Ubisense.UName.Naming.Schema.remove_object(Ubisense.UBase.UObject)">
      <summary>Remove all names for the given object </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj">The object to be made anonymous. </param>
    </member>
    <member name="M:Ubisense.UName.Naming.Schema.remove_name(System.String)">
      <summary>Remove all objects with the given name. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="name">The name in question. </param>
    </member>
    <member name="M:Ubisense.UName.Naming.Schema.get_objects(System.String)">
      <summary>Get all objects with a name. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="name">The name you are looking for. </param>
    </member>
    <member name="M:Ubisense.UName.Naming.Schema.match_objects(System.String)">
      <summary>Get all objects with a name prefix; i.e., whose names start with the given string. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="name">The prefix you want to match. </param>
    </member>
    <member name="M:Ubisense.UName.Naming.Schema.get_names(Ubisense.UBase.UObject)">
      <summary>Get all names for an object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj">The object whsoe names you want. </param>
    </member>
    <member name="M:Ubisense.UName.Naming.Schema.set_type_names(Ubisense.UBase.Symbol,System.Collections.Generic.SortedDictionary{Ubisense.UBase.UObject,System.String})">
      <summary>This special operation is intended to be used by other schema servers with named objects in their schema.  When initialised, the server can notify UName of the closed set of named objects of the given type.  The function causes each object to have only the name given, and removes all other objects of the given type. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="type"></param>
      <param name="objects"></param>
    </member>
    <member name="P:Ubisense.UName.Naming.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.UName.Naming.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.UName.Naming.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.UName.Naming.ObjectName">
      <summary>Relation containing the names of objects. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.ObjectName.AddInsertHandler(Ubisense.UName.Naming.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UName.Naming.ObjectName.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.ObjectName.AddUpdateHandler(Ubisense.UName.Naming.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UName.Naming.ObjectName.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.ObjectName.AddDeleteHandler(Ubisense.UName.Naming.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UName.Naming.ObjectName.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.ObjectName.object_name_(Ubisense.UName.Naming.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index object_name_. Index used when deleting. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.ObjectName.object_name_(Ubisense.UName.Naming.ReadTransaction,Ubisense.UBase.UObject)">
      <summary>Iterate over the elements of the table that match the first argument of the index object_name_. Index used when deleting. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.ObjectName.object_name_(Ubisense.UName.Naming.ReadTransaction,Ubisense.UBase.UObject,System.String)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index object_name_. Index used when deleting. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.ObjectName.name_(Ubisense.UName.Naming.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index name_. Index used for looking up objects by name. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.ObjectName.name_(Ubisense.UName.Naming.ReadTransaction,System.String)">
      <summary>Iterate over the elements of the table that match the first argument of the index name_. Index used for looking up objects by name. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UName.Naming.ObjectName.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UName.Naming.ObjectName.RowType.object_">
      <summary>The object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UName.Naming.ObjectName.RowType.name_">
      <summary>The name. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.ObjectName.RowType.op_Equality(Ubisense.UName.Naming.ObjectName.RowType,Ubisense.UName.Naming.ObjectName.RowType)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.ObjectName.RowType.op_Inequality(Ubisense.UName.Naming.ObjectName.RowType,Ubisense.UName.Naming.ObjectName.RowType)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.ObjectName.RowType.op_LessThan(Ubisense.UName.Naming.ObjectName.RowType,Ubisense.UName.Naming.ObjectName.RowType)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.ObjectName.RowType.op_GreaterThan(Ubisense.UName.Naming.ObjectName.RowType,Ubisense.UName.Naming.ObjectName.RowType)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.ObjectName.RowType.#ctor(Ubisense.UBase.UObject,System.String)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.ObjectName.RowType.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.ObjectName.RowType.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.ObjectName.RowType.CompareTo(Ubisense.UName.Naming.ObjectName.RowType)">
      <summary>Compare this instance with 'other'</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UName.Naming.ObjectName.RowType.Equals(Ubisense.UName.Naming.ObjectName.RowType)">
      <summary>True if this instance equals obj</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UName.Naming.ObjectName.___lop_key_object_name_">
      <summary>The lex-ordered prefixable key for the index object_name_</summary>
    </member>
    <member name="T:Ubisense.UName.Naming.ObjectName.___lop_cmp_object_name_">
      <summary>The ordering for the index object_name_</summary>
    </member>
    <member name="M:Ubisense.UName.Naming.ObjectName.___lop_cmp_object_name_.Compare(Ubisense.UName.Naming.ObjectName.___lop_key_object_name_,Ubisense.UName.Naming.ObjectName.___lop_key_object_name_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UName.Naming.ObjectName.___lop_key_name_">
      <summary>The lex-ordered prefixable key for the index name_</summary>
    </member>
    <member name="T:Ubisense.UName.Naming.ObjectName.___lop_cmp_name_">
      <summary>The ordering for the index name_</summary>
    </member>
    <member name="M:Ubisense.UName.Naming.ObjectName.___lop_cmp_name_.Compare(Ubisense.UName.Naming.ObjectName.___lop_key_name_,Ubisense.UName.Naming.ObjectName.___lop_key_name_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UData.Data.ObjectButtonPressed.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UData.Data.ObjectButtonPressed.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UData.Data.ObjectButtonPressed.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UData.Data.ObjectButtonPressed.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UData.Data.ObjectButtonPressed.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UData.Data.ObjectButtonPressed.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UData.Data.ObjectButtonPressed.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UData.Data.ObjectButtonPressed.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UData.Data.ObjectDelivery.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UData.Data.ObjectDelivery.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UData.Data.ObjectDelivery.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UData.Data.ObjectDelivery.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UData.Data.ObjectDelivery.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UData.Data.ObjectDelivery.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UData.Data.ObjectDelivery.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UData.Data.ObjectDelivery.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UData.Data.ObjectData.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UData.Data.ObjectData.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UData.Data.ObjectData.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UData.Data.ObjectData.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UData.Data.ObjectData.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UData.Data.ObjectData.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UData.Data.ObjectData.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UData.Data.ObjectData.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UData.Data.Schema">
      <summary>The Ubisense.UData.Data schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.UData.Data.Schema._rxpo">
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UData.Data.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.UData.Data.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UData.Data.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UData.Data.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UData.Data.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UData.Data.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.UData.Data.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UData.Data.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UData.Data.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UData.Data.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UData.Data.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UData.Data.Schema.insert_button_press(Ubisense.UBase.UObject,System.UInt32,System.DateTime)">
      <summary>Add a button press for an object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj"></param>
      <param name="button"></param>
      <param name="timestamp"></param>
    </member>
    <member name="M:Ubisense.UData.Data.Schema.notify(Ubisense.UBase.UObject,System.UInt32,System.Byte@)">
      <summary>Send a notification to an object, with a default expiry time.  On success returns true and sets the sequence number, which the client can used to query the ObjectData table to see if the data is delivered. Returns false if the data cannot be delivered because there is no delivery cell or some other immediate failure. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj"></param>
      <param name="notification"></param>
      <param name="sequence"></param>
    </member>
    <member name="M:Ubisense.UData.Data.Schema.notify_expiry(Ubisense.UBase.UObject,System.UInt32,System.DateTime,System.Byte@)">
      <summary>Send a notification to an object, with a given expiry time. On success returns true and sets the sequence number, which the client can used to query the ObjectData table to see if the data is delivered. Returns false if the data cannot be delivered because there is no delivery cell or some other immediate failure. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj"></param>
      <param name="notification"></param>
      <param name="expiry"></param>
      <param name="sequence"></param>
    </member>
    <member name="M:Ubisense.UData.Data.Schema.cancel_notify(Ubisense.UBase.UObject,System.Byte)">
      <summary>Cancel delivery of data.  If the current data to be delivered to an object is the given sequence number, cancel the delivery. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj"></param>
      <param name="sequence"></param>
    </member>
    <member name="M:Ubisense.UData.Data.Schema.set_delivery(Ubisense.UBase.UObject,Ubisense.UCell.Cell,System.UInt32)">
      <summary>Set the delivery cell for an object.  Timeslot is used to avoid races. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj"></param>
      <param name="cell"></param>
      <param name="timeslot"></param>
    </member>
    <member name="M:Ubisense.UData.Data.Schema.unset_delivery(Ubisense.UBase.UObject,Ubisense.UCell.Cell,System.UInt32)">
      <summary>Unset the delivery cell for an object.  If the current delivery cell is the given cell, set it to be a nil cell. Timeslot is used to avoid races. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj"></param>
      <param name="cell"></param>
      <param name="timeslot"></param>
    </member>
    <member name="M:Ubisense.UData.Data.Schema.acknowledge(Ubisense.UBase.UObject,System.Byte)">
      <summary>Acknowledge delivery of a sequence number. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj"></param>
      <param name="sequence"></param>
    </member>
    <member name="P:Ubisense.UData.Data.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.UData.Data.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.UData.Data.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.UData.Data.ObjectButtonPressed">
      <summary>Relation containing button presses. Inserts on this relation represent button press events. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UData.Data.ObjectButtonPressed.AddInsertHandler(Ubisense.UData.Data.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UData.Data.ObjectButtonPressed.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UData.Data.ObjectButtonPressed.AddUpdateHandler(Ubisense.UData.Data.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UData.Data.ObjectButtonPressed.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UData.Data.ObjectButtonPressed.AddDeleteHandler(Ubisense.UData.Data.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UData.Data.ObjectButtonPressed.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UData.Data.ObjectButtonPressed.object_button_(Ubisense.UData.Data.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index object_button_. Finds all the presses of a single instance of a button. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UData.Data.ObjectButtonPressed.object_button_(Ubisense.UData.Data.ReadTransaction,Ubisense.UBase.UObject)">
      <summary>Iterate over the elements of the table that match the first argument of the index object_button_. Finds all the presses of a single instance of a button. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UData.Data.ObjectButtonPressed.object_button_(Ubisense.UData.Data.ReadTransaction,Ubisense.UBase.UObject,System.UInt32)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index object_button_. Finds all the presses of a single instance of a button. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UData.Data.ObjectButtonPressed.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UData.Data.ObjectButtonPressed.RowType.object_">
      <summary>The object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UData.Data.ObjectButtonPressed.RowType.button_">
      <summary>Which button was pressed. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UData.Data.ObjectButtonPressed.RowType.timestamp_">
      <summary>When it was pressed. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UData.Data.ObjectButtonPressed.RowType.#ctor(Ubisense.UBase.UObject,System.UInt32,System.DateTime)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UData.Data.ObjectButtonPressed.___lop_key_object_button_">
      <summary>The lex-ordered prefixable key for the index object_button_</summary>
    </member>
    <member name="T:Ubisense.UData.Data.ObjectButtonPressed.___lop_cmp_object_button_">
      <summary>The ordering for the index object_button_</summary>
    </member>
    <member name="M:Ubisense.UData.Data.ObjectButtonPressed.___lop_cmp_object_button_.Compare(Ubisense.UData.Data.ObjectButtonPressed.___lop_key_object_button_,Ubisense.UData.Data.ObjectButtonPressed.___lop_key_object_button_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UData.Data.ObjectDelivery">
      <summary>Relation uses to record the last sequence number for each object. Other fields are deprecated. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UData.Data.ObjectDelivery.AddInsertHandler(Ubisense.UData.Data.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UData.Data.ObjectDelivery.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UData.Data.ObjectDelivery.AddUpdateHandler(Ubisense.UData.Data.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UData.Data.ObjectDelivery.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UData.Data.ObjectDelivery.AddDeleteHandler(Ubisense.UData.Data.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UData.Data.ObjectDelivery.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UData.Data.ObjectDelivery.object_(Ubisense.UData.Data.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index object_. Each object can have at most one delivery cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UData.Data.ObjectDelivery.object_(Ubisense.UData.Data.ReadTransaction,Ubisense.UBase.UObject)">
      <summary>Iterate over the elements of the table that match the first argument of the index object_. Each object can have at most one delivery cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UData.Data.ObjectDelivery.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UData.Data.ObjectDelivery.RowType.object_">
      <summary>The object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UData.Data.ObjectDelivery.RowType.cell_">
      <summary>Not used. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UData.Data.ObjectDelivery.RowType.timeslot_">
      <summary>Not used. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UData.Data.ObjectDelivery.RowType.sequence_">
      <summary>The last data sequence number for the object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UData.Data.ObjectDelivery.RowType.#ctor(Ubisense.UBase.UObject,Ubisense.UCell.Cell,System.UInt32,System.Byte)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UData.Data.ObjectDelivery.___lop_key_object_">
      <summary>The lex-ordered prefixable key for the index object_</summary>
    </member>
    <member name="T:Ubisense.UData.Data.ObjectDelivery.___lop_cmp_object_">
      <summary>The ordering for the index object_</summary>
    </member>
    <member name="M:Ubisense.UData.Data.ObjectDelivery.___lop_cmp_object_.Compare(Ubisense.UData.Data.ObjectDelivery.___lop_key_object_,Ubisense.UData.Data.ObjectDelivery.___lop_key_object_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UData.Data.ObjectData">
      <summary>Relation containing the current data to be delivered to each object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UData.Data.ObjectData.AddInsertHandler(Ubisense.UData.Data.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UData.Data.ObjectData.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UData.Data.ObjectData.AddUpdateHandler(Ubisense.UData.Data.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UData.Data.ObjectData.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UData.Data.ObjectData.AddDeleteHandler(Ubisense.UData.Data.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UData.Data.ObjectData.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UData.Data.ObjectData.object_(Ubisense.UData.Data.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index object_. Finds data to be delivered to an object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UData.Data.ObjectData.object_(Ubisense.UData.Data.ReadTransaction,Ubisense.UBase.UObject)">
      <summary>Iterate over the elements of the table that match the first argument of the index object_. Finds data to be delivered to an object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UData.Data.ObjectData.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UData.Data.ObjectData.RowType.object_">
      <summary>The object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UData.Data.ObjectData.RowType.data_">
      <summary>The data to deliver.  Depending on the object type some set of bits may be significant. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UData.Data.ObjectData.RowType.sequence_">
      <summary>The sequence number of the data. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UData.Data.ObjectData.RowType.expiry_">
      <summary>The expiry time for this data delivery, beyond which attempts to deliver should be aborted. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UData.Data.ObjectData.RowType.acknowledged_">
      <summary>Whether the data has been acknowledged by the object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UData.Data.ObjectData.RowType.#ctor(Ubisense.UBase.UObject,System.UInt32,System.Byte,System.DateTime,System.Boolean)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UData.Data.ObjectData.___lop_key_object_">
      <summary>The lex-ordered prefixable key for the index object_</summary>
    </member>
    <member name="T:Ubisense.UData.Data.ObjectData.___lop_cmp_object_">
      <summary>The ordering for the index object_</summary>
    </member>
    <member name="M:Ubisense.UData.Data.ObjectData.___lop_cmp_object_.Compare(Ubisense.UData.Data.ObjectData.___lop_key_object_,Ubisense.UData.Data.ObjectData.___lop_key_object_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UData.TagDataChannel.ObjectDataReceived.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UData.TagDataChannel.ObjectDataReceived.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UData.TagDataChannel.ObjectDataReceived.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UData.TagDataChannel.ObjectDataReceived.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UData.TagDataChannel.ObjectDataReceived.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UData.TagDataChannel.ObjectDataReceived.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UData.TagDataChannel.ObjectDataReceived.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UData.TagDataChannel.ObjectDataReceived.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UData.TagDataChannel.Schema">
      <summary>The Ubisense.UData.TagDataChannel schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.UData.TagDataChannel.Schema._rxpo">
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.Schema.insert_object_data(Ubisense.UBase.UObject,System.UInt16)">
      <summary>Add a data item for an object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj"></param>
      <param name="value"></param>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.Schema.remove_object_data(Ubisense.UBase.UObject)">
      <summary>Remove data items for an object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj"></param>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.Schema.remove_all_data">
      <summary>Remove data items for all objects. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
    </member>
    <member name="P:Ubisense.UData.TagDataChannel.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.UData.TagDataChannel.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.UData.TagDataChannel.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.UData.TagDataChannel.ObjectDataReceived">
      <summary>Relation containing data received. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.ObjectDataReceived.AddInsertHandler(Ubisense.UData.TagDataChannel.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UData.TagDataChannel.ObjectDataReceived.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.ObjectDataReceived.AddUpdateHandler(Ubisense.UData.TagDataChannel.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UData.TagDataChannel.ObjectDataReceived.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.ObjectDataReceived.AddDeleteHandler(Ubisense.UData.TagDataChannel.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UData.TagDataChannel.ObjectDataReceived.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.ObjectDataReceived.object_(Ubisense.UData.TagDataChannel.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index object_. Finds all the instances of data values sent. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.ObjectDataReceived.object_(Ubisense.UData.TagDataChannel.ReadTransaction,Ubisense.UBase.UObject)">
      <summary>Iterate over the elements of the table that match the first argument of the index object_. Finds all the instances of data values sent. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.ObjectDataReceived.value_(Ubisense.UData.TagDataChannel.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index value_. Finds all the instances of data values sent. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.ObjectDataReceived.value_(Ubisense.UData.TagDataChannel.ReadTransaction,System.UInt16)">
      <summary>Iterate over the elements of the table that match the first argument of the index value_. Finds all the instances of data values sent. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.ObjectDataReceived.timestamp_(Ubisense.UData.TagDataChannel.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index timestamp_. Finds all the instances of data values sent. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.ObjectDataReceived.timestamp_(Ubisense.UData.TagDataChannel.ReadTransaction,System.DateTime)">
      <summary>Iterate over the elements of the table that match the first argument of the index timestamp_. Finds all the instances of data values sent. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UData.TagDataChannel.ObjectDataReceived.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UData.TagDataChannel.ObjectDataReceived.RowType.object_">
      <summary>The object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UData.TagDataChannel.ObjectDataReceived.RowType.value_">
      <summary>The data value. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UData.TagDataChannel.ObjectDataReceived.RowType.timestamp_">
      <summary>When the data was sent. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.ObjectDataReceived.RowType.#ctor(Ubisense.UBase.UObject,System.UInt16,System.DateTime)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UData.TagDataChannel.ObjectDataReceived.___lop_key_object_">
      <summary>The lex-ordered prefixable key for the index object_</summary>
    </member>
    <member name="T:Ubisense.UData.TagDataChannel.ObjectDataReceived.___lop_cmp_object_">
      <summary>The ordering for the index object_</summary>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.ObjectDataReceived.___lop_cmp_object_.Compare(Ubisense.UData.TagDataChannel.ObjectDataReceived.___lop_key_object_,Ubisense.UData.TagDataChannel.ObjectDataReceived.___lop_key_object_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UData.TagDataChannel.ObjectDataReceived.___lop_key_value_">
      <summary>The lex-ordered prefixable key for the index value_</summary>
    </member>
    <member name="T:Ubisense.UData.TagDataChannel.ObjectDataReceived.___lop_cmp_value_">
      <summary>The ordering for the index value_</summary>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.ObjectDataReceived.___lop_cmp_value_.Compare(Ubisense.UData.TagDataChannel.ObjectDataReceived.___lop_key_value_,Ubisense.UData.TagDataChannel.ObjectDataReceived.___lop_key_value_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UData.TagDataChannel.ObjectDataReceived.___lop_key_timestamp_">
      <summary>The lex-ordered prefixable key for the index timestamp_</summary>
    </member>
    <member name="T:Ubisense.UData.TagDataChannel.ObjectDataReceived.___lop_cmp_timestamp_">
      <summary>The ordering for the index timestamp_</summary>
    </member>
    <member name="M:Ubisense.UData.TagDataChannel.ObjectDataReceived.___lop_cmp_timestamp_.Compare(Ubisense.UData.TagDataChannel.ObjectDataReceived.___lop_key_timestamp_,Ubisense.UData.TagDataChannel.ObjectDataReceived.___lop_key_timestamp_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UBuilding.Update.Schema">
      <summary>The Ubisense.UBuilding.Update schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.UBuilding.Update.Schema._rxpo">
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.Update.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Update.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Update.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Update.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Update.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.Update.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Update.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Update.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Update.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Update.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Update.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Update.Schema.create_area(Ubisense.UBuilding.Area,Ubisense.UBase.Symbol,System.String,Ubisense.UCell.PolygonalPrism)">
      <summary>Create an area. Returns false if that area or another area with the same name already exists in the AreaProperties relation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="area">The area object </param>
      <param name="name">The name of the area </param>
      <param name="description">The informal description of the area </param>
      <param name="extent">The extent of the area. </param>
    </member>
    <member name="M:Ubisense.UBuilding.Update.Schema.set_area_data(Ubisense.UBuilding.AreaData)">
      <summary>Set all data for an area atomically.  If the area exists, replaces existing data. Returns true iff the operation succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="data">All the data relevant to the area. </param>
    </member>
    <member name="M:Ubisense.UBuilding.Update.Schema.remove_area(Ubisense.UBuilding.Area,System.Boolean)">
      <summary>Remove an area. Return true if area removed or if it doesn't exist. Return false if the area cannot be removed.  Cascade is true means all references to the area, including the walls and room definitions, are also removed. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="area">The area to remove </param>
      <param name="cascade">Remove all references to the area </param>
    </member>
    <member name="M:Ubisense.UBuilding.Update.Schema.set_area_walls(Ubisense.UBuilding.Area,System.Collections.Generic.List{Ubisense.UBuilding.Wall})">
      <summary>Set the walls for an area, replacing any existing walls in that area. Return true iff the change was successful. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="area">The area to assign walls to. </param>
      <param name="walls">The walls to set. </param>
    </member>
    <member name="M:Ubisense.UBuilding.Update.Schema.set_area_navigation(Ubisense.UBuilding.Area,System.Collections.Generic.SortedSet{Ubisense.UBuilding.ConvexPolygon},System.Collections.Generic.SortedSet{Ubisense.UBuilding.ComparablePair{Ubisense.UBase.Line,Ubisense.UBase.Line}})">
      <summary>Set navigation data for an area, replacing any existing navigation data for that area. Returns true iff the change was successful. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="area">The area to assign navigation data to. </param>
      <param name="polygons">The set of convex polygons in the area. </param>
      <param name="graph">The door graph connecting doors in the area  with lines that go through the convex polygons. </param>
    </member>
    <member name="M:Ubisense.UBuilding.Update.Schema.create_room(Ubisense.UBuilding.Area,Ubisense.UBuilding.Room,Ubisense.UBase.Symbol,System.String,System.Collections.Generic.SortedSet{Ubisense.UBuilding.ConvexPolygon})">
      <summary>Add a new room to an area. Returns true iff the creation was successful. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="area">The area to add the room to. </param>
      <param name="room">The room object to add. </param>
      <param name="name">The human-readable name of the new room. </param>
      <param name="description">The human-readable description of the room. </param>
      <param name="polygons">The set of convex polygons covering the room's floor space. </param>
    </member>
    <member name="M:Ubisense.UBuilding.Update.Schema.remove_room(Ubisense.UBuilding.Room)">
      <summary>Remove a room. Returns true iff the removal occurred or the room already did not exist. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="room">The room object </param>
    </member>
    <member name="M:Ubisense.UBuilding.Update.Schema.set_link(Ubisense.UBuilding.LinkPropertiesStruct)">
      <summary>Set the properties of a link, replacing any previously set properties for the same link. Returns true iff the change was successful. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="props">The link properties. </param>
    </member>
    <member name="M:Ubisense.UBuilding.Update.Schema.remove_link(Ubisense.UBuilding.Link)">
      <summary>Remove a link. Returns true iff the removal occurred or the link already did not exist. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="link">The link to remove. </param>
    </member>
    <member name="M:Ubisense.UBuilding.Update.Schema.set_attributes(Ubisense.UBuilding.Area,System.Collections.Generic.List{Ubisense.UBuilding.AttributePropertiesStruct})">
      <summary>Set the attributes of an area, replacing any previously set attributes for that area. Returns true iff the change was successful. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="area">The area object to change. </param>
      <param name="attrs">The new or replacement sequence of Attribute objects. </param>
    </member>
    <member name="M:Ubisense.UBuilding.Update.Schema.remove_attributes(Ubisense.UBuilding.Area)">
      <summary>Remove the attributes of an area. Returns true iff the removal occurred or the given area already had no attributes set. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="area">The area object to change. </param>
    </member>
    <member name="P:Ubisense.UBuilding.Update.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.UBuilding.Update.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.UBuilding.Update.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocation.PerformanceData.Performance.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.PerformanceData.Performance.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocation.PerformanceData.Performance.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.PerformanceData.Performance.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocation.PerformanceData.Performance.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.PerformanceData.Performance.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.ULocation.PerformanceData.Performance.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.PerformanceData.Performance.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.ULocation.PerformanceData.Schema">
      <summary>The Ubisense.ULocation.PerformanceData schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.ULocation.PerformanceData.Schema._rxpo">
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Schema.set_performance(Ubisense.ULocation.PerformanceData.Performance.RowType)">
      <summary>Set performance data for a cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="data">The new entry to insert in the Performance relation, specifying which cell and its performance. </param>
    </member>
    <member name="P:Ubisense.ULocation.PerformanceData.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.ULocation.PerformanceData.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.ULocation.PerformanceData.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.ULocation.PerformanceData.Performance">
      <summary>Performance data for the cells. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Performance.AddInsertHandler(Ubisense.ULocation.PerformanceData.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.ULocation.PerformanceData.Performance.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Performance.AddUpdateHandler(Ubisense.ULocation.PerformanceData.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.ULocation.PerformanceData.Performance.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Performance.AddDeleteHandler(Ubisense.ULocation.PerformanceData.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.ULocation.PerformanceData.Performance.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Performance.cell_(Ubisense.ULocation.PerformanceData.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index cell_. The cell is the primary key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Performance.cell_(Ubisense.ULocation.PerformanceData.ReadTransaction,Ubisense.ULocation.Cell)">
      <summary>Iterate over the elements of the table that match the first argument of the index cell_. The cell is the primary key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.ULocation.PerformanceData.Performance.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.PerformanceData.Performance.RowType.cell_">
      <summary>The location cell in question. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.PerformanceData.Performance.RowType.mean_event_latency_">
      <summary>The mean time taken from receipt of a location event to all driven object locations being committed to the network. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.PerformanceData.Performance.RowType.max_event_latency_">
      <summary>The maximum time taken from receipt of a location event to all driven object locations being committed to the network. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.PerformanceData.Performance.RowType.transaction_rate_">
      <summary>The number of write transactions per second to the network. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.PerformanceData.Performance.RowType.transaction_bandwidth_">
      <summary>The bandwidth of write transactions per second to the network, in bytes per second. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.PerformanceData.Performance.RowType.number_of_objects_">
      <summary>The number of objects in the cell when the entry was last updated. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.PerformanceData.Performance.RowType.trylock_successes_">
      <summary>Number of successful trylock operations. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Performance.RowType.op_Equality(Ubisense.ULocation.PerformanceData.Performance.RowType,Ubisense.ULocation.PerformanceData.Performance.RowType)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Performance.RowType.op_Inequality(Ubisense.ULocation.PerformanceData.Performance.RowType,Ubisense.ULocation.PerformanceData.Performance.RowType)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Performance.RowType.op_LessThan(Ubisense.ULocation.PerformanceData.Performance.RowType,Ubisense.ULocation.PerformanceData.Performance.RowType)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Performance.RowType.op_GreaterThan(Ubisense.ULocation.PerformanceData.Performance.RowType,Ubisense.ULocation.PerformanceData.Performance.RowType)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Performance.RowType.#ctor(Ubisense.ULocation.Cell,System.TimeSpan,System.TimeSpan,System.Double,System.Double,System.Int32,System.Int32)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Performance.RowType.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Performance.RowType.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Performance.RowType.CompareTo(Ubisense.ULocation.PerformanceData.Performance.RowType)">
      <summary>Compare this instance with 'other'</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Performance.RowType.Equals(Ubisense.ULocation.PerformanceData.Performance.RowType)">
      <summary>True if this instance equals obj</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocation.PerformanceData.Performance.___lop_key_cell_">
      <summary>The lex-ordered prefixable key for the index cell_</summary>
    </member>
    <member name="T:Ubisense.ULocation.PerformanceData.Performance.___lop_cmp_cell_">
      <summary>The ordering for the index cell_</summary>
    </member>
    <member name="M:Ubisense.ULocation.PerformanceData.Performance.___lop_cmp_cell_.Compare(Ubisense.ULocation.PerformanceData.Performance.___lop_key_cell_,Ubisense.ULocation.PerformanceData.Performance.___lop_key_cell_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.USpatial.Monitor.Location.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Monitor.Location.RowType.Marshall(System.IO.BinaryWriter,Ubisense.USpatial.Monitor.Location.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Monitor.Location.RowType.Marshall(System.IO.BinaryWriter,Ubisense.USpatial.Monitor.Location.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Monitor.Location.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.USpatial.Monitor.Location.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Monitor.Location.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.USpatial.Monitor.Schema">
      <summary>The Ubisense.USpatial.Monitor schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.USpatial.Monitor.Schema._rxpo">
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="P:Ubisense.USpatial.Monitor.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.USpatial.Monitor.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.USpatial.Monitor.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.USpatial.Monitor.Contains">
      <summary>The subject role contains the object role. Its row type is Interaction. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Contains.AddInsertHandler(Ubisense.USpatial.Monitor.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.USpatial.Interaction})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Contains.AddUpdateHandler(Ubisense.USpatial.Monitor.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.USpatial.Interaction})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Contains.AddDeleteHandler(Ubisense.USpatial.Monitor.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.USpatial.Interaction})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Contains.subject_(Ubisense.USpatial.Monitor.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index subject_. Index on the subject (role, object) pair. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Contains.subject_(Ubisense.USpatial.Monitor.ReadTransaction,Ubisense.UBase.UObject)">
      <summary>Iterate over the elements of the table that match the first argument of the index subject_. Index on the subject (role, object) pair. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Contains.subject_(Ubisense.USpatial.Monitor.ReadTransaction,Ubisense.UBase.UObject,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index subject_. Index on the subject (role, object) pair. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Contains.object_(Ubisense.USpatial.Monitor.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index object_. Index on the object (role, subject) pair. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Contains.object_(Ubisense.USpatial.Monitor.ReadTransaction,Ubisense.UBase.UObject)">
      <summary>Iterate over the elements of the table that match the first argument of the index object_. Index on the object (role, subject) pair. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Contains.object_(Ubisense.USpatial.Monitor.ReadTransaction,Ubisense.UBase.UObject,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index object_. Index on the object (role, subject) pair. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.USpatial.Monitor.Contains.___lop_key_subject_">
      <summary>The lex-ordered prefixable key for the index subject_</summary>
    </member>
    <member name="T:Ubisense.USpatial.Monitor.Contains.___lop_cmp_subject_">
      <summary>The ordering for the index subject_</summary>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Contains.___lop_cmp_subject_.Compare(Ubisense.USpatial.Monitor.Contains.___lop_key_subject_,Ubisense.USpatial.Monitor.Contains.___lop_key_subject_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.USpatial.Monitor.Contains.___lop_key_object_">
      <summary>The lex-ordered prefixable key for the index object_</summary>
    </member>
    <member name="T:Ubisense.USpatial.Monitor.Contains.___lop_cmp_object_">
      <summary>The ordering for the index object_</summary>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Contains.___lop_cmp_object_.Compare(Ubisense.USpatial.Monitor.Contains.___lop_key_object_,Ubisense.USpatial.Monitor.Contains.___lop_key_object_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.USpatial.Monitor.Location">
      <summary>Deprecated. Object locations are now handled entirely in the ULocation schema. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Location.AddInsertHandler(Ubisense.USpatial.Monitor.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.USpatial.Monitor.Location.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Location.AddUpdateHandler(Ubisense.USpatial.Monitor.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.USpatial.Monitor.Location.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Location.AddDeleteHandler(Ubisense.USpatial.Monitor.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.USpatial.Monitor.Location.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Location.object_(Ubisense.USpatial.Monitor.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index object_. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Location.object_(Ubisense.USpatial.Monitor.ReadTransaction,Ubisense.UBase.UObject)">
      <summary>Iterate over the elements of the table that match the first argument of the index object_. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.USpatial.Monitor.Location.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Monitor.Location.RowType.object_">
      <summary></summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Monitor.Location.RowType.position_">
      <summary></summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Monitor.Location.RowType.time_">
      <summary></summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Location.RowType.#ctor(Ubisense.UBase.UObject,Ubisense.UBase.Position,System.DateTime)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.USpatial.Monitor.Location.___lop_key_object_">
      <summary>The lex-ordered prefixable key for the index object_</summary>
    </member>
    <member name="T:Ubisense.USpatial.Monitor.Location.___lop_cmp_object_">
      <summary>The ordering for the index object_</summary>
    </member>
    <member name="M:Ubisense.USpatial.Monitor.Location.___lop_cmp_object_.Compare(Ubisense.USpatial.Monitor.Location.___lop_key_object_,Ubisense.USpatial.Monitor.Location.___lop_key_object_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UCell.CellData.Route.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.CellData.Route.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UCell.CellData.Route.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.CellData.Route.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UCell.CellData.Route.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.CellData.Route.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UCell.CellData.Route.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.CellData.Route.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UCell.CellData.Schema">
      <summary>The Ubisense.UCell.CellData schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.UCell.CellData.Schema._rxpo">
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UCell.CellData.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UCell.CellData.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Schema.get_child(Ubisense.UBase.UObject,Ubisense.UCell.Cell@)">
      <summary>Lookup route for an object, returning true if the object is in this cell (or one of its descendants) and false otherwise. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj">The object </param>
      <param name="cell">The child whose descendant the object is in. </param>
    </member>
    <member name="M:Ubisense.UCell.CellData.Schema.get_contents(Ubisense.UCell.Cell)">
      <summary>Get a set containing all the objects in the given cell and its descendants. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="cell">The cell whose contents you want; it must be an immediate child of the cell serving the schema. </param>
    </member>
    <member name="M:Ubisense.UCell.CellData.Schema.remove_object(Ubisense.UBase.UObject)">
      <summary>Remove an object from this cell by setting its route to the nil cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj">The object to remove </param>
    </member>
    <member name="M:Ubisense.UCell.CellData.Schema.apply_sightings(System.Collections.Generic.LinkedList{Ubisense.UCell.CellData.Route.RowType})">
      <summary>Apply of a set of object sightings in a child cell. As each object can only be in at most one child cell, each row given replaces any existing information for that object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="sightings">A set of rows to apply. Each row will contain the new child cell for objects that have been handed over, or nil for removed objects. </param>
    </member>
    <member name="P:Ubisense.UCell.CellData.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.UCell.CellData.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.UCell.CellData.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.UCell.CellData.Route">
      <summary>Relation containing the routing for a cell.  For each object in each of the descendant cells of the serving cell, this relation stores the immediate child that contains (or whose descendant contains) the object.  To find the cell containing an object, start at the Site cell, look up the object in the route relation for the cell, and recurse. If the cell returned for the object is the current cell, then the object is in the current cell itself (and not one of its descendants). If the cell returned for the object is nil, the object has been removed. The route relation can only contain children of the cell that is serving this schema; this ensures that the update bandwidth due to cell handover events does not increase at the root cell as the hierarchy gets deeper.  In short, this relation tells you which child of the current cell you should ask in order to find an object contained in one of this cell's descendants. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Route.AddInsertHandler(Ubisense.UCell.CellData.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UCell.CellData.Route.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Route.AddUpdateHandler(Ubisense.UCell.CellData.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UCell.CellData.Route.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Route.AddDeleteHandler(Ubisense.UCell.CellData.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UCell.CellData.Route.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Route.object_(Ubisense.UCell.CellData.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index object_. Look up the containment relationship by object. The object uniquely defines a child cell that contains it. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Route.object_(Ubisense.UCell.CellData.ReadTransaction,Ubisense.UBase.UObject)">
      <summary>Iterate over the elements of the table that match the first argument of the index object_. Look up the containment relationship by object. The object uniquely defines a child cell that contains it. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Route.cell_(Ubisense.UCell.CellData.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index cell_. Look up the containment relationship by cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Route.cell_(Ubisense.UCell.CellData.ReadTransaction,Ubisense.UCell.Cell)">
      <summary>Iterate over the elements of the table that match the first argument of the index cell_. Look up the containment relationship by cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UCell.CellData.Route.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UCell.CellData.Route.RowType.object_">
      <summary>The object  </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UCell.CellData.Route.RowType.cell_">
      <summary>The cell that the object is in. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UCell.CellData.Route.RowType.modified_">
      <summary>The modification time of the row; i.e., the time the object moved into the immediate child it is currently in (or currently in a descendant of). </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Route.RowType.op_Equality(Ubisense.UCell.CellData.Route.RowType,Ubisense.UCell.CellData.Route.RowType)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Route.RowType.op_Inequality(Ubisense.UCell.CellData.Route.RowType,Ubisense.UCell.CellData.Route.RowType)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Route.RowType.op_LessThan(Ubisense.UCell.CellData.Route.RowType,Ubisense.UCell.CellData.Route.RowType)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Route.RowType.op_GreaterThan(Ubisense.UCell.CellData.Route.RowType,Ubisense.UCell.CellData.Route.RowType)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Route.RowType.#ctor(Ubisense.UBase.UObject,Ubisense.UCell.Cell,System.DateTime)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Route.RowType.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Route.RowType.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Route.RowType.CompareTo(Ubisense.UCell.CellData.Route.RowType)">
      <summary>Compare this instance with 'other'</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.CellData.Route.RowType.Equals(Ubisense.UCell.CellData.Route.RowType)">
      <summary>True if this instance equals obj</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UCell.CellData.Route.___lop_key_object_">
      <summary>The lex-ordered prefixable key for the index object_</summary>
    </member>
    <member name="T:Ubisense.UCell.CellData.Route.___lop_cmp_object_">
      <summary>The ordering for the index object_</summary>
    </member>
    <member name="M:Ubisense.UCell.CellData.Route.___lop_cmp_object_.Compare(Ubisense.UCell.CellData.Route.___lop_key_object_,Ubisense.UCell.CellData.Route.___lop_key_object_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UCell.CellData.Route.___lop_key_cell_">
      <summary>The lex-ordered prefixable key for the index cell_</summary>
    </member>
    <member name="T:Ubisense.UCell.CellData.Route.___lop_cmp_cell_">
      <summary>The ordering for the index cell_</summary>
    </member>
    <member name="M:Ubisense.UCell.CellData.Route.___lop_cmp_cell_.Compare(Ubisense.UCell.CellData.Route.___lop_key_cell_,Ubisense.UCell.CellData.Route.___lop_key_cell_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.ULocation.Cell">
      <summary>A location cell is a cell that serves a CellData schema. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.Cell.op_Equality(Ubisense.ULocation.Cell,Ubisense.ULocation.Cell)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.Cell.op_Inequality(Ubisense.ULocation.Cell,Ubisense.ULocation.Cell)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.Cell.op_LessThan(Ubisense.ULocation.Cell,Ubisense.ULocation.Cell)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.Cell.op_GreaterThan(Ubisense.ULocation.Cell,Ubisense.ULocation.Cell)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.Cell.op_Implicit(Ubisense.ULocation.Cell)~Ubisense.UBase.UObject">
      <summary>Implicit conversion operator to ancestor type global::Ubisense.UBase.UObject</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocation.Cell.op_Implicit(Ubisense.ULocation.Cell)~Ubisense.UCell.Cell">
      <summary>Implicit conversion operator to ancestor type global::Ubisense.UCell.Cell</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocation.Cell.#cctor">
      <summary>Initialise the Cell type</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.Cell.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>Unsafe constructor to create an instance of type Cell with a specific state.
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            </summary>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.Cell.#ctor(System.Boolean)">
      <summary>Create a new Cell instance that is either unique or nil</summary>
      <param name="unique">Make this instance unique</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.Cell.Narrow(Ubisense.UBase.IObject)">
      <summary>Assign another object to this one if and only if the other object's dynamic type inherits from the static type of this instance</summary>
      <param name="other">The object to assign to this object</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.Cell.Unique">
      <summary>Make this object into a new unique instance with DynamicType equal to Cell</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.Cell.Nil">
      <summary>True iff this object is the nil instance of type Cell</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.Cell.ToString">
      <summary>Returns a String representation of the value of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.Cell.ToString(System.String,System.IFormatProvider)">
      <summary>Equivalent to ToString()</summary>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.Cell.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.Cell.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.Cell.CompareTo(Ubisense.ULocation.Cell)">
      <summary>Compare this instance with 'other'</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.Cell.Equals(Ubisense.ULocation.Cell)">
      <summary>True if this instance equals obj</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.ULocation.Cell.StaticType">
      <summary>The statically-declared type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.ULocation.Cell.DynamicType">
      <summary>The most-derived dynamic type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.ULocation.Cell.Id">
      <summary>The id of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="T:Ubisense.ULocation.FallbackObject">
      <summary>An object whose location is not forwarded from the fallback cell to other cells. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.FallbackObject.op_Equality(Ubisense.ULocation.FallbackObject,Ubisense.ULocation.FallbackObject)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.FallbackObject.op_Inequality(Ubisense.ULocation.FallbackObject,Ubisense.ULocation.FallbackObject)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.FallbackObject.op_LessThan(Ubisense.ULocation.FallbackObject,Ubisense.ULocation.FallbackObject)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.FallbackObject.op_GreaterThan(Ubisense.ULocation.FallbackObject,Ubisense.ULocation.FallbackObject)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.FallbackObject.op_Implicit(Ubisense.ULocation.FallbackObject)~Ubisense.UBase.UObject">
      <summary>Implicit conversion operator to ancestor type global::Ubisense.UBase.UObject</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocation.FallbackObject.#cctor">
      <summary>Initialise the FallbackObject type</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.FallbackObject.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>Unsafe constructor to create an instance of type FallbackObject with a specific state.
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            </summary>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.FallbackObject.#ctor(System.Boolean)">
      <summary>Create a new FallbackObject instance that is either unique or nil</summary>
      <param name="unique">Make this instance unique</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.FallbackObject.Narrow(Ubisense.UBase.IObject)">
      <summary>Assign another object to this one if and only if the other object's dynamic type inherits from the static type of this instance</summary>
      <param name="other">The object to assign to this object</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.FallbackObject.Unique">
      <summary>Make this object into a new unique instance with DynamicType equal to FallbackObject</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.FallbackObject.Nil">
      <summary>True iff this object is the nil instance of type FallbackObject</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.FallbackObject.ToString">
      <summary>Returns a String representation of the value of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.FallbackObject.ToString(System.String,System.IFormatProvider)">
      <summary>Equivalent to ToString()</summary>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.FallbackObject.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.FallbackObject.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.FallbackObject.CompareTo(Ubisense.ULocation.FallbackObject)">
      <summary>Compare this instance with 'other'</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocation.FallbackObject.Equals(Ubisense.ULocation.FallbackObject)">
      <summary>True if this instance equals obj</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.ULocation.FallbackObject.StaticType">
      <summary>The statically-declared type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.ULocation.FallbackObject.DynamicType">
      <summary>The most-derived dynamic type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.ULocation.FallbackObject.Id">
      <summary>The id of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="T:Ubisense.ULocation.Box">
      <summary>A box defined by two points as the smallest axis-aligned box containing the two points; that is, it has one corner at one point and the opposite corner at the other point. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.Box.p1_">
      <summary></summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.Box.p2_">
      <summary></summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocation.Box.#ctor(Ubisense.UBase.Vector3D,Ubisense.UBase.Vector3D)">
      <summary>Create a new Box instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocation.Accuracy">
      <summary>The accuracy information for an object location. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.Accuracy.valid_">
      <summary>True if this accuracy information is valid, false if the accuracy of the position is unknown. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.Accuracy.GDOP_">
      <summary>Geometric Dilution of Precision, which indicates how much inherent inaccuracy the relative positions of tag and sensors gives to the position calculation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.Accuracy.stderr_">
      <summary>The total error in metres at X% confidence. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocation.Accuracy.#ctor(System.Boolean,System.Double,System.Double)">
      <summary>Create a new Accuracy instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocation.LocationEvent">
      <summary>A location event that can be sent to a cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.LocationEvent.object_">
      <summary>The object that has been located. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.LocationEvent.remove_">
      <summary>If this is true, it indicates that the object has been removed from the cell. The subsequent fields are ignored. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.LocationEvent.position_">
      <summary>The sensed or calculated position of the object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.LocationEvent.time_">
      <summary>When the object was at the position. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.LocationEvent.accuracy_">
      <summary>The accuracy of position_, if known. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocation.LocationEvent.#ctor(Ubisense.UBase.UObject,System.Boolean,Ubisense.UBase.Position,System.DateTime,Ubisense.ULocation.Accuracy)">
      <summary>Create a new LocationEvent instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocation.Transform">
      <summary>A transform of an object's position and orientation.  Apply an offset in the object-centric coordinates (object space), then apply a rotation about the new position.  If the original position is p, and the original orientation q, then after transform:  p' = p + q(offset_)  q' = rotate_*q </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.Transform.offset_">
      <summary>Translation in object-centric coordinates (object space). </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.Transform.rotate_">
      <summary>Rotation about the new position. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocation.Transform.#ctor(Ubisense.UBase.Vector3D,Ubisense.UBase.Quaternion)">
      <summary>Create a new Transform instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocation.Cell">
      <summary>A location cell is a cell that serves a CellData schema. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.Cell.Marshall(System.IO.BinaryWriter,Ubisense.ULocation.Cell)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.Cell.Marshall(System.IO.BinaryWriter,Ubisense.ULocation.Cell@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.Cell.Unmarshall(System.IO.BinaryReader,Ubisense.ULocation.Cell@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.Cell.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocation.FallbackObject">
      <summary>An object whose location is not forwarded from the fallback cell to other cells. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.FallbackObject.Marshall(System.IO.BinaryWriter,Ubisense.ULocation.FallbackObject)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.FallbackObject.Marshall(System.IO.BinaryWriter,Ubisense.ULocation.FallbackObject@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.FallbackObject.Unmarshall(System.IO.BinaryReader,Ubisense.ULocation.FallbackObject@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.FallbackObject.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocation.Box">
      <summary>A box defined by two points as the smallest axis-aligned box containing the two points; that is, it has one corner at one point and the opposite corner at the other point. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.Box.Marshall(System.IO.BinaryWriter,Ubisense.ULocation.Box)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.Box.Marshall(System.IO.BinaryWriter,Ubisense.ULocation.Box@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.Box.Unmarshall(System.IO.BinaryReader,Ubisense.ULocation.Box@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.Box.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocation.Accuracy">
      <summary>The accuracy information for an object location. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.Accuracy.Marshall(System.IO.BinaryWriter,Ubisense.ULocation.Accuracy)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.Accuracy.Marshall(System.IO.BinaryWriter,Ubisense.ULocation.Accuracy@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.Accuracy.Unmarshall(System.IO.BinaryReader,Ubisense.ULocation.Accuracy@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.Accuracy.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocation.LocationEvent">
      <summary>A location event that can be sent to a cell. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.LocationEvent.Marshall(System.IO.BinaryWriter,Ubisense.ULocation.LocationEvent)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.LocationEvent.Marshall(System.IO.BinaryWriter,Ubisense.ULocation.LocationEvent@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.LocationEvent.Unmarshall(System.IO.BinaryReader,Ubisense.ULocation.LocationEvent@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.LocationEvent.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocation.Transform">
      <summary>A transform of an object's position and orientation.  Apply an offset in the object-centric coordinates (object space), then apply a rotation about the new position.  If the original position is p, and the original orientation q, then after transform:  p' = p + q(offset_)  q' = rotate_*q </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.Transform.Marshall(System.IO.BinaryWriter,Ubisense.ULocation.Transform)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.Transform.Marshall(System.IO.BinaryWriter,Ubisense.ULocation.Transform@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.Transform.Unmarshall(System.IO.BinaryReader,Ubisense.ULocation.Transform@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.Transform.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UVis.Representation.KeyName.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.KeyName.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UVis.Representation.KeyName.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.KeyName.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UVis.Representation.KeyName.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.KeyName.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UVis.Representation.KeyName.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.KeyName.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UVis.Representation.KeyRep2D.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.KeyRep2D.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UVis.Representation.KeyRep2D.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.KeyRep2D.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UVis.Representation.KeyRep2D.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.KeyRep2D.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UVis.Representation.KeyRep2D.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.KeyRep2D.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UVis.Representation.KeyRep3D.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.KeyRep3D.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UVis.Representation.KeyRep3D.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.KeyRep3D.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UVis.Representation.KeyRep3D.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.KeyRep3D.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UVis.Representation.KeyRep3D.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.KeyRep3D.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UVis.Representation.ObjectKey.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.ObjectKey.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UVis.Representation.ObjectKey.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.ObjectKey.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UVis.Representation.ObjectKey.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.ObjectKey.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UVis.Representation.ObjectKey.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.ObjectKey.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UVis.Representation.TypeKey.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.TypeKey.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UVis.Representation.TypeKey.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.TypeKey.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UVis.Representation.TypeKey.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.TypeKey.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UVis.Representation.TypeKey.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.TypeKey.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UVis.Representation.BaseTypeKey.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.BaseTypeKey.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UVis.Representation.BaseTypeKey.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.BaseTypeKey.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UVis.Representation.BaseTypeKey.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.BaseTypeKey.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UVis.Representation.BaseTypeKey.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.BaseTypeKey.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UVis.Representation.NamedMaterial.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.NamedMaterial.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UVis.Representation.NamedMaterial.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.NamedMaterial.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UVis.Representation.NamedMaterial.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.NamedMaterial.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UVis.Representation.NamedMaterial.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Representation.NamedMaterial.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UVis.Representation.Schema">
      <summary>The Ubisense.UVis.Representation schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.UVis.Representation.Schema._rxpo">
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.set_key_name(Ubisense.UVis.Key,System.String,System.Collections.Generic.List{System.String}@)">
      <summary>Create a new key or update the name of an existing key. Returns true iff the key was created or updated successfully. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="key">The key in question. </param>
      <param name="name">The new name for the key. </param>
      <param name="messages">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.remove_key(Ubisense.UVis.Key,System.Boolean,System.Collections.Generic.List{System.String}@)">
      <summary>Remove the given key.  If chain is true, also remove all uses of the key: types and objects assigned this key will no longer have a representation (or will revert to their inherited representation). If chain is false, it will fail if the key is in use.  Returns true iff the removal occurred or the key already did not exist. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="key">The key to remove. </param>
      <param name="chain">Whether to remove all uses of the key. </param>
      <param name="messages">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.set_key_rep_2d(Ubisense.UVis.Key,Ubisense.UVis.Rep,System.Collections.Generic.List{System.String}@)">
      <summary>Set the 2D representation for a key. If this key already has a 2D representation, it will be replaced with this one. Returns true iff the representation was set or updated successfully. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="key">The key to change. </param>
      <param name="rep">The representation to use. </param>
      <param name="messages">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.remove_key_rep_2d(Ubisense.UVis.Key,Ubisense.UVis.Rep,System.Collections.Generic.List{System.String}@)">
      <summary>Remove the 2D representation for a key. Returns true if the removal occurred or the key already had no 2D representation set. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="key">The key to change. </param>
      <param name="rep">The passed representation is ignored, as the key already uniquely defines an entry to remove from the relation. </param>
      <param name="messages">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.set_key_rep_3d(Ubisense.UVis.Key,Ubisense.UVis.Rep,System.Collections.Generic.List{System.String}@)">
      <summary>Set the 3D representation for a key. If this key already has a 3D representation, it will be replaced with this one. Returns true iff the representation was set or updated successfully. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="key">The key to change. </param>
      <param name="rep">The representation to use. </param>
      <param name="messages">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.remove_key_rep_3d(Ubisense.UVis.Key,Ubisense.UVis.Rep,System.Collections.Generic.List{System.String}@)">
      <summary>Remove the 3D representation for a key. Returns true iff the removal occurred or the key already had no 3D representation set. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="key">The key to change. </param>
      <param name="rep">The passed representation is ignored, as the key already uniquely defines an entry to remove from the relation. </param>
      <param name="messages">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.set_object_key(Ubisense.UBase.UObject,Ubisense.UVis.Key,System.Collections.Generic.List{System.String}@)">
      <summary>Set the representation key for an object, replacing any key previously set for that object, and overriding any key set for the object's types. Returns true iff the change succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj">The object to set representations for. </param>
      <param name="key">The representation key to assign to the object. </param>
      <param name="messages">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.remove_object_key(Ubisense.UBase.UObject,System.Collections.Generic.List{System.String}@)">
      <summary>Remove an object's key. The object will instead use the representation key obtained from its types. Returns true iff the change occurred or the object already had no key set. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj">The object to change. </param>
      <param name="messages">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.set_type_key(Ubisense.UBase.Symbol,Ubisense.UVis.Key,System.Collections.Generic.List{System.String}@)">
      <summary>Set a type's representation. All instances of this type that do not have a key set directly will use this representation key. Returns true iff the change succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="t">The type to set representations for. </param>
      <param name="key">The representation key to assign to the type's instances. </param>
      <param name="messages">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.remove_type_key(Ubisense.UBase.Symbol,System.Collections.Generic.List{System.String}@)">
      <summary>Remove a type's representation key. The type will instead use whatever key it inherits from its ancestor types, if any. Returns true iff the removal occurred or the type already had no key set. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="t">The type to change. </param>
      <param name="messages">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.set_named_material(System.String,Ubisense.UVis.Material,System.Collections.Generic.List{System.String}@)">
      <summary>Name a material.  Replaces any existing material with this name. Returns true iff the addition succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="name">The human-readable name for the new material. </param>
      <param name="material">The properties of the new material. </param>
      <param name="messages">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UVis.Representation.Schema.remove_named_material(System.String,System.Collections.Generic.List{System.String}@)">
      <summary>Remove a material. Returns true iff the removal occurred or there was already no material with this name. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="name">The name of the material to remove. </param>
      <param name="messages">Will be used to return any errors. </param>
    </member>
    <member name="P:Ubisense.UVis.Representation.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.UVis.Representation.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.UVis.Representation.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.UVis.Representation.KeyName">
      <summary>A key has a name. This relation is the main storage for keys and allows them to be found by name. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyName.AddInsertHandler(Ubisense.UVis.Representation.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UVis.Representation.KeyName.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyName.AddUpdateHandler(Ubisense.UVis.Representation.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UVis.Representation.KeyName.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyName.AddDeleteHandler(Ubisense.UVis.Representation.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UVis.Representation.KeyName.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyName.key_(Ubisense.UVis.Representation.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index key_. The key is the primary identifier, so must be unique. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyName.key_(Ubisense.UVis.Representation.ReadTransaction,Ubisense.UVis.Key)">
      <summary>Iterate over the elements of the table that match the first argument of the index key_. The key is the primary identifier, so must be unique. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyName.name_(Ubisense.UVis.Representation.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index name_. The name must also be unique. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyName.name_(Ubisense.UVis.Representation.ReadTransaction,System.String)">
      <summary>Iterate over the elements of the table that match the first argument of the index name_. The name must also be unique. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UVis.Representation.KeyName.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UVis.Representation.KeyName.RowType.key_">
      <summary>The key that identifies the named representation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UVis.Representation.KeyName.RowType.name_">
      <summary>The human-readable name. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyName.RowType.#ctor(Ubisense.UVis.Key,System.String)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UVis.Representation.KeyName.___lop_key_key_">
      <summary>The lex-ordered prefixable key for the index key_</summary>
    </member>
    <member name="T:Ubisense.UVis.Representation.KeyName.___lop_cmp_key_">
      <summary>The ordering for the index key_</summary>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyName.___lop_cmp_key_.Compare(Ubisense.UVis.Representation.KeyName.___lop_key_key_,Ubisense.UVis.Representation.KeyName.___lop_key_key_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UVis.Representation.KeyName.___lop_key_name_">
      <summary>The lex-ordered prefixable key for the index name_</summary>
    </member>
    <member name="T:Ubisense.UVis.Representation.KeyName.___lop_cmp_name_">
      <summary>The ordering for the index name_</summary>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyName.___lop_cmp_name_.Compare(Ubisense.UVis.Representation.KeyName.___lop_key_name_,Ubisense.UVis.Representation.KeyName.___lop_key_name_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UVis.Representation.KeyRep2D">
      <summary>A key can have a 2D representation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyRep2D.AddInsertHandler(Ubisense.UVis.Representation.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UVis.Representation.KeyRep2D.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyRep2D.AddUpdateHandler(Ubisense.UVis.Representation.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UVis.Representation.KeyRep2D.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyRep2D.AddDeleteHandler(Ubisense.UVis.Representation.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UVis.Representation.KeyRep2D.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyRep2D.key_(Ubisense.UVis.Representation.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index key_. Each key can have at most one 2D representation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyRep2D.key_(Ubisense.UVis.Representation.ReadTransaction,Ubisense.UVis.Key)">
      <summary>Iterate over the elements of the table that match the first argument of the index key_. Each key can have at most one 2D representation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UVis.Representation.KeyRep2D.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UVis.Representation.KeyRep2D.RowType.key_">
      <summary>The key that identifies the named representation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UVis.Representation.KeyRep2D.RowType.rep_">
      <summary>The 2D representation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyRep2D.RowType.#ctor(Ubisense.UVis.Key,Ubisense.UVis.Rep)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UVis.Representation.KeyRep2D.___lop_key_key_">
      <summary>The lex-ordered prefixable key for the index key_</summary>
    </member>
    <member name="T:Ubisense.UVis.Representation.KeyRep2D.___lop_cmp_key_">
      <summary>The ordering for the index key_</summary>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyRep2D.___lop_cmp_key_.Compare(Ubisense.UVis.Representation.KeyRep2D.___lop_key_key_,Ubisense.UVis.Representation.KeyRep2D.___lop_key_key_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UVis.Representation.KeyRep3D">
      <summary>A key can have a 3D representation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyRep3D.AddInsertHandler(Ubisense.UVis.Representation.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UVis.Representation.KeyRep3D.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyRep3D.AddUpdateHandler(Ubisense.UVis.Representation.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UVis.Representation.KeyRep3D.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyRep3D.AddDeleteHandler(Ubisense.UVis.Representation.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UVis.Representation.KeyRep3D.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyRep3D.key_(Ubisense.UVis.Representation.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index key_. Each key can have at most one 3D representation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyRep3D.key_(Ubisense.UVis.Representation.ReadTransaction,Ubisense.UVis.Key)">
      <summary>Iterate over the elements of the table that match the first argument of the index key_. Each key can have at most one 3D representation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UVis.Representation.KeyRep3D.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UVis.Representation.KeyRep3D.RowType.key_">
      <summary>The key that identifies the named representation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UVis.Representation.KeyRep3D.RowType.rep_">
      <summary>The 3D representation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyRep3D.RowType.#ctor(Ubisense.UVis.Key,Ubisense.UVis.Rep)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UVis.Representation.KeyRep3D.___lop_key_key_">
      <summary>The lex-ordered prefixable key for the index key_</summary>
    </member>
    <member name="T:Ubisense.UVis.Representation.KeyRep3D.___lop_cmp_key_">
      <summary>The ordering for the index key_</summary>
    </member>
    <member name="M:Ubisense.UVis.Representation.KeyRep3D.___lop_cmp_key_.Compare(Ubisense.UVis.Representation.KeyRep3D.___lop_key_key_,Ubisense.UVis.Representation.KeyRep3D.___lop_key_key_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UVis.Representation.ObjectKey">
      <summary>An object uses a key for their representation. This is used instead of the key assigned to the object's type in the TypeKeyRelation, if there is one. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.ObjectKey.AddInsertHandler(Ubisense.UVis.Representation.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UVis.Representation.ObjectKey.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.ObjectKey.AddUpdateHandler(Ubisense.UVis.Representation.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UVis.Representation.ObjectKey.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.ObjectKey.AddDeleteHandler(Ubisense.UVis.Representation.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UVis.Representation.ObjectKey.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.ObjectKey.object_(Ubisense.UVis.Representation.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index object_. Each object can have at most one key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.ObjectKey.object_(Ubisense.UVis.Representation.ReadTransaction,Ubisense.UBase.UObject)">
      <summary>Iterate over the elements of the table that match the first argument of the index object_. Each object can have at most one key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.ObjectKey.key_(Ubisense.UVis.Representation.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index key_. Used to find the objects that use a given key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.ObjectKey.key_(Ubisense.UVis.Representation.ReadTransaction,Ubisense.UVis.Key)">
      <summary>Iterate over the elements of the table that match the first argument of the index key_. Used to find the objects that use a given key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UVis.Representation.ObjectKey.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UVis.Representation.ObjectKey.RowType.object_">
      <summary>The object that is represented. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UVis.Representation.ObjectKey.RowType.key_">
      <summary>The representation key to use. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.ObjectKey.RowType.#ctor(Ubisense.UBase.UObject,Ubisense.UVis.Key)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UVis.Representation.ObjectKey.___lop_key_object_">
      <summary>The lex-ordered prefixable key for the index object_</summary>
    </member>
    <member name="T:Ubisense.UVis.Representation.ObjectKey.___lop_cmp_object_">
      <summary>The ordering for the index object_</summary>
    </member>
    <member name="M:Ubisense.UVis.Representation.ObjectKey.___lop_cmp_object_.Compare(Ubisense.UVis.Representation.ObjectKey.___lop_key_object_,Ubisense.UVis.Representation.ObjectKey.___lop_key_object_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UVis.Representation.ObjectKey.___lop_key_key_">
      <summary>The lex-ordered prefixable key for the index key_</summary>
    </member>
    <member name="T:Ubisense.UVis.Representation.ObjectKey.___lop_cmp_key_">
      <summary>The ordering for the index key_</summary>
    </member>
    <member name="M:Ubisense.UVis.Representation.ObjectKey.___lop_cmp_key_.Compare(Ubisense.UVis.Representation.ObjectKey.___lop_key_key_,Ubisense.UVis.Representation.ObjectKey.___lop_key_key_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UVis.Representation.TypeKey">
      <summary>Instances of a type use a key for their representation.  This table is generated by combining the BaseTypeKey relation with the type hierarchy.  If an object has a key assigned to its type and a key assigned directly to the object in the ObjectKey relation, the key from the ObjectKey relation takes precedence.  If a type inherits from more than one other type, and more than one of its parent types has a key set for it, then the parent type that is lexicographically earliest is the one whose representation will be inherited. If a type has a key assigned to it directly, that will be used instead of any inherited key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.TypeKey.AddInsertHandler(Ubisense.UVis.Representation.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UVis.Representation.TypeKey.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.TypeKey.AddUpdateHandler(Ubisense.UVis.Representation.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UVis.Representation.TypeKey.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.TypeKey.AddDeleteHandler(Ubisense.UVis.Representation.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UVis.Representation.TypeKey.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.TypeKey.type_(Ubisense.UVis.Representation.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index type_. Each type can have at most one key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.TypeKey.type_(Ubisense.UVis.Representation.ReadTransaction,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table that match the first argument of the index type_. Each type can have at most one key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.TypeKey.key_(Ubisense.UVis.Representation.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index key_. Used to find the types that use a given key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.TypeKey.key_(Ubisense.UVis.Representation.ReadTransaction,Ubisense.UVis.Key)">
      <summary>Iterate over the elements of the table that match the first argument of the index key_. Used to find the types that use a given key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UVis.Representation.TypeKey.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UVis.Representation.TypeKey.RowType.type_">
      <summary>The type whose instances are represented. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UVis.Representation.TypeKey.RowType.key_">
      <summary>The representation key to use. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.TypeKey.RowType.#ctor(Ubisense.UBase.Symbol,Ubisense.UVis.Key)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UVis.Representation.TypeKey.___lop_key_type_">
      <summary>The lex-ordered prefixable key for the index type_</summary>
    </member>
    <member name="T:Ubisense.UVis.Representation.TypeKey.___lop_cmp_type_">
      <summary>The ordering for the index type_</summary>
    </member>
    <member name="M:Ubisense.UVis.Representation.TypeKey.___lop_cmp_type_.Compare(Ubisense.UVis.Representation.TypeKey.___lop_key_type_,Ubisense.UVis.Representation.TypeKey.___lop_key_type_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UVis.Representation.TypeKey.___lop_key_key_">
      <summary>The lex-ordered prefixable key for the index key_</summary>
    </member>
    <member name="T:Ubisense.UVis.Representation.TypeKey.___lop_cmp_key_">
      <summary>The ordering for the index key_</summary>
    </member>
    <member name="M:Ubisense.UVis.Representation.TypeKey.___lop_cmp_key_.Compare(Ubisense.UVis.Representation.TypeKey.___lop_key_key_,Ubisense.UVis.Representation.TypeKey.___lop_key_key_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UVis.Representation.BaseTypeKey">
      <summary>Objects that derive from a type use a key for their representation. The most specific row in this table is used for any given type, so assertions for more derived types override less derived types.  An assertion in ObjectKey overrides an assertion in this relation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.BaseTypeKey.AddInsertHandler(Ubisense.UVis.Representation.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UVis.Representation.BaseTypeKey.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.BaseTypeKey.AddUpdateHandler(Ubisense.UVis.Representation.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UVis.Representation.BaseTypeKey.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.BaseTypeKey.AddDeleteHandler(Ubisense.UVis.Representation.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UVis.Representation.BaseTypeKey.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.BaseTypeKey.owner_(Ubisense.UVis.Representation.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index owner_. Each type can have at most one key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.BaseTypeKey.owner_(Ubisense.UVis.Representation.ReadTransaction,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table that match the first argument of the index owner_. Each type can have at most one key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.BaseTypeKey.key_(Ubisense.UVis.Representation.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index key_. Used to find the types that use a given key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.BaseTypeKey.key_(Ubisense.UVis.Representation.ReadTransaction,Ubisense.UVis.Key)">
      <summary>Iterate over the elements of the table that match the first argument of the index key_. Used to find the types that use a given key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UVis.Representation.BaseTypeKey.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UVis.Representation.BaseTypeKey.RowType.owner_">
      <summary>The type whose instances (and instances of derived types) are represented. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UVis.Representation.BaseTypeKey.RowType.key_">
      <summary>The representation key to use. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.BaseTypeKey.RowType.#ctor(Ubisense.UBase.Symbol,Ubisense.UVis.Key)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UVis.Representation.BaseTypeKey.___lop_key_owner_">
      <summary>The lex-ordered prefixable key for the index owner_</summary>
    </member>
    <member name="T:Ubisense.UVis.Representation.BaseTypeKey.___lop_cmp_owner_">
      <summary>The ordering for the index owner_</summary>
    </member>
    <member name="M:Ubisense.UVis.Representation.BaseTypeKey.___lop_cmp_owner_.Compare(Ubisense.UVis.Representation.BaseTypeKey.___lop_key_owner_,Ubisense.UVis.Representation.BaseTypeKey.___lop_key_owner_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UVis.Representation.BaseTypeKey.___lop_key_key_">
      <summary>The lex-ordered prefixable key for the index key_</summary>
    </member>
    <member name="T:Ubisense.UVis.Representation.BaseTypeKey.___lop_cmp_key_">
      <summary>The ordering for the index key_</summary>
    </member>
    <member name="M:Ubisense.UVis.Representation.BaseTypeKey.___lop_cmp_key_.Compare(Ubisense.UVis.Representation.BaseTypeKey.___lop_key_key_,Ubisense.UVis.Representation.BaseTypeKey.___lop_key_key_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UVis.Representation.NamedMaterial">
      <summary>This relation acts as a global repository of materials. Each material can be given a name and later retrieved with that name. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.NamedMaterial.AddInsertHandler(Ubisense.UVis.Representation.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UVis.Representation.NamedMaterial.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.NamedMaterial.AddUpdateHandler(Ubisense.UVis.Representation.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UVis.Representation.NamedMaterial.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.NamedMaterial.AddDeleteHandler(Ubisense.UVis.Representation.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UVis.Representation.NamedMaterial.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.NamedMaterial.name_(Ubisense.UVis.Representation.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index name_. The name is the primary key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.NamedMaterial.name_(Ubisense.UVis.Representation.ReadTransaction,System.String)">
      <summary>Iterate over the elements of the table that match the first argument of the index name_. The name is the primary key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UVis.Representation.NamedMaterial.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UVis.Representation.NamedMaterial.RowType.name_">
      <summary>The human-readable name of the material. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UVis.Representation.NamedMaterial.RowType.material_">
      <summary>The material properties. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UVis.Representation.NamedMaterial.RowType.#ctor(System.String,Ubisense.UVis.Material)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UVis.Representation.NamedMaterial.___lop_key_name_">
      <summary>The lex-ordered prefixable key for the index name_</summary>
    </member>
    <member name="T:Ubisense.UVis.Representation.NamedMaterial.___lop_cmp_name_">
      <summary>The ordering for the index name_</summary>
    </member>
    <member name="M:Ubisense.UVis.Representation.NamedMaterial.___lop_cmp_name_.Compare(Ubisense.UVis.Representation.NamedMaterial.___lop_key_name_,Ubisense.UVis.Representation.NamedMaterial.___lop_key_name_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UBuilding.Area">
      <summary>A named part of building, such as a floor, that can be loaded into a viewer independently of other areas. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Area.op_Equality(Ubisense.UBuilding.Area,Ubisense.UBuilding.Area)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Area.op_Inequality(Ubisense.UBuilding.Area,Ubisense.UBuilding.Area)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Area.op_LessThan(Ubisense.UBuilding.Area,Ubisense.UBuilding.Area)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Area.op_GreaterThan(Ubisense.UBuilding.Area,Ubisense.UBuilding.Area)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Area.op_Implicit(Ubisense.UBuilding.Area)~Ubisense.UBase.UObject">
      <summary>Implicit conversion operator to ancestor type global::Ubisense.UBase.UObject</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Area.#cctor">
      <summary>Initialise the Area type</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Area.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>Unsafe constructor to create an instance of type Area with a specific state.
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            </summary>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Area.#ctor(System.Boolean)">
      <summary>Create a new Area instance that is either unique or nil</summary>
      <param name="unique">Make this instance unique</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Area.Narrow(Ubisense.UBase.IObject)">
      <summary>Assign another object to this one if and only if the other object's dynamic type inherits from the static type of this instance</summary>
      <param name="other">The object to assign to this object</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Area.Unique">
      <summary>Make this object into a new unique instance with DynamicType equal to Area</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Area.Nil">
      <summary>True iff this object is the nil instance of type Area</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Area.ToString">
      <summary>Returns a String representation of the value of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Area.ToString(System.String,System.IFormatProvider)">
      <summary>Equivalent to ToString()</summary>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Area.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Area.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Area.CompareTo(Ubisense.UBuilding.Area)">
      <summary>Compare this instance with 'other'</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Area.Equals(Ubisense.UBuilding.Area)">
      <summary>True if this instance equals obj</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UBuilding.Area.StaticType">
      <summary>The statically-declared type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UBuilding.Area.DynamicType">
      <summary>The most-derived dynamic type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UBuilding.Area.Id">
      <summary>The id of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="T:Ubisense.UBuilding.Room">
      <summary>A named region of a building that is normally used to represent a real-world room. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Room.op_Equality(Ubisense.UBuilding.Room,Ubisense.UBuilding.Room)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Room.op_Inequality(Ubisense.UBuilding.Room,Ubisense.UBuilding.Room)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Room.op_LessThan(Ubisense.UBuilding.Room,Ubisense.UBuilding.Room)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Room.op_GreaterThan(Ubisense.UBuilding.Room,Ubisense.UBuilding.Room)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Room.op_Implicit(Ubisense.UBuilding.Room)~Ubisense.UBase.UObject">
      <summary>Implicit conversion operator to ancestor type global::Ubisense.UBase.UObject</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Room.#cctor">
      <summary>Initialise the Room type</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Room.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>Unsafe constructor to create an instance of type Room with a specific state.
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            </summary>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Room.#ctor(System.Boolean)">
      <summary>Create a new Room instance that is either unique or nil</summary>
      <param name="unique">Make this instance unique</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Room.Narrow(Ubisense.UBase.IObject)">
      <summary>Assign another object to this one if and only if the other object's dynamic type inherits from the static type of this instance</summary>
      <param name="other">The object to assign to this object</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Room.Unique">
      <summary>Make this object into a new unique instance with DynamicType equal to Room</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Room.Nil">
      <summary>True iff this object is the nil instance of type Room</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Room.ToString">
      <summary>Returns a String representation of the value of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Room.ToString(System.String,System.IFormatProvider)">
      <summary>Equivalent to ToString()</summary>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Room.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Room.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Room.CompareTo(Ubisense.UBuilding.Room)">
      <summary>Compare this instance with 'other'</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Room.Equals(Ubisense.UBuilding.Room)">
      <summary>True if this instance equals obj</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UBuilding.Room.StaticType">
      <summary>The statically-declared type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UBuilding.Room.DynamicType">
      <summary>The most-derived dynamic type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UBuilding.Room.Id">
      <summary>The id of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="T:Ubisense.UBuilding.Link">
      <summary>A link between two areas such as a staircase, elevator or ramp. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Link.op_Equality(Ubisense.UBuilding.Link,Ubisense.UBuilding.Link)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Link.op_Inequality(Ubisense.UBuilding.Link,Ubisense.UBuilding.Link)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Link.op_LessThan(Ubisense.UBuilding.Link,Ubisense.UBuilding.Link)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Link.op_GreaterThan(Ubisense.UBuilding.Link,Ubisense.UBuilding.Link)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Link.op_Implicit(Ubisense.UBuilding.Link)~Ubisense.UBase.UObject">
      <summary>Implicit conversion operator to ancestor type global::Ubisense.UBase.UObject</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Link.#cctor">
      <summary>Initialise the Link type</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Link.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>Unsafe constructor to create an instance of type Link with a specific state.
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            </summary>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Link.#ctor(System.Boolean)">
      <summary>Create a new Link instance that is either unique or nil</summary>
      <param name="unique">Make this instance unique</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Link.Narrow(Ubisense.UBase.IObject)">
      <summary>Assign another object to this one if and only if the other object's dynamic type inherits from the static type of this instance</summary>
      <param name="other">The object to assign to this object</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Link.Unique">
      <summary>Make this object into a new unique instance with DynamicType equal to Link</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Link.Nil">
      <summary>True iff this object is the nil instance of type Link</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Link.ToString">
      <summary>Returns a String representation of the value of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Link.ToString(System.String,System.IFormatProvider)">
      <summary>Equivalent to ToString()</summary>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Link.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Link.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Link.CompareTo(Ubisense.UBuilding.Link)">
      <summary>Compare this instance with 'other'</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Link.Equals(Ubisense.UBuilding.Link)">
      <summary>True if this instance equals obj</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UBuilding.Link.StaticType">
      <summary>The statically-declared type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UBuilding.Link.DynamicType">
      <summary>The most-derived dynamic type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UBuilding.Link.Id">
      <summary>The id of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="T:Ubisense.UBuilding.Wall">
      <summary>A wall is defined as a vertical rectangular planar surface. Horizontally it consists of the line between two points in the plane; vertically, it extends between two given heights. The two points can appear either way round, but the two vertical extents are ordered. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.Wall.p1_">
      <summary>The first point defining the wall's horizontal position. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.Wall.p2_">
      <summary>The second point defining the wall's horizontal position. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.Wall.zmin_">
      <summary>The height of the bottom of the wall above the origin. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.Wall.zmax_">
      <summary>The height of the top of the wall above the origin. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.Wall.attr_">
      <summary>A style attribute for the wall. This is used to identify a material stored in the AttributeProperties relation of the Contents schema. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Wall.op_Equality(Ubisense.UBuilding.Wall,Ubisense.UBuilding.Wall)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Wall.op_Inequality(Ubisense.UBuilding.Wall,Ubisense.UBuilding.Wall)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Wall.op_LessThan(Ubisense.UBuilding.Wall,Ubisense.UBuilding.Wall)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Wall.op_GreaterThan(Ubisense.UBuilding.Wall,Ubisense.UBuilding.Wall)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Wall.#ctor(Ubisense.UBase.Vector2D,Ubisense.UBase.Vector2D,System.Double,System.Double,System.UInt32)">
      <summary>Create a new Wall instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Wall.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Wall.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Wall.CompareTo(Ubisense.UBuilding.Wall)">
      <summary>Compare this instance with 'other'</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Wall.Equals(Ubisense.UBuilding.Wall)">
      <summary>True if this instance equals obj</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UBuilding.RoomPropertiesStruct">
      <summary>A collection of the properties that characterise a room. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.RoomPropertiesStruct.area_">
      <summary>The area the room is inside. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.RoomPropertiesStruct.room_">
      <summary>The room object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.RoomPropertiesStruct.name_">
      <summary>The name of the room. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.RoomPropertiesStruct.description_">
      <summary>An informal description of the room. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.RoomPropertiesStruct.polygons_">
      <summary>The set of convex polygons that make up the room. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBuilding.RoomPropertiesStruct.#ctor(Ubisense.UBuilding.Area,Ubisense.UBuilding.Room,Ubisense.UBase.Symbol,System.String,System.Collections.Generic.SortedSet{Ubisense.UBuilding.ConvexPolygon})">
      <summary>Create a new RoomPropertiesStruct instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UBuilding.LinkEdge">
      <summary>One edge on the ribbon of a link.  A sequence of link edges defines the appearance and position of a link and is stored in a LinkPropertiesStruct. Each edge is horizontal but appears at a certain height above the plane of the floor. The ordered sequence of link edges describes a route from the height of the first edge to the height of the final edge. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.LinkEdge.line_">
      <summary>The horizontal line. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.LinkEdge.height_">
      <summary>The height of the line. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBuilding.LinkEdge.#ctor(Ubisense.UBase.Line,System.Double)">
      <summary>Create a new LinkEdge instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UBuilding.LinkPropertiesStruct">
      <summary>The properties of a link between areas, such as a staircase, elevator or ramp. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.LinkPropertiesStruct.link_">
      <summary>The link object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.LinkPropertiesStruct.from_">
      <summary>The area at the start of the link. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.LinkPropertiesStruct.to_">
      <summary>The area at the end of the link. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.LinkPropertiesStruct.type_">
      <summary>The type of the link. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.LinkPropertiesStruct.edges_">
      <summary>The sequence of edges making up the link.  The link is represented physically by drawing a face between each pair of edges in sequence.  For a staircase, steps are drawn along each rising face. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBuilding.LinkPropertiesStruct.#ctor(Ubisense.UBuilding.Link,Ubisense.UBuilding.Area,Ubisense.UBuilding.Area,Ubisense.UBuilding.LinkType,System.Collections.Generic.List{Ubisense.UBuilding.LinkEdge})">
      <summary>Create a new LinkPropertiesStruct instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UBuilding.AttributePropertiesStruct">
      <summary>The properties of a material attribute. This adds an extra field to a material to indicate whether walls of this material are passable when route-finding, and it adds an extra identifier so that walls refer to the identifier rather than to the material directly. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.AttributePropertiesStruct.attr_">
      <summary>The identifier of the wall attribute, referred to by walls. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.AttributePropertiesStruct.material_">
      <summary>The human-readable name, which identifies a target material from the NamedMaterial relation in the UVis module. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.AttributePropertiesStruct.navigable_">
      <summary>Whether or not walls with this attribute are passable. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBuilding.AttributePropertiesStruct.#ctor(System.UInt32,System.String,System.Boolean)">
      <summary>Create a new AttributePropertiesStruct instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UBuilding.AreaData">
      <summary>Structure holding all the data about a displayed area </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.AreaData.area_">
      <summary>The area object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.AreaData.name_">
      <summary>The human-readable name of the area. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.AreaData.description_">
      <summary>A human-readable description of the area. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.AreaData.extent_">
      <summary>A right-polygonal prism describing the extent of the area. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.AreaData.walls_">
      <summary>The walls that the area contains. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.AreaData.attrs_">
      <summary>The material attributes for the walls. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.AreaData.polygons_">
      <summary>The set of convex polygons that between them make up the area's floor space. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.AreaData.graph_">
      <summary>A graph derived from the set of convex polygons. Every vertex in the graph is a Line that corresponds to a 'door' (which is just a gap between walls in the set of walls in the area). A pair of vertices (d,d') in the graph has an edge between them iff a person could move from the mid-point of d to the mid-point of d' without passing through an impassable wall. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.AreaData.rooms_">
      <summary>The rooms in the area. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.AreaData.links_">
      <summary>The links between this area and other areas. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBuilding.AreaData.#ctor(Ubisense.UBuilding.Area,Ubisense.UBase.Symbol,System.String,Ubisense.UCell.PolygonalPrism,System.Collections.Generic.List{Ubisense.UBuilding.Wall},System.Collections.Generic.List{Ubisense.UBuilding.AttributePropertiesStruct},System.Collections.Generic.SortedSet{Ubisense.UBuilding.ConvexPolygon},System.Collections.Generic.SortedSet{Ubisense.UBuilding.ComparablePair{Ubisense.UBase.Line,Ubisense.UBase.Line}},System.Collections.Generic.List{Ubisense.UBuilding.RoomPropertiesStruct},System.Collections.Generic.List{Ubisense.UBuilding.LinkPropertiesStruct})">
      <summary>Create a new AreaData instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UBuilding.LinkType">
      <summary>Supported kinds of links between areas </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Enumerations</usage>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UBuilding.Area">
      <summary>A named part of building, such as a floor, that can be loaded into a viewer independently of other areas. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Area.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.Area)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Area.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.Area@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Area.Unmarshall(System.IO.BinaryReader,Ubisense.UBuilding.Area@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Area.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UBuilding.Room">
      <summary>A named region of a building that is normally used to represent a real-world room. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Room.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.Room)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Room.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.Room@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Room.Unmarshall(System.IO.BinaryReader,Ubisense.UBuilding.Room@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Room.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UBuilding.Link">
      <summary>A link between two areas such as a staircase, elevator or ramp. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Link.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.Link)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Link.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.Link@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Link.Unmarshall(System.IO.BinaryReader,Ubisense.UBuilding.Link@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Link.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UBuilding.Wall">
      <summary>A wall is defined as a vertical rectangular planar surface. Horizontally it consists of the line between two points in the plane; vertically, it extends between two given heights. The two points can appear either way round, but the two vertical extents are ordered. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Wall.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.Wall)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Wall.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.Wall@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Wall.Unmarshall(System.IO.BinaryReader,Ubisense.UBuilding.Wall@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Wall.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UBuilding.RoomPropertiesStruct">
      <summary>A collection of the properties that characterise a room. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.RoomPropertiesStruct.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.RoomPropertiesStruct)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.RoomPropertiesStruct.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.RoomPropertiesStruct@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.RoomPropertiesStruct.Unmarshall(System.IO.BinaryReader,Ubisense.UBuilding.RoomPropertiesStruct@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.RoomPropertiesStruct.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UBuilding.LinkEdge">
      <summary>One edge on the ribbon of a link.  A sequence of link edges defines the appearance and position of a link and is stored in a LinkPropertiesStruct. Each edge is horizontal but appears at a certain height above the plane of the floor. The ordered sequence of link edges describes a route from the height of the first edge to the height of the final edge. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.LinkEdge.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.LinkEdge)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.LinkEdge.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.LinkEdge@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.LinkEdge.Unmarshall(System.IO.BinaryReader,Ubisense.UBuilding.LinkEdge@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.LinkEdge.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UBuilding.LinkPropertiesStruct">
      <summary>The properties of a link between areas, such as a staircase, elevator or ramp. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.LinkPropertiesStruct.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.LinkPropertiesStruct)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.LinkPropertiesStruct.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.LinkPropertiesStruct@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.LinkPropertiesStruct.Unmarshall(System.IO.BinaryReader,Ubisense.UBuilding.LinkPropertiesStruct@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.LinkPropertiesStruct.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UBuilding.AttributePropertiesStruct">
      <summary>The properties of a material attribute. This adds an extra field to a material to indicate whether walls of this material are passable when route-finding, and it adds an extra identifier so that walls refer to the identifier rather than to the material directly. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.AttributePropertiesStruct.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.AttributePropertiesStruct)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.AttributePropertiesStruct.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.AttributePropertiesStruct@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.AttributePropertiesStruct.Unmarshall(System.IO.BinaryReader,Ubisense.UBuilding.AttributePropertiesStruct@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.AttributePropertiesStruct.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UBuilding.AreaData">
      <summary>Structure holding all the data about a displayed area </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.AreaData.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.AreaData)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.AreaData.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.AreaData@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.AreaData.Unmarshall(System.IO.BinaryReader,Ubisense.UBuilding.AreaData@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.AreaData.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UBuilding.LinkType">
      <summary>Supported kinds of links between areas </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.LinkType.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.LinkType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.LinkType.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.LinkType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.LinkType.Unmarshall(System.IO.BinaryReader,Ubisense.UBuilding.LinkType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.LinkType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocation.Driven.IsDrivenBy.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.Driven.IsDrivenBy.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocation.Driven.IsDrivenBy.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.Driven.IsDrivenBy.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocation.Driven.IsDrivenBy.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.Driven.IsDrivenBy.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.ULocation.Driven.IsDrivenBy.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.Driven.IsDrivenBy.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.ULocation.Driven.Schema">
      <summary>The Ubisense.ULocation.Driven schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.ULocation.Driven.Schema._rxpo">
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocation.Driven.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.ULocation.Driven.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.ULocation.Driven.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.ULocation.Driven.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocation.Driven.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocation.Driven.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.ULocation.Driven.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocation.Driven.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocation.Driven.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocation.Driven.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocation.Driven.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocation.Driven.Schema.set_driven_object(Ubisense.ULocation.Driven.IsDrivenBy.RowType)">
      <summary>Set the driver and transform for a driven object.  Replaces any existing driver and transform for that driven object. Returns true iff the change succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="r">The row to insert in the IsDrivenBy relation. </param>
    </member>
    <member name="M:Ubisense.ULocation.Driven.Schema.remove_driven_object(Ubisense.UBase.UObject)">
      <summary>Remove a driven object. The given object will no longer be updated when its former driver moves. Returns true iff the removal occurs or the object was already not driven. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="driven">The object to release from its driver. </param>
    </member>
    <member name="M:Ubisense.ULocation.Driven.Schema.remove_driver_object(Ubisense.UBase.UObject)">
      <summary>Remove a driver object. All of its driven objects will be released as one transaction. Returns true iff the removal occurs as a whole or the object already had no driven objects. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="driver">The given object will no longer lead other objects when it moves. </param>
    </member>
    <member name="M:Ubisense.ULocation.Driven.Schema.remove_object(Ubisense.UBase.UObject)">
      <summary>Remove an object, as both driver and driven, in a single transaction. The given object will neither follow nor lead any other objects. Returns true if the removal occurs as a whole, or the object did not appear in the relation as driver or driven. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj">The object to remove from the relation. </param>
    </member>
    <member name="P:Ubisense.ULocation.Driven.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.ULocation.Driven.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.ULocation.Driven.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.ULocation.Driven.IsDrivenBy">
      <summary>A driven object is located based on the position of a driver object. The position of driven is updated when the position of driver is changed.  This occurs in the same transaction. This relation records which objects drive which other objects, and their geometric relationship. One object can drive as many other objects as desired, but each object can be driven by at most one driver. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.ULocation.Driven.IsDrivenBy.AddInsertHandler(Ubisense.ULocation.Driven.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.ULocation.Driven.IsDrivenBy.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocation.Driven.IsDrivenBy.AddUpdateHandler(Ubisense.ULocation.Driven.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.ULocation.Driven.IsDrivenBy.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocation.Driven.IsDrivenBy.AddDeleteHandler(Ubisense.ULocation.Driven.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.ULocation.Driven.IsDrivenBy.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocation.Driven.IsDrivenBy.driven_(Ubisense.ULocation.Driven.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index driven_. The driven object is the primary key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocation.Driven.IsDrivenBy.driven_(Ubisense.ULocation.Driven.ReadTransaction,Ubisense.UBase.UObject)">
      <summary>Iterate over the elements of the table that match the first argument of the index driven_. The driven object is the primary key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocation.Driven.IsDrivenBy.driver_(Ubisense.ULocation.Driven.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index driver_. Used when updating object positions, to find which objects should be updated when their driver moves. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocation.Driven.IsDrivenBy.driver_(Ubisense.ULocation.Driven.ReadTransaction,Ubisense.UBase.UObject)">
      <summary>Iterate over the elements of the table that match the first argument of the index driver_. Used when updating object positions, to find which objects should be updated when their driver moves. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.ULocation.Driven.IsDrivenBy.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.Driven.IsDrivenBy.RowType.driven_">
      <summary>The driven object, which will follow the driver. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.Driven.IsDrivenBy.RowType.driver_">
      <summary>The driver object, which will lead its driven objects. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.Driven.IsDrivenBy.RowType.transform_">
      <summary>The transform to generate the driven location and orientation from the driver. Offset is in the local coordinates of the driven object.  The driven object will rotate to point in the direction the tag is moving, but damped by the ratio of the size of the tag movement to the size of the offset vector.  Thus large driven objects will rotate slower than small ones.  The rotation part is only used to indicate whether the driven object only moves forwards (if rotate_ is the identity) or if it can reverse too (if rotate_ is not the identity). </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocation.Driven.IsDrivenBy.RowType.#ctor(Ubisense.UBase.UObject,Ubisense.UBase.UObject,Ubisense.ULocation.Transform)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocation.Driven.IsDrivenBy.___lop_key_driven_">
      <summary>The lex-ordered prefixable key for the index driven_</summary>
    </member>
    <member name="T:Ubisense.ULocation.Driven.IsDrivenBy.___lop_cmp_driven_">
      <summary>The ordering for the index driven_</summary>
    </member>
    <member name="M:Ubisense.ULocation.Driven.IsDrivenBy.___lop_cmp_driven_.Compare(Ubisense.ULocation.Driven.IsDrivenBy.___lop_key_driven_,Ubisense.ULocation.Driven.IsDrivenBy.___lop_key_driven_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.ULocation.Driven.IsDrivenBy.___lop_key_driver_">
      <summary>The lex-ordered prefixable key for the index driver_</summary>
    </member>
    <member name="T:Ubisense.ULocation.Driven.IsDrivenBy.___lop_cmp_driver_">
      <summary>The ordering for the index driver_</summary>
    </member>
    <member name="M:Ubisense.ULocation.Driven.IsDrivenBy.___lop_cmp_driver_.Compare(Ubisense.ULocation.Driven.IsDrivenBy.___lop_key_driver_,Ubisense.ULocation.Driven.IsDrivenBy.___lop_key_driver_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocation.CellData.Location.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.CellData.Location.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocation.CellData.Location.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.CellData.Location.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocation.CellData.Location.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.CellData.Location.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.ULocation.CellData.Location.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.CellData.Location.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocation.CellData.Handover.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.CellData.Handover.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocation.CellData.Handover.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.CellData.Handover.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocation.CellData.Handover.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.CellData.Handover.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.ULocation.CellData.Handover.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocation.CellData.Handover.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.ULocation.CellData.Schema">
      <summary>The Ubisense.ULocation.CellData schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.ULocation.CellData.Schema._rxpo">
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Schema.AddConverter(Ubisense.UBase.SchemaConverter)">
      <summary>Add SchemaConverters to a schema to allow that schema to read and convert data files from older schemas.</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Schema.WriteTransaction">
      <summary>Create a new write transaction or return null if the schema is dataless</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Schema.ConnectAsServer(Ubisense.ULocation.CellData.Server,System.Boolean,System.UInt32,System.UInt32)">
      <summary>Serve this schema as a global service</summary>
      <param name="service_impl">Interface implementation for server-side RPC implementations</param>
      <param name="persistent">Make this a persistent service</param>
      <param name="schema_major_version">The major version number of the schema (this is ignored if not persistent)</param>
      <param name="schema_minor_version">The minor version number of the schema (this is ignored if not persistent)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ServerConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Schema.ConnectAsServer(Ubisense.ULocation.CellData.Server,System.Boolean,System.UInt32,System.UInt32,Ubisense.UCell.Cell)">
      <summary>Serve this schema as a cellular service</summary>
      <param name="service_impl">Interface implementation for server-side RPC implementations</param>
      <param name="persistent">Make this a persistent service</param>
      <param name="schema_major_version">The major version number of the schema (this is ignored if not persistent)</param>
      <param name="schema_minor_version">The minor version number of the schema (this is ignored if not persistent)</param>
      <param name="cell">The cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ServerConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Schema.Dispatch(System.Int32)">
      <summary>Listen for a request and process it (if single threaded) or send to a request handler (if multithreaded)</summary>
      <param name="timeout">Period to listen for</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Schema.apply_event(Ubisense.ULocation.LocationEvent)">
      <summary>Apply a location event and ensure the results are persistent. Returns true iff the location was updated successfully. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="evt">The LocationEvent to apply. </param>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Schema.apply_events(System.Collections.Generic.List{Ubisense.ULocation.LocationEvent})">
      <summary>Apply a sequence of location events as a single transaction and ensure the results are persistent. Returns true iff all locations were updated successfully. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="events">The sequence of events to apply. </param>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Schema.object_is_going(Ubisense.UBase.UObject,System.TimeSpan)">
      <summary>Record that an object is going, and if not seen again within the time interval, should be removed. Returns true iff the update succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj">The object to be removed. </param>
      <param name="expiry">The time to wait for further sightings before removing the object. </param>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Schema.get_object(Ubisense.UBase.UObject,Ubisense.ULocation.CellData.Location.RowType@)">
      <summary>Get the position of an object in the cell. Returns true iff the object is in the cell and its position was successfully retrieved. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj">The object to find. </param>
      <param name="loc">If the operation returned true, this is used to return the appropriate row from the Location relation. </param>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Schema.locate_objects(System.Collections.Generic.List{Ubisense.ULocation.LocationEvent})">
      <summary>Send a sequence of location events to the cell to be processed as a single transaction, without guaranteeing that the results are persistent.  This is a oneway invocation, so it is fast but can be silently dropped by the location cell when the system is heavily loaded. This operation should be used in place of apply_events when high throughput is an issue. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="events"></param>
    </member>
    <member name="P:Ubisense.ULocation.CellData.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.ULocation.CellData.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.ULocation.CellData.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.ULocation.CellData.Server">
      <summary>An interface encapsulating the operations to be implemented on the server side</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Server.apply_event(Ubisense.ULocation.CellData.Schema,Ubisense.ULocation.LocationEvent)">
      <summary>Apply a location event and ensure the results are persistent. Returns true iff the location was updated successfully. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="evt">The LocationEvent to apply. </param>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Server.apply_events(Ubisense.ULocation.CellData.Schema,System.Collections.Generic.List{Ubisense.ULocation.LocationEvent})">
      <summary>Apply a sequence of location events as a single transaction and ensure the results are persistent. Returns true iff all locations were updated successfully. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="events">The sequence of events to apply. </param>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Server.object_is_going(Ubisense.ULocation.CellData.Schema,Ubisense.UBase.UObject,System.TimeSpan)">
      <summary>Record that an object is going, and if not seen again within the time interval, should be removed. Returns true iff the update succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj">The object to be removed. </param>
      <param name="expiry">The time to wait for further sightings before removing the object. </param>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Server.get_object(Ubisense.ULocation.CellData.Schema,Ubisense.UBase.UObject,Ubisense.ULocation.CellData.Location.RowType@)">
      <summary>Get the position of an object in the cell. Returns true iff the object is in the cell and its position was successfully retrieved. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj">The object to find. </param>
      <param name="loc">If the operation returned true, this is used to return the appropriate row from the Location relation. </param>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Server.locate_objects(Ubisense.ULocation.CellData.Schema,System.Collections.Generic.List{Ubisense.ULocation.LocationEvent})">
      <summary>Send a sequence of location events to the cell to be processed as a single transaction, without guaranteeing that the results are persistent.  This is a oneway invocation, so it is fast but can be silently dropped by the location cell when the system is heavily loaded. This operation should be used in place of apply_events when high throughput is an issue. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="events"></param>
    </member>
    <member name="T:Ubisense.ULocation.CellData.WriteTransaction">
      <summary>A write transaction for the schema, required to write relation data and also able to access relational data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.ULocation.CellData.Location">
      <summary>Records the most up-to-date information on each object's whereabouts. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Location.AddInsertHandler(Ubisense.ULocation.CellData.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.ULocation.CellData.Location.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Location.AddUpdateHandler(Ubisense.ULocation.CellData.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.ULocation.CellData.Location.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Location.AddDeleteHandler(Ubisense.ULocation.CellData.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.ULocation.CellData.Location.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Location.Insert(Ubisense.ULocation.CellData.WriteTransaction,Ubisense.ULocation.CellData.Location.RowType)">
      <summary>Insert a given row into the table</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Location.Update(Ubisense.ULocation.CellData.WriteTransaction,Ubisense.UBase.ICursor{Ubisense.ULocation.CellData.Location.RowType},Ubisense.ULocation.CellData.Location.RowType)">
      <summary>Update a given row in the table</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>DataManipulation</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Location.Delete(Ubisense.ULocation.CellData.WriteTransaction,Ubisense.UBase.ICursor{Ubisense.ULocation.CellData.Location.RowType})">
      <summary>Delete a given row in the table</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>DataManipulation</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Location.InsertPending(Ubisense.ULocation.CellData.WriteTransaction,Ubisense.ULocation.CellData.Location.RowType)">
      <summary>Insert a given row into the table</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>DataManipulation</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Location.UpdatePending(Ubisense.ULocation.CellData.WriteTransaction,Ubisense.UBase.ICursor{Ubisense.ULocation.CellData.Location.RowType},Ubisense.ULocation.CellData.Location.RowType)">
      <summary>Update a given row in the table</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>DataManipulation</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Location.DeletePending(Ubisense.ULocation.CellData.WriteTransaction,Ubisense.UBase.ICursor{Ubisense.ULocation.CellData.Location.RowType})">
      <summary>Delete a given row in the table</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>DataManipulation</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Location.ApplyPending(Ubisense.ULocation.CellData.WriteTransaction)">
      <summary>Delete a given row in the table</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>DataManipulation</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Location.object_(Ubisense.ULocation.CellData.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index object_. The object is a key; each object has only its most recent sighting in the table at any time. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Location.object_(Ubisense.ULocation.CellData.ReadTransaction,Ubisense.UBase.UObject)">
      <summary>Iterate over the elements of the table that match the first argument of the index object_. The object is a key; each object has only its most recent sighting in the table at any time. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Location.time_(Ubisense.ULocation.CellData.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index time_. Used to look up location events by timestamp. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Location.time_(Ubisense.ULocation.CellData.ReadTransaction,System.DateTime)">
      <summary>Iterate over the elements of the table that match the first argument of the index time_. Used to look up location events by timestamp. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.ULocation.CellData.Location.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.CellData.Location.RowType.object_">
      <summary>The object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.CellData.Location.RowType.position_">
      <summary>The estimated position of the object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.CellData.Location.RowType.time_">
      <summary>The timestamp of the object sighting; the time the object was at the position given. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.CellData.Location.RowType.accuracy_">
      <summary>The accuracy of position_, if known. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Location.RowType.#ctor(Ubisense.UBase.UObject,Ubisense.UBase.Position,System.DateTime,Ubisense.ULocation.Accuracy)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocation.CellData.Location.___lop_key_object_">
      <summary>The lex-ordered prefixable key for the index object_</summary>
    </member>
    <member name="T:Ubisense.ULocation.CellData.Location.___lop_cmp_object_">
      <summary>The ordering for the index object_</summary>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Location.___lop_cmp_object_.Compare(Ubisense.ULocation.CellData.Location.___lop_key_object_,Ubisense.ULocation.CellData.Location.___lop_key_object_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.ULocation.CellData.Location.___lop_key_time_">
      <summary>The lex-ordered prefixable key for the index time_</summary>
    </member>
    <member name="T:Ubisense.ULocation.CellData.Location.___lop_cmp_time_">
      <summary>The ordering for the index time_</summary>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Location.___lop_cmp_time_.Compare(Ubisense.ULocation.CellData.Location.___lop_key_time_,Ubisense.ULocation.CellData.Location.___lop_key_time_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.ULocation.CellData.Handover">
      <summary>An object is entered here as it is removed from the location tables due to handover to another cell. It may be removed some time later. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Handover.AddInsertHandler(Ubisense.ULocation.CellData.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.ULocation.CellData.Handover.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Handover.AddUpdateHandler(Ubisense.ULocation.CellData.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.ULocation.CellData.Handover.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Handover.AddDeleteHandler(Ubisense.ULocation.CellData.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.ULocation.CellData.Handover.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Handover.Insert(Ubisense.ULocation.CellData.WriteTransaction,Ubisense.ULocation.CellData.Handover.RowType)">
      <summary>Insert a given row into the table</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Handover.Update(Ubisense.ULocation.CellData.WriteTransaction,Ubisense.UBase.ICursor{Ubisense.ULocation.CellData.Handover.RowType},Ubisense.ULocation.CellData.Handover.RowType)">
      <summary>Update a given row in the table</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>DataManipulation</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Handover.Delete(Ubisense.ULocation.CellData.WriteTransaction,Ubisense.UBase.ICursor{Ubisense.ULocation.CellData.Handover.RowType})">
      <summary>Delete a given row in the table</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>DataManipulation</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Handover.InsertPending(Ubisense.ULocation.CellData.WriteTransaction,Ubisense.ULocation.CellData.Handover.RowType)">
      <summary>Insert a given row into the table</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>DataManipulation</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Handover.UpdatePending(Ubisense.ULocation.CellData.WriteTransaction,Ubisense.UBase.ICursor{Ubisense.ULocation.CellData.Handover.RowType},Ubisense.ULocation.CellData.Handover.RowType)">
      <summary>Update a given row in the table</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>DataManipulation</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Handover.DeletePending(Ubisense.ULocation.CellData.WriteTransaction,Ubisense.UBase.ICursor{Ubisense.ULocation.CellData.Handover.RowType})">
      <summary>Delete a given row in the table</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>DataManipulation</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Handover.ApplyPending(Ubisense.ULocation.CellData.WriteTransaction)">
      <summary>Delete a given row in the table</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>DataManipulation</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Handover.object_(Ubisense.ULocation.CellData.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index object_. The object is a key; each object can only be handed over to one other cell at a time. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Handover.object_(Ubisense.ULocation.CellData.ReadTransaction,Ubisense.UBase.UObject)">
      <summary>Iterate over the elements of the table that match the first argument of the index object_. The object is a key; each object can only be handed over to one other cell at a time. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.ULocation.CellData.Handover.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.CellData.Handover.RowType.object_">
      <summary>The object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.CellData.Handover.RowType.destination_">
      <summary>Its destination cell, or nil if unknown. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocation.CellData.Handover.RowType.time_">
      <summary>When the object was handed over. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Handover.RowType.#ctor(Ubisense.UBase.UObject,Ubisense.ULocation.Cell,System.DateTime)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocation.CellData.Handover.___lop_key_object_">
      <summary>The lex-ordered prefixable key for the index object_</summary>
    </member>
    <member name="T:Ubisense.ULocation.CellData.Handover.___lop_cmp_object_">
      <summary>The ordering for the index object_</summary>
    </member>
    <member name="M:Ubisense.ULocation.CellData.Handover.___lop_cmp_object_.Compare(Ubisense.ULocation.CellData.Handover.___lop_key_object_,Ubisense.ULocation.CellData.Handover.___lop_key_object_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UBuilding.Contents.AreaProperties.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Contents.AreaProperties.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.Contents.AreaProperties.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Contents.AreaProperties.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.Contents.AreaProperties.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Contents.AreaProperties.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UBuilding.Contents.AreaProperties.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Contents.AreaProperties.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UBuilding.Contents.AreaWalls.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Contents.AreaWalls.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.Contents.AreaWalls.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Contents.AreaWalls.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.Contents.AreaWalls.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Contents.AreaWalls.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UBuilding.Contents.AreaWalls.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Contents.AreaWalls.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UBuilding.Contents.Navigation.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Contents.Navigation.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.Contents.Navigation.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Contents.Navigation.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.Contents.Navigation.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Contents.Navigation.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UBuilding.Contents.Navigation.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Contents.Navigation.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UBuilding.Contents.AttributeProperties.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Contents.AttributeProperties.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.Contents.AttributeProperties.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Contents.AttributeProperties.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.Contents.AttributeProperties.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Contents.AttributeProperties.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UBuilding.Contents.AttributeProperties.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.Contents.AttributeProperties.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.Schema">
      <summary>The Ubisense.UBuilding.Contents schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.UBuilding.Contents.Schema._rxpo">
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Schema.get_area(Ubisense.UBase.Symbol)">
      <summary>Look up an area by name.  Returns the area or nil in case of failure. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="name">The name of the area </param>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Schema.get_all_areas(System.Collections.Generic.List{Ubisense.UBuilding.Contents.AreaProperties.RowType}@)">
      <summary>Retrieve all information about all areas. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="areas">A sequence containing the entire contents of the area store </param>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Schema.get_area_data(Ubisense.UBuilding.Area,Ubisense.UBuilding.AreaData@)">
      <summary>Get all data in the model relevant to a given area. Returns false iff the area was not found. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="area">The area to retrieve. </param>
      <param name="data">The area data. </param>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Schema.get_area_walls(Ubisense.UBuilding.Area,System.Collections.Generic.List{Ubisense.UBuilding.Wall}@)">
      <summary>Get the walls for the given area. Returns false iff the area was not found. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="area">The area to retrieve the walls of. </param>
      <param name="walls">The list of walls in the area. </param>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Schema.get_area_navigation(Ubisense.UBuilding.Area,System.Collections.Generic.SortedSet{Ubisense.UBuilding.ConvexPolygon}@,System.Collections.Generic.SortedSet{Ubisense.UBuilding.ComparablePair{Ubisense.UBase.Line,Ubisense.UBase.Line}}@)">
      <summary>Get the navigation data for the given area. Returns false iff the area was not found. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="area">The area to retrieve data for. </param>
      <param name="polygons">The set of convex polygons covering the area's floor space. </param>
      <param name="graph">The door graph connecting doors in the area with lines that go through the convex polygons. </param>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Schema.get_area_rooms(Ubisense.UBuilding.Area,System.Collections.Generic.List{Ubisense.UBuilding.RoomPropertiesStruct}@)">
      <summary>List the rooms for the given area. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="area">The area to retrieve the rooms of. </param>
      <param name="rooms">The rooms in the area. </param>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Schema.get_room(Ubisense.UBuilding.Room,Ubisense.UBase.Symbol@,System.String@,System.Collections.Generic.SortedSet{Ubisense.UBuilding.ConvexPolygon}@)">
      <summary>Get the properties of the given room. Returns false iff the room was not found. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="room">The room to retrieve. </param>
      <param name="name">Used to return the name of the room. </param>
      <param name="description">Used to return the room's description. </param>
      <param name="polygons">Used to return the set of all convex polygons making up the room. </param>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Schema.get_room_by_name(Ubisense.UBuilding.Area,Ubisense.UBase.Symbol,Ubisense.UBuilding.Room@,System.String@,System.Collections.Generic.SortedSet{Ubisense.UBuilding.ConvexPolygon}@)">
      <summary>Retrieve the properties of the given room, specified by area and human-readable name. Returns false iff the room was not found. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="area">The area the room is in. </param>
      <param name="name">The human-readable name of the room to retrieve. </param>
      <param name="room">Used to return the room object. </param>
      <param name="description">Used to return the description of the room. </param>
      <param name="polygons">Used to return the set of all convex polygons making up the room. </param>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Schema.get_area_links(Ubisense.UBuilding.Area,System.Collections.Generic.List{Ubisense.UBuilding.LinkPropertiesStruct}@)">
      <summary>List all the links to and from the given room. Always returns true. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="area">The area to get links for. </param>
      <param name="links">The links to or from the area. </param>
    </member>
    <member name="P:Ubisense.UBuilding.Contents.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.UBuilding.Contents.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.AreaProperties">
      <summary>A relation containing the basic properties of an area. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AreaProperties.AddInsertHandler(Ubisense.UBuilding.Contents.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UBuilding.Contents.AreaProperties.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AreaProperties.AddUpdateHandler(Ubisense.UBuilding.Contents.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UBuilding.Contents.AreaProperties.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AreaProperties.AddDeleteHandler(Ubisense.UBuilding.Contents.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UBuilding.Contents.AreaProperties.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AreaProperties.area_(Ubisense.UBuilding.Contents.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index area_. The area object uniquely defines its properties. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AreaProperties.area_(Ubisense.UBuilding.Contents.ReadTransaction,Ubisense.UBuilding.Area)">
      <summary>Iterate over the elements of the table that match the first argument of the index area_. The area object uniquely defines its properties. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AreaProperties.name_(Ubisense.UBuilding.Contents.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index name_. A name uniquely identifies an area. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AreaProperties.name_(Ubisense.UBuilding.Contents.ReadTransaction,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table that match the first argument of the index name_. A name uniquely identifies an area. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.AreaProperties.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.Contents.AreaProperties.RowType.area_">
      <summary>The area in question. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.Contents.AreaProperties.RowType.name_">
      <summary>The human-readable name of the area. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.Contents.AreaProperties.RowType.description_">
      <summary>A human-readable description of the area. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.Contents.AreaProperties.RowType.extent_">
      <summary>A right-polygonal prism describing the extent of the area. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AreaProperties.RowType.#ctor(Ubisense.UBuilding.Area,Ubisense.UBase.Symbol,System.String,Ubisense.UCell.PolygonalPrism)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.AreaProperties.___lop_key_area_">
      <summary>The lex-ordered prefixable key for the index area_</summary>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.AreaProperties.___lop_cmp_area_">
      <summary>The ordering for the index area_</summary>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AreaProperties.___lop_cmp_area_.Compare(Ubisense.UBuilding.Contents.AreaProperties.___lop_key_area_,Ubisense.UBuilding.Contents.AreaProperties.___lop_key_area_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.AreaProperties.___lop_key_name_">
      <summary>The lex-ordered prefixable key for the index name_</summary>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.AreaProperties.___lop_cmp_name_">
      <summary>The ordering for the index name_</summary>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AreaProperties.___lop_cmp_name_.Compare(Ubisense.UBuilding.Contents.AreaProperties.___lop_key_name_,Ubisense.UBuilding.Contents.AreaProperties.___lop_key_name_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.AreaWalls">
      <summary>A relation containing the walls for an area. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AreaWalls.AddInsertHandler(Ubisense.UBuilding.Contents.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UBuilding.Contents.AreaWalls.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AreaWalls.AddUpdateHandler(Ubisense.UBuilding.Contents.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UBuilding.Contents.AreaWalls.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AreaWalls.AddDeleteHandler(Ubisense.UBuilding.Contents.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UBuilding.Contents.AreaWalls.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AreaWalls.area_(Ubisense.UBuilding.Contents.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index area_. The area object uniquely defines a single set of walls that are in the area.  All areas that have walls also have an entry in the AreaProperties relation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AreaWalls.area_(Ubisense.UBuilding.Contents.ReadTransaction,Ubisense.UBuilding.Area)">
      <summary>Iterate over the elements of the table that match the first argument of the index area_. The area object uniquely defines a single set of walls that are in the area.  All areas that have walls also have an entry in the AreaProperties relation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.AreaWalls.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.Contents.AreaWalls.RowType.area_">
      <summary>The area object </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.Contents.AreaWalls.RowType.walls_">
      <summary>The walls that the area contains </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AreaWalls.RowType.#ctor(Ubisense.UBuilding.Area,System.Collections.Generic.List{Ubisense.UBuilding.Wall})">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.AreaWalls.___lop_key_area_">
      <summary>The lex-ordered prefixable key for the index area_</summary>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.AreaWalls.___lop_cmp_area_">
      <summary>The ordering for the index area_</summary>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AreaWalls.___lop_cmp_area_.Compare(Ubisense.UBuilding.Contents.AreaWalls.___lop_key_area_,Ubisense.UBuilding.Contents.AreaWalls.___lop_key_area_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.Navigation">
      <summary>A relation containing the navigation data for route-planning through an area. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Navigation.AddInsertHandler(Ubisense.UBuilding.Contents.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UBuilding.Contents.Navigation.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Navigation.AddUpdateHandler(Ubisense.UBuilding.Contents.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UBuilding.Contents.Navigation.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Navigation.AddDeleteHandler(Ubisense.UBuilding.Contents.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UBuilding.Contents.Navigation.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Navigation.area_(Ubisense.UBuilding.Contents.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index area_. The area object uniquely defines its navigation data.  All areas that have navigation data also have an entry in the AreaProperties relation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Navigation.area_(Ubisense.UBuilding.Contents.ReadTransaction,Ubisense.UBuilding.Area)">
      <summary>Iterate over the elements of the table that match the first argument of the index area_. The area object uniquely defines its navigation data.  All areas that have navigation data also have an entry in the AreaProperties relation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.Navigation.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.Contents.Navigation.RowType.area_">
      <summary>The area object </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.Contents.Navigation.RowType.polygons_">
      <summary>The set of convex polygons in the area. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.Contents.Navigation.RowType.graph_">
      <summary>The graph of pairs of doors that can be traversed. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Navigation.RowType.#ctor(Ubisense.UBuilding.Area,System.Collections.Generic.SortedSet{Ubisense.UBuilding.ConvexPolygon},System.Collections.Generic.SortedSet{Ubisense.UBuilding.ComparablePair{Ubisense.UBase.Line,Ubisense.UBase.Line}})">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.Navigation.___lop_key_area_">
      <summary>The lex-ordered prefixable key for the index area_</summary>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.Navigation.___lop_cmp_area_">
      <summary>The ordering for the index area_</summary>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.Navigation.___lop_cmp_area_.Compare(Ubisense.UBuilding.Contents.Navigation.___lop_key_area_,Ubisense.UBuilding.Contents.Navigation.___lop_key_area_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.RoomProperties">
      <summary>A relation containing the properties of each room. Its row type is RoomPropertiesStruct. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.RoomProperties.AddInsertHandler(Ubisense.UBuilding.Contents.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UBuilding.RoomPropertiesStruct})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.RoomProperties.AddUpdateHandler(Ubisense.UBuilding.Contents.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UBuilding.RoomPropertiesStruct})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.RoomProperties.AddDeleteHandler(Ubisense.UBuilding.Contents.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UBuilding.RoomPropertiesStruct})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.RoomProperties.room_(Ubisense.UBuilding.Contents.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index room_. The room object uniquely defines its properties. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.RoomProperties.room_(Ubisense.UBuilding.Contents.ReadTransaction,Ubisense.UBuilding.Room)">
      <summary>Iterate over the elements of the table that match the first argument of the index room_. The room object uniquely defines its properties. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.RoomProperties.area_name_(Ubisense.UBuilding.Contents.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index area_name_. All room names must be unique within a given area. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.RoomProperties.area_name_(Ubisense.UBuilding.Contents.ReadTransaction,Ubisense.UBuilding.Area)">
      <summary>Iterate over the elements of the table that match the first argument of the index area_name_. All room names must be unique within a given area. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.RoomProperties.area_name_(Ubisense.UBuilding.Contents.ReadTransaction,Ubisense.UBuilding.Area,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index area_name_. All room names must be unique within a given area. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.RoomProperties.___lop_key_room_">
      <summary>The lex-ordered prefixable key for the index room_</summary>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.RoomProperties.___lop_cmp_room_">
      <summary>The ordering for the index room_</summary>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.RoomProperties.___lop_cmp_room_.Compare(Ubisense.UBuilding.Contents.RoomProperties.___lop_key_room_,Ubisense.UBuilding.Contents.RoomProperties.___lop_key_room_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.RoomProperties.___lop_key_area_name_">
      <summary>The lex-ordered prefixable key for the index area_name_</summary>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.RoomProperties.___lop_cmp_area_name_">
      <summary>The ordering for the index area_name_</summary>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.RoomProperties.___lop_cmp_area_name_.Compare(Ubisense.UBuilding.Contents.RoomProperties.___lop_key_area_name_,Ubisense.UBuilding.Contents.RoomProperties.___lop_key_area_name_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.LinkProperties">
      <summary>A relation containing the Links between areas. Its row type is LinkPropertiesStruct. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.LinkProperties.AddInsertHandler(Ubisense.UBuilding.Contents.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UBuilding.LinkPropertiesStruct})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.LinkProperties.AddUpdateHandler(Ubisense.UBuilding.Contents.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UBuilding.LinkPropertiesStruct})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.LinkProperties.AddDeleteHandler(Ubisense.UBuilding.Contents.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UBuilding.LinkPropertiesStruct})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.LinkProperties.link_(Ubisense.UBuilding.Contents.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index link_. The link object uniquely defines its properties. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.LinkProperties.link_(Ubisense.UBuilding.Contents.ReadTransaction,Ubisense.UBuilding.Link)">
      <summary>Iterate over the elements of the table that match the first argument of the index link_. The link object uniquely defines its properties. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.LinkProperties.from_to_(Ubisense.UBuilding.Contents.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index from_to_. The from_to_ index supports functions that retrieve the link properties of links between two areas. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.LinkProperties.from_to_(Ubisense.UBuilding.Contents.ReadTransaction,Ubisense.UBuilding.Area)">
      <summary>Iterate over the elements of the table that match the first argument of the index from_to_. The from_to_ index supports functions that retrieve the link properties of links between two areas. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.LinkProperties.from_to_(Ubisense.UBuilding.Contents.ReadTransaction,Ubisense.UBuilding.Area,Ubisense.UBuilding.Area)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index from_to_. The from_to_ index supports functions that retrieve the link properties of links between two areas. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.LinkProperties.to_(Ubisense.UBuilding.Contents.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index to_. The to_ index supports functions that retrieve the link properties of links to a given area. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.LinkProperties.to_(Ubisense.UBuilding.Contents.ReadTransaction,Ubisense.UBuilding.Area)">
      <summary>Iterate over the elements of the table that match the first argument of the index to_. The to_ index supports functions that retrieve the link properties of links to a given area. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.LinkProperties.___lop_key_link_">
      <summary>The lex-ordered prefixable key for the index link_</summary>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.LinkProperties.___lop_cmp_link_">
      <summary>The ordering for the index link_</summary>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.LinkProperties.___lop_cmp_link_.Compare(Ubisense.UBuilding.Contents.LinkProperties.___lop_key_link_,Ubisense.UBuilding.Contents.LinkProperties.___lop_key_link_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.LinkProperties.___lop_key_from_to_">
      <summary>The lex-ordered prefixable key for the index from_to_</summary>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.LinkProperties.___lop_cmp_from_to_">
      <summary>The ordering for the index from_to_</summary>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.LinkProperties.___lop_cmp_from_to_.Compare(Ubisense.UBuilding.Contents.LinkProperties.___lop_key_from_to_,Ubisense.UBuilding.Contents.LinkProperties.___lop_key_from_to_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.LinkProperties.___lop_key_to_">
      <summary>The lex-ordered prefixable key for the index to_</summary>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.LinkProperties.___lop_cmp_to_">
      <summary>The ordering for the index to_</summary>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.LinkProperties.___lop_cmp_to_.Compare(Ubisense.UBuilding.Contents.LinkProperties.___lop_key_to_,Ubisense.UBuilding.Contents.LinkProperties.___lop_key_to_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.AttributeProperties">
      <summary>A relation containing the material properties for each area. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AttributeProperties.AddInsertHandler(Ubisense.UBuilding.Contents.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UBuilding.Contents.AttributeProperties.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AttributeProperties.AddUpdateHandler(Ubisense.UBuilding.Contents.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UBuilding.Contents.AttributeProperties.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AttributeProperties.AddDeleteHandler(Ubisense.UBuilding.Contents.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UBuilding.Contents.AttributeProperties.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AttributeProperties.area_(Ubisense.UBuilding.Contents.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index area_. The area object uniquely defines its material attributes.  All areas that have material attributes also have an entry in the AreaProperties relation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AttributeProperties.area_(Ubisense.UBuilding.Contents.ReadTransaction,Ubisense.UBuilding.Area)">
      <summary>Iterate over the elements of the table that match the first argument of the index area_. The area object uniquely defines its material attributes.  All areas that have material attributes also have an entry in the AreaProperties relation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.AttributeProperties.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.Contents.AttributeProperties.RowType.area_">
      <summary>The area object </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBuilding.Contents.AttributeProperties.RowType.attrs_">
      <summary>The material attributes of the area </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AttributeProperties.RowType.#ctor(Ubisense.UBuilding.Area,System.Collections.Generic.List{Ubisense.UBuilding.AttributePropertiesStruct})">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.AttributeProperties.___lop_key_area_">
      <summary>The lex-ordered prefixable key for the index area_</summary>
    </member>
    <member name="T:Ubisense.UBuilding.Contents.AttributeProperties.___lop_cmp_area_">
      <summary>The ordering for the index area_</summary>
    </member>
    <member name="M:Ubisense.UBuilding.Contents.AttributeProperties.___lop_cmp_area_.Compare(Ubisense.UBuilding.Contents.AttributeProperties.___lop_key_area_,Ubisense.UBuilding.Contents.AttributeProperties.___lop_key_area_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UVis.Key">
      <summary>A key acts as a mediator between a representation and a represented thing.  Rather than assigning representations directly to objects and types, a key is assigned to an object or type, and the key identifies a pair of representations: the 2D and the 3D rep. (It is also possible for a key to have only one representation, in which case it is used for both views, or no representations, in which case objects with this key are not drawn.)  This allows very rapid switching of object representations by changing the key assigned to an object or type. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UVis.Key.op_Equality(Ubisense.UVis.Key,Ubisense.UVis.Key)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UVis.Key.op_Inequality(Ubisense.UVis.Key,Ubisense.UVis.Key)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UVis.Key.op_LessThan(Ubisense.UVis.Key,Ubisense.UVis.Key)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UVis.Key.op_GreaterThan(Ubisense.UVis.Key,Ubisense.UVis.Key)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UVis.Key.op_Implicit(Ubisense.UVis.Key)~Ubisense.UBase.UObject">
      <summary>Implicit conversion operator to ancestor type global::Ubisense.UBase.UObject</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UVis.Key.#cctor">
      <summary>Initialise the Key type</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UVis.Key.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>Unsafe constructor to create an instance of type Key with a specific state.
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            </summary>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UVis.Key.#ctor(System.Boolean)">
      <summary>Create a new Key instance that is either unique or nil</summary>
      <param name="unique">Make this instance unique</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UVis.Key.Narrow(Ubisense.UBase.IObject)">
      <summary>Assign another object to this one if and only if the other object's dynamic type inherits from the static type of this instance</summary>
      <param name="other">The object to assign to this object</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UVis.Key.Unique">
      <summary>Make this object into a new unique instance with DynamicType equal to Key</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UVis.Key.Nil">
      <summary>True iff this object is the nil instance of type Key</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UVis.Key.ToString">
      <summary>Returns a String representation of the value of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UVis.Key.ToString(System.String,System.IFormatProvider)">
      <summary>Equivalent to ToString()</summary>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UVis.Key.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UVis.Key.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UVis.Key.CompareTo(Ubisense.UVis.Key)">
      <summary>Compare this instance with 'other'</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UVis.Key.Equals(Ubisense.UVis.Key)">
      <summary>True if this instance equals obj</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UVis.Key.StaticType">
      <summary>The statically-declared type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UVis.Key.DynamicType">
      <summary>The most-derived dynamic type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UVis.Key.Id">
      <summary>The id of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="T:Ubisense.UVis.View">
      <summary>The view types supported by the map component. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Enumerations</usage>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UVis.Key">
      <summary>A key acts as a mediator between a representation and a represented thing.  Rather than assigning representations directly to objects and types, a key is assigned to an object or type, and the key identifies a pair of representations: the 2D and the 3D rep. (It is also possible for a key to have only one representation, in which case it is used for both views, or no representations, in which case objects with this key are not drawn.)  This allows very rapid switching of object representations by changing the key assigned to an object or type. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Key.Marshall(System.IO.BinaryWriter,Ubisense.UVis.Key)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Key.Marshall(System.IO.BinaryWriter,Ubisense.UVis.Key@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Key.Unmarshall(System.IO.BinaryReader,Ubisense.UVis.Key@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Key.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UVis.View">
      <summary>The view types supported by the map component. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.View.Marshall(System.IO.BinaryWriter,Ubisense.UVis.View)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.View.Marshall(System.IO.BinaryWriter,Ubisense.UVis.View@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.View.Unmarshall(System.IO.BinaryReader,Ubisense.UVis.View@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.View.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.USpatial.Cell">
      <summary>A spatial cell is a cell that serves a Monitor schema. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.USpatial.Cell.op_Equality(Ubisense.USpatial.Cell,Ubisense.USpatial.Cell)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.USpatial.Cell.op_Inequality(Ubisense.USpatial.Cell,Ubisense.USpatial.Cell)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.USpatial.Cell.op_LessThan(Ubisense.USpatial.Cell,Ubisense.USpatial.Cell)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.USpatial.Cell.op_GreaterThan(Ubisense.USpatial.Cell,Ubisense.USpatial.Cell)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.USpatial.Cell.op_Implicit(Ubisense.USpatial.Cell)~Ubisense.UBase.UObject">
      <summary>Implicit conversion operator to ancestor type global::Ubisense.UBase.UObject</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.USpatial.Cell.op_Implicit(Ubisense.USpatial.Cell)~Ubisense.UCell.Cell">
      <summary>Implicit conversion operator to ancestor type global::Ubisense.UCell.Cell</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.USpatial.Cell.#cctor">
      <summary>Initialise the Cell type</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.USpatial.Cell.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>Unsafe constructor to create an instance of type Cell with a specific state.
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            </summary>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.USpatial.Cell.#ctor(System.Boolean)">
      <summary>Create a new Cell instance that is either unique or nil</summary>
      <param name="unique">Make this instance unique</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.USpatial.Cell.Narrow(Ubisense.UBase.IObject)">
      <summary>Assign another object to this one if and only if the other object's dynamic type inherits from the static type of this instance</summary>
      <param name="other">The object to assign to this object</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.USpatial.Cell.Unique">
      <summary>Make this object into a new unique instance with DynamicType equal to Cell</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.USpatial.Cell.Nil">
      <summary>True iff this object is the nil instance of type Cell</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.USpatial.Cell.ToString">
      <summary>Returns a String representation of the value of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.USpatial.Cell.ToString(System.String,System.IFormatProvider)">
      <summary>Equivalent to ToString()</summary>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.USpatial.Cell.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.USpatial.Cell.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.USpatial.Cell.CompareTo(Ubisense.USpatial.Cell)">
      <summary>Compare this instance with 'other'</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.USpatial.Cell.Equals(Ubisense.USpatial.Cell)">
      <summary>True if this instance equals obj</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.USpatial.Cell.StaticType">
      <summary>The statically-declared type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.USpatial.Cell.DynamicType">
      <summary>The most-derived dynamic type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.USpatial.Cell.Id">
      <summary>The id of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="T:Ubisense.USpatial.Interaction">
      <summary>An interaction between two object roles. It holds two pairs of a role and the object that role is attached to, but does not specify the nature of the interaction. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Interaction.subject_">
      <summary>The subject of the interaction. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Interaction.subject_role_">
      <summary>The role of the subject in this interaction. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Interaction.object_">
      <summary>The object of the interaction. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Interaction.object_role_">
      <summary>The role of the object in this interaction. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.USpatial.Interaction.op_Equality(Ubisense.USpatial.Interaction,Ubisense.USpatial.Interaction)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.USpatial.Interaction.op_Inequality(Ubisense.USpatial.Interaction,Ubisense.USpatial.Interaction)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.USpatial.Interaction.op_LessThan(Ubisense.USpatial.Interaction,Ubisense.USpatial.Interaction)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.USpatial.Interaction.op_GreaterThan(Ubisense.USpatial.Interaction,Ubisense.USpatial.Interaction)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.USpatial.Interaction.#ctor(Ubisense.UBase.UObject,Ubisense.UBase.Symbol,Ubisense.UBase.UObject,Ubisense.UBase.Symbol)">
      <summary>Create a new Interaction instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.USpatial.Interaction.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.USpatial.Interaction.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.USpatial.Interaction.CompareTo(Ubisense.USpatial.Interaction)">
      <summary>Compare this instance with 'other'</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.USpatial.Interaction.Equals(Ubisense.USpatial.Interaction)">
      <summary>True if this instance equals obj</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.USpatial.Cell">
      <summary>A spatial cell is a cell that serves a Monitor schema. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Cell.Marshall(System.IO.BinaryWriter,Ubisense.USpatial.Cell)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Cell.Marshall(System.IO.BinaryWriter,Ubisense.USpatial.Cell@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Cell.Unmarshall(System.IO.BinaryReader,Ubisense.USpatial.Cell@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Cell.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.USpatial.Interaction">
      <summary>An interaction between two object roles. It holds two pairs of a role and the object that role is attached to, but does not specify the nature of the interaction. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Interaction.Marshall(System.IO.BinaryWriter,Ubisense.USpatial.Interaction)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Interaction.Marshall(System.IO.BinaryWriter,Ubisense.USpatial.Interaction@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Interaction.Unmarshall(System.IO.BinaryReader,Ubisense.USpatial.Interaction@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Interaction.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UEnterprise.UserDefined">
      <summary>The base type for all objects and types visible in Ubisense Site Manager. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UEnterprise.UserDefined.op_Equality(Ubisense.UEnterprise.UserDefined,Ubisense.UEnterprise.UserDefined)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UEnterprise.UserDefined.op_Inequality(Ubisense.UEnterprise.UserDefined,Ubisense.UEnterprise.UserDefined)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UEnterprise.UserDefined.op_LessThan(Ubisense.UEnterprise.UserDefined,Ubisense.UEnterprise.UserDefined)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UEnterprise.UserDefined.op_GreaterThan(Ubisense.UEnterprise.UserDefined,Ubisense.UEnterprise.UserDefined)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UEnterprise.UserDefined.op_Implicit(Ubisense.UEnterprise.UserDefined)~Ubisense.UBase.UObject">
      <summary>Implicit conversion operator to ancestor type global::Ubisense.UBase.UObject</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UEnterprise.UserDefined.#cctor">
      <summary>Initialise the UserDefined type</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UEnterprise.UserDefined.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>Unsafe constructor to create an instance of type UserDefined with a specific state.
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            </summary>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UEnterprise.UserDefined.#ctor(System.Boolean)">
      <summary>Create a new UserDefined instance that is either unique or nil</summary>
      <param name="unique">Make this instance unique</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UEnterprise.UserDefined.Narrow(Ubisense.UBase.IObject)">
      <summary>Assign another object to this one if and only if the other object's dynamic type inherits from the static type of this instance</summary>
      <param name="other">The object to assign to this object</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UEnterprise.UserDefined.Unique">
      <summary>Make this object into a new unique instance with DynamicType equal to UserDefined</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UEnterprise.UserDefined.Nil">
      <summary>True iff this object is the nil instance of type UserDefined</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UEnterprise.UserDefined.ToString">
      <summary>Returns a String representation of the value of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UEnterprise.UserDefined.ToString(System.String,System.IFormatProvider)">
      <summary>Equivalent to ToString()</summary>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UEnterprise.UserDefined.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UEnterprise.UserDefined.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UEnterprise.UserDefined.CompareTo(Ubisense.UEnterprise.UserDefined)">
      <summary>Compare this instance with 'other'</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UEnterprise.UserDefined.Equals(Ubisense.UEnterprise.UserDefined)">
      <summary>True if this instance equals obj</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UEnterprise.UserDefined.StaticType">
      <summary>The statically-declared type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UEnterprise.UserDefined.DynamicType">
      <summary>The most-derived dynamic type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UEnterprise.UserDefined.Id">
      <summary>The id of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UEnterprise.UserDefined">
      <summary>The base type for all objects and types visible in Ubisense Site Manager. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UEnterprise.UserDefined.Marshall(System.IO.BinaryWriter,Ubisense.UEnterprise.UserDefined)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UEnterprise.UserDefined.Marshall(System.IO.BinaryWriter,Ubisense.UEnterprise.UserDefined@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UEnterprise.UserDefined.Unmarshall(System.IO.BinaryReader,Ubisense.UEnterprise.UserDefined@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UEnterprise.UserDefined.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.ULocationIntegration.Sensor">
      <summary> 
            The class representing the data model type Sensor.  This is a
            special object type because its unique id is not automatically
            generated, but is instead based on the sensor cell MAC address.
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.op_Equality(Ubisense.ULocationIntegration.Sensor,Ubisense.ULocationIntegration.Sensor)">
      <summary>
             The expression x == y is true if and only if x.CompareTo(y) == 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.op_Inequality(Ubisense.ULocationIntegration.Sensor,Ubisense.ULocationIntegration.Sensor)">
      <summary>
             The expression x != y is true if and only if x.CompareTo(y) != 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.op_LessThan(Ubisense.ULocationIntegration.Sensor,Ubisense.ULocationIntegration.Sensor)">
      <summary>
             The expression x &lt; y is true if and only if x.CompareTo(y) &lt; 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.op_GreaterThan(Ubisense.ULocationIntegration.Sensor,Ubisense.ULocationIntegration.Sensor)">
      <summary>
             The expression x &gt; y is true if and only if x.CompareTo(y) &gt; 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.op_Implicit(Ubisense.ULocationIntegration.Sensor)~Ubisense.UBase.UObject">
      <summary>
            Implicit conversion operator to ancestor type Ubisense.UBase.UObject
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.#cctor">
      <summary>
            The static constructor initialises the Sensor type.
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>
            Unsafe constructor to create an instance of type Sensor with a specific state.  
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            Attempted discovery of the cookie is prohibited by license agreement.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.#ctor(Ubisense.UBase.MAC)">
      <summary>
            Create a new Sensor instance based on the mac address of the sensor.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="mac">The mac id of the sensor, or UBase.Mac() to construct a Nil object</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.Narrow(Ubisense.UBase.IObject)">
      <summary>
            Assign another object to this one if and only if the other object's dynamic type
            inherits from the static type of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other">The object to assign to this object</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.Unique">
      <summary>
            Make this object into a new unique instance with DynamicType equal to Sensor
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.Nil">
      <summary>
            True iff this object is the nil instance of type Sensor
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.ToString">
      <summary>
            Returns a String representation of the value of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.ToString(System.String,System.IFormatProvider)">
      <summary>
            Equivalent to ToString()
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
      <seealso cref="M:Ubisense.ULocationIntegration.Sensor.ToString" />
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.Equals(System.Object)">
      <summary>
            True if this instance (boxed) equals obj
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="obj">The object to compare to this</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.GetHashCode">
      <summary>
            A suitable hash code for this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.CompareTo(Ubisense.ULocationIntegration.Sensor)">
      <summary>
            Compare this instance with 'other'
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other">The object to compare to this</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Sensor.Equals(Ubisense.ULocationIntegration.Sensor)">
      <summary>
            True if this instance equals obj
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other">The object to compare to this</param>
    </member>
    <member name="P:Ubisense.ULocationIntegration.Sensor.MAC">
      <summary>
            Get the mac address.  Returns UBase.MAC() if the sensor object is nil.
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="P:Ubisense.ULocationIntegration.Sensor.StaticType">
      <summary>
            The statically-declared type of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="P:Ubisense.ULocationIntegration.Sensor.DynamicType">
      <summary>
            The most-derived dynamic type of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="P:Ubisense.ULocationIntegration.Sensor.Id">
      <summary>
            The id of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.ULocationIntegration.SensorCell">
      <summary> 
             The class representing the data model type SensorCell.  This is a
             special object type because its unique id is not automatically
             generated, but is instead based on the sensor cell identifier.
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.op_Equality(Ubisense.ULocationIntegration.SensorCell,Ubisense.ULocationIntegration.SensorCell)">
      <summary>
             The expression x == y is true if and only if x.CompareTo(y) == 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.op_Inequality(Ubisense.ULocationIntegration.SensorCell,Ubisense.ULocationIntegration.SensorCell)">
      <summary>
             The expression x != y is true if and only if x.CompareTo(y) != 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.op_LessThan(Ubisense.ULocationIntegration.SensorCell,Ubisense.ULocationIntegration.SensorCell)">
      <summary>
             The expression x &lt; y is true if and only if x.CompareTo(y) &lt; 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.op_GreaterThan(Ubisense.ULocationIntegration.SensorCell,Ubisense.ULocationIntegration.SensorCell)">
      <summary>
             The expression x &gt; y is true if and only if x.CompareTo(y) &gt; 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.op_Implicit(Ubisense.ULocationIntegration.SensorCell)~Ubisense.UBase.UObject">
      <summary>
            Implicit conversion operator to ancestor type Ubisense.UBase.UObject
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.op_Implicit(Ubisense.ULocationIntegration.SensorCell)~Ubisense.UCell.Cell">
      <summary>
            Implicit conversion operator to ancestor type Ubisense.UCell.Cell
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.#cctor">
      <summary>
            Initialise the SensorCell type
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>
            Unsafe constructor to create an instance of type SensorCell with a specific state.  
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            Attempted discovery of the cookie is prohibited by license agreement.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.#ctor(System.UInt32)">
      <summary>
            Create a new SensorCell instance based on the cell Id.  
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="cellId">The cell id, or zero to construct a Nil object.</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.Narrow(Ubisense.UBase.IObject)">
      <summary>
            Assign another object to this one if and only if the other object's dynamic type
            inherits from the static type of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other">The object to assign to this object</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.Unique">
      <summary>
            Make this object into a new unique instance with DynamicType equal to SensorCell
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.Nil">
      <summary>
            True iff this object is the nil instance of type SensorCell
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.ToString">
      <summary>
            Returns a String representation of the value of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.ToString(System.String,System.IFormatProvider)">
      <summary>
            Equivalent to ToString()
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.Equals(System.Object)">
      <summary>
            True if this instance (boxed) equals obj
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="obj">The object to compare to this</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.GetHashCode">
      <summary>
            A suitable hash code for this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.CompareTo(Ubisense.ULocationIntegration.SensorCell)">
      <summary>
            Compare this instance with 'other'
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other">The object to compare to this</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.SensorCell.Equals(Ubisense.ULocationIntegration.SensorCell)">
      <summary>
            True if this instance equals obj
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other">The object to compare to this</param>
    </member>
    <member name="P:Ubisense.ULocationIntegration.SensorCell.CellId">
      <summary>
            Get the cell id.  Returns zero if the cell object is nil.
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="P:Ubisense.ULocationIntegration.SensorCell.StaticType">
      <summary>
            The statically-declared type of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="P:Ubisense.ULocationIntegration.SensorCell.DynamicType">
      <summary>
            The most-derived dynamic type of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="P:Ubisense.ULocationIntegration.SensorCell.Id">
      <summary>
            The id of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.ULocationIntegration.Tag">
      <summary> 
             The class representing the data model type Tag.  This is a
             special object type because its unique id is not automatically
             generated, but is instead based on the tag identifier.
             <seealso cref="!:Ubisense.ULocationEngine.Tag" /></summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.ConvertIdToString(System.UInt64,System.Char)">
      <summary>
            Static method to convert an unsigned long tag id into a string representation.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="id">The tag id</param>
      <param name="separateChar">The separator to use between octets, or '\0' for no separator</param>
      <returns>A string where each byte of the tag id is represented as a
            decimal number from 000 to 255.  Bytes are encoded from most
            significant to least significant.</returns>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.ConvertStringToId(System.String)">
      <summary>
            Static method to convert a string representation of a tag id to an unsigned long.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="value">The string form of the tag id</param>
      <returns>
            The equivalent tag id, or zero on failure. For Ubitags, the top 32
            bits will be zero, so it can safely coerced to an unsigned int and
            used to construct a <c>Ubisense.ULocationEngine.Tag</c>.
            </returns>
      <remarks>
            Supported formats, tested in this order, are:
            x Decimal octets, zero padded to three characters, with '-' separators.
            x If the string is a multiple of three characters long, treat as unseparated zero padded octets.
            x The decimal string representation of the tag id.
            </remarks>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.op_Equality(Ubisense.ULocationIntegration.Tag,Ubisense.ULocationIntegration.Tag)">
      <summary>
            x == y is true if and only if x.CompareTo(y) == 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.op_Inequality(Ubisense.ULocationIntegration.Tag,Ubisense.ULocationIntegration.Tag)">
      <summary>
            x != y is true if and only if x.CompareTo(y) != 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.op_LessThan(Ubisense.ULocationIntegration.Tag,Ubisense.ULocationIntegration.Tag)">
      <summary>
            x &lt; y is true if and only if x.CompareTo(y) &lt; 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.op_GreaterThan(Ubisense.ULocationIntegration.Tag,Ubisense.ULocationIntegration.Tag)">
      <summary>
            x &gt; y is true if and only if x.CompareTo(y) &gt; 0
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.op_Implicit(Ubisense.ULocationIntegration.Tag)~Ubisense.UBase.UObject">
      <summary>
            Implicit conversion operator to ancestor type Ubisense.UBase.UObject
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.#cctor">
      <summary>
            Initialise the Tag type
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>
            Unsafe constructor to create an instance of type Tag with a specific state.  
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            Attempted discovery of the cookie is prohibited by license agreement.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.#ctor(System.UInt64)">
      <summary>
            Create a new Tag instance based on the tag id
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="tagId">The tag id, or zero to construct a Nil object</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.Narrow(Ubisense.UBase.IObject)">
      <summary>
            Assign another object to this one if and only if the other object's dynamic type
            inherits from the static type of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other">The object to assign to this object</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.Unique">
      <summary>
            Make this object into a new unique instance with DynamicType equal to Tag
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.Nil">
      <summary>
            True iff this object is the nil instance of type Tag
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.ToString">
      <summary>
            Returns a String representation of the value of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.ToString(System.String,System.IFormatProvider)">
      <summary>
            Equivalent to ToString()
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.Equals(System.Object)">
      <summary>
            True if this instance (boxed) equals obj
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="obj">The object to compare to this</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.GetHashCode">
      <summary>
            A suitable hash code for this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.CompareTo(Ubisense.ULocationIntegration.Tag)">
      <summary>
            Compare this instance with 'other'
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other">The object to compare to this</param>
    </member>
    <member name="M:Ubisense.ULocationIntegration.Tag.Equals(Ubisense.ULocationIntegration.Tag)">
      <summary>
            True if this instance equals obj
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="other">The object to compare to this</param>
    </member>
    <member name="P:Ubisense.ULocationIntegration.Tag.PhysicalId">
      <summary>
            Get the tag physical id.  Returns zero if the tag object is nil.
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="P:Ubisense.ULocationIntegration.Tag.StaticType">
      <summary>
            The statically-declared type of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="P:Ubisense.ULocationIntegration.Tag.DynamicType">
      <summary>
            The most-derived dynamic type of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="P:Ubisense.ULocationIntegration.Tag.Id">
      <summary>
            The id of this instance
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationIntegration.Sensor">
      <summary>
            Marshalling for sensors.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.Sensor.Marshall(System.IO.BinaryWriter,Ubisense.ULocationIntegration.Sensor)">
      <summary>
            Write to a sink.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.Sensor.Marshall(System.IO.BinaryWriter,Ubisense.ULocationIntegration.Sensor@)">
      <summary>
            Write to a sink.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.Sensor.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationIntegration.Sensor@)">
      <summary>
            Read from a source.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.Sensor.Unmarshall(System.IO.BinaryReader)">
      <summary>
            Read from a source.
            </summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationIntegration.SensorCell">
      <summary>
            Marshalling for sensor cells.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.SensorCell.Marshall(System.IO.BinaryWriter,Ubisense.ULocationIntegration.SensorCell)">
      <summary>
            Write to a sink.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.SensorCell.Marshall(System.IO.BinaryWriter,Ubisense.ULocationIntegration.SensorCell@)">
      <summary>
            Write to a sink.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.SensorCell.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationIntegration.SensorCell@)">
      <summary>
            Read from a source.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.SensorCell.Unmarshall(System.IO.BinaryReader)">
      <summary>
            Read from a source.
            </summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationIntegration.Tag">
      <summary>
            Marshalling a tag.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.Tag.Marshall(System.IO.BinaryWriter,Ubisense.ULocationIntegration.Tag)">
      <summary>
            Write to a sink.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.Tag.Marshall(System.IO.BinaryWriter,Ubisense.ULocationIntegration.Tag@)">
      <summary>
            Write to a sink.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.Tag.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationIntegration.Tag@)">
      <summary>
            Read from a source.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationIntegration.Tag.Unmarshall(System.IO.BinaryReader)">
      <summary>
            Read from a source.
            </summary>
    </member>
    <member name="T:Ubisense.ULocation.LoadedCellsChangedHandler">
      <summary>
            Handler for an event generated when the cells loaded into a MultiCell instance are changed.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="sender">The multi-cell client generating the event</param>
    </member>
    <member name="T:Ubisense.ULocation.MultiCell">
             Summary
             A client for loading multiple location cells at once. The
             client merges the events from the cells into a single
             ULocation.CellData schema. It also provides utility methods
             for inserting location events into the platform.
             Remarks
             Typical usage:
               1. Call GetAvailableCells to get the location cells that
                  can be loaded.
               2. Load the cell or cells for which object locations are
                  required.
               3. Query the Schema property to find the location of
                  objects.
               4. Add handlers to the Schema property to be notified of
                  location events.
             Example
             <code>
             MultiCell multicell = new MultiCell();
             multicell.LoadCellsIntersecting(new Box(new Ubisense.UBase.Vector3D(0,0,0), new Ubisense.UBase.Vector3D(20,20,3)), true);
             // It is very important to wrap ReadTransaction in a using statement,
             // otherwise ReadTransaction is not disposed, and the lock is not
             // released until it is garbage collected.  This blocks subsequent
             // events indefinitely.
             using (Ubisense.ULocation.CellData.ReadTransaction xact = multicell.Schema.ReadTransaction())
             {
                foreach (Ubisense.ULocation.CellData.Location.RowType r in Ubisense.ULocation.CellData.Location.object_(xact))
                {
                   DoSomethingWith(r);
                }
             }
             </code>  
            
             Multicell callback semantics
            
             Multicell implements a non-standard establish state semantics for the client programmer.
             The basic idea is that multicell tries to simplify the user's view of the schema by 
             translating establish state events into a set of change events.  When a cell is loaded
             into a multicell schema, the schema will generate an insert event for every object in that
             cell; when a cell is unloaded, the schema will generate a delete event for every object
             in that cell; when an establish state event occurs on a cell, the schema will generate 
             insert, update or delete events as appropriate to cover every change made in that cell
             since the last valid state of the schema.
        </member>
    <member name="F:Ubisense.ULocation.MultiCell.lastObjectEventTime">
      <summary>
            The timestamp of the last event seen for an object.  
            Used to determine if an event has been superseded in another loaded cell.
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.#ctor">
      <summary>
            Create a multi-cell client.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <remarks>
            Caches the CellConfigSchema and CellExtentSchema.  Initially no cells are loaded.  The user can load cells using the LoadCell and LoadCellsIntersecting methods.
            </remarks>
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.Close">
      <summary>
            Dispose of resources created by the MultiCell client, unloading all cells and cached schemas.
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.Superseded(Ubisense.UBase.UObject,System.DateTime)">
      <summary>
            Return true if an event has been superseded by more recent
            events for an object.  Update last object event time as
            appropriate.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="obj">The object to check</param>
      <param name="t">The time of the new event</param>
      <returns>True if the time is out of date for the object.</returns>
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.SupersededForRemove(Ubisense.UBase.UObject,System.DateTime)">
      <summary>
            Return true if a delete event has been superseded by more recent
            events for an object.  Update last object event time as
            appropriate.  As Superseded, but the event is still valid if
            the time is equal to the last seen time.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="obj">The object to check</param>
      <param name="t">The
            time of the new event</param>
      <returns>True if the time is
            out of date for the object.</returns>
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.CleanObjectTimes">
      <summary>
             Main function for the cleanup thread.
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.GetAvailableCells">
      <summary>Get all available location cells.  Returns a map from location cell to the cell name.</summary>
      <package>UbisenseLocationServices.dll</package>
      <remarks>
            The returned location cells are all those currently available in the platform,
            not just those already loaded by this MultiCell.
            </remarks>
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.UnloadAllCells">
      <summary>
            Unload all location cells.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <remarks>
            This will generate events Invalid and Establish events on the combined Schema, 
            if any location cells are currently loaded.
            </remarks>
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.LoadCell(Ubisense.ULocation.Cell,System.Boolean)">
      <summary>
            Load the contents of a location cell.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="cell">The location cell to load</param>
      <param name="update">True to receive updates for the cell, false just to take a snapshot</param>
      <returns>True on success, false if the cell is nil</returns>
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.LoadCell(System.String,System.Boolean)">
      <summary>
            Load the contents of a named location cell.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="name">The name of the location cell to load</param>
      <param name="update">True to receive updates for the cell, false just to take a snapshot</param>
      <returns>True on success, false if the cell is unknown, or is not a location cell</returns>
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.UnloadCell(Ubisense.ULocation.Cell)">
      <summary>
            Unload the contents of a location cell.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="cell">The location cell to unload</param>
      <remarks>
            This generates Invalid and Establish events for the combined Schema, 
            if the location cell was loaded.
            </remarks>
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.UnloadCell(System.String)">
      <summary>
            Unload the contents of a named location cell.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="name">The name of the location cell to unload</param>
      <remarks>
            This generates Invalid and Establish events for the combined Schema, 
            if the named location cell was loaded.
            </remarks>
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.LoadCellsIntersecting(Ubisense.ULocation.Box,System.Boolean)">
      <summary>
            Load all cells whose bounds intersect the given box.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="box">The intersecting volume</param>
      <param name="update">True to receive updates for the loaded cells, false just to take a snapshot</param>
      <returns>The set of location cells that intersected the box and were loaded</returns>
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.LoadCellsIntersecting(Ubisense.UCell.PolygonalPrism,System.Boolean)">
      <summary>
            Load all cells whose bounds intersect the given right-polygonal prism.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="extent">The intersecting volume</param>
      <param name="update">True to receive updates for the loaded cells, false just to take a snapshot</param>
      <returns>The set of location cells that intersected the extent and were loaded</returns>
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.GetLoadedCells">
      <summary>
            Get the set of currently loaded cells.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <returns>The loaded cells.</returns>
      <remarks>The returned collection is not a static copy, but refers to the loaded cells in the multi-cell client.
            If other threads can load and unload cells in the multi-cell client, then you should always lock this collection
            during enumeration.</remarks>
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.GetLoadedBounds(Ubisense.ULocation.Box@)">
      <summary>
            Return the bounding box of the currently loaded cells.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="bounds">The bounding box of all loaded cells</param>
      <returns>True if bounding box is valid, or false if there are no loaded cells</returns>
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.GetCellExtent(Ubisense.ULocation.Cell,Ubisense.UCell.PolygonalPrism@)">
      <summary>
            Get the bounding box of a location cell.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="cell">The cell for which the bounding box is to be returned</param>
      <param name="extent">The extent of the cell</param>
      <returns>True if the bounding box is valid, false if the cell is unknown</returns>
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.IsCellLoaded(Ubisense.ULocation.Cell)">
      <summary>
            Query whether a cell is currently loaded.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="cell">The cell to query</param>
      <returns>true if the cell is loaded, false otherwise</returns>
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.GetCell(System.String)">
      <summary>
            Utility method to look up a cell by name.  Takes a read transaction on CellConfigSchema.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="name">The name of the cell to look up</param>
      <returns>The cell with the given name.  The return is Nil if the name is unknown or the named cell is not a location cell</returns>
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.SetObjectLocation(Ubisense.UBase.UObject,Ubisense.UBase.Position)">
      <summary>
            Set a persistent object location within one of the subscribed cells. 
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="obj">The object whose location is to be set</param>
      <param name="pos">Where to place the object</param>
      <returns>False if the position is not located within any loaded cell.</returns>
      <remarks>This method is synchronous with the location cell, so on success the 
            position of the object will persist in the location cell until it is moved or removed.
            A location cell is chosen, from those currently loaded, that best contains the position. 
            If the position is contained in more than one cell, the smallest is chosen.
            </remarks>
      <seealso cref="M:Ubisense.ULocation.MultiCell.InjectObjectLocation(Ubisense.UBase.UObject,Ubisense.UBase.Position)" />
      <seealso cref="M:Ubisense.ULocation.MultiCell.RemoveObjectLocation(Ubisense.UBase.UObject)" />
      <seealso cref="M:Ubisense.ULocation.MultiCell.GetOwnerCell(Ubisense.UBase.Vector3D,Ubisense.ULocation.Cell@)" />
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.InjectObjectLocation(Ubisense.UBase.UObject,Ubisense.UBase.Position)">
      <summary>
            Inject an object location into one of the subscribed cells.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="obj">The object whose location is to be set</param>
      <param name="pos">Where to place the object</param>
      <returns>False if the position is not located within any loaded cell.</returns>
      <remarks>This method is not synchronous with the location cell, and only makes a best effort
            to set the position of the object in a location cell.  Under high loads, the position may be 
            discarded, and there is no guarantee of ordering of injected events.
            Because the method does not require a confirmation reply from the location cell, 
            it can be used to deliver very high update rates. A location cell is chosen, from those currently
            loaded, that best contains the position. If the position is contained in more than one cell,
            the smallest is chosen.</remarks>
      <seealso cref="M:Ubisense.ULocation.MultiCell.SetObjectLocation(Ubisense.UBase.UObject,Ubisense.UBase.Position)" />
      <seealso cref="M:Ubisense.ULocation.MultiCell.RemoveObjectLocation(Ubisense.UBase.UObject)" />
      <seealso cref="M:Ubisense.ULocation.MultiCell.GetOwnerCell(Ubisense.UBase.Vector3D,Ubisense.ULocation.Cell@)" />
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.RemoveObjectLocation(Ubisense.UBase.UObject)">
      <summary>
            Remove an object from the loaded location cells.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="obj">The object to remove</param>
      <returns>False if unable to remove object, true if object removed or not found</returns>
      <remarks>The object is removed from the cell that it is located in, according to this client's
            current state.  Be aware that there is a potential race between injecting an object location
            and removing that object. This method is synchronous with the location cell from which the
            object is removed.</remarks>
      <seealso cref="M:Ubisense.ULocation.MultiCell.SetObjectLocation(Ubisense.UBase.UObject,Ubisense.UBase.Position)" />
      <seealso cref="M:Ubisense.ULocation.MultiCell.InjectObjectLocation(Ubisense.UBase.UObject,Ubisense.UBase.Position)" />
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.Dispose">
      <summary>
            Do not override this in derived classes.  If dispose doesn't
            get called, the held resources will get released when the GC
            gets round to it.  Since we have no unmanaged resources, this
            is sufficient.
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.DisposeManaged">
      <summary>
            If you override, you must call base.DisposeManaged() after
            your own cleanup code.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <remarks>
            This method is called when the MultiCell is disposed.
            </remarks>
    </member>
    <member name="M:Ubisense.ULocation.MultiCell.GetOwnerCell(Ubisense.UBase.Vector3D,Ubisense.ULocation.Cell@)">
      <summary>
            Return the smallest location cell that contains point p.  The returned cell may not be loaded.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="p">The point to check</param>
      <param name="cell">Returns the smallest cell that contains p, or Nil if no location cell contains p.</param>
      <returns>True if a suitable cell was found</returns>
      <remarks>
            The method returns the smallest location cell containing p, because this allows the definition of smaller
            location cells within the volume of a larger location cell.  A sensor system may be deployed to cover some
            areas with a high density of sensors, allowing a high update rate and greater accuracy.  This has a
            corresponding high processor load.  Each location cell can be deployed on a different server to distribute
            this high load.  The load is well balanced by choosing the smallest location cell that contains a point.
            </remarks>
    </member>
    <member name="P:Ubisense.ULocation.MultiCell.Schema">
      <summary>
            The schema containing the merged objects for all loaded
            cells. Add event handlers to this schema to get notification
            of updates.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <example>
            Here we add event handlers to a MultiCell Schema.
            
            <code>
            using Ubisense.ULocation.MultiCell;
            
            namespace Example
            {
               public class MyTrackingClass
               {
                  MultiCell multicell;
            
                  public MyTrackingClass()
                  {
                     multicell = new MultiCell();
            
                     ...
            
                     multicell.Schema.AddEstablishHandler(OnTrackEstablish);
                     Ubisense.ULocation.CellData.Location.AddInsertHandler(multicell.Schema, OnTrackLocationInsert);
                     Ubisense.ULocation.CellData.Location.AddUpdateHandler(multicell.Schema, OnTrackLocationUpdate);
                  }
            
                  private void OnTrackLocationInsert(Ubisense.ULocation.CellData.Location.RowType row)
                  {
                     // Called when an object appears in one of the loaded cells.
                  }
            
                  private void OnTrackLocationUpdate(Ubisense.ULocation.CellData.Location.RowType old,
                                                Ubisense.ULocation.CellData.Location.RowType row)
                  {
                     // Called when an object moves within the loaded cells.
                  }
            
                  private void OnTrackEstablish()
                  {
                     // Called when the contents of the schema can not be deduced from the sequence of
                     // insert, update and remove events, such as when new location cells are loaded,
                     // or when the system has recovered from a network outage and has missed events.
                  }
               }
            }
            </code></example>
    </member>
    <member name="P:Ubisense.ULocation.MultiCell.CellConfigSchema">
      <summary>
            A cached client of the cell configuration schema.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <remarks>
            The schema is cached when the MultiCell is constructed, and
            can be used by client code to query the cell hierarchy
            configuration.
            </remarks>
    </member>
    <member name="P:Ubisense.ULocation.MultiCell.CellExtentSchema">
      <summary>A cached client of the cell extent schema.</summary>
      <package>UbisenseLocationServices.dll</package>
      <remarks>
            The schema is cached when the MultiCell is constructed, and
            can be used by client code to query the cell extents.      
            </remarks>
    </member>
    <member name="P:Ubisense.ULocation.MultiCell.CellSchemas">
      <summary>The cached schemas of each loaded cell.</summary>
      <package>UbisenseLocationServices.dll</package>
      <remarks>When a cell is loaded, by calling LoadCell or
            LoadCellsIntersecting, the MultiCell caches a copy of its
            schema. Normally a client will not query these individual
            schemas, but will instead use the combined Schema.
            </remarks>
    </member>
    <member name="E:Ubisense.ULocation.MultiCell.LoadedCellsChanged">
      <summary>
            The log commit event is raised when a transaction is
            committed. It is raised before the commit event.
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.UCell.PolygonQueries">
      <summary>
            Static class containing queries on simple, non-convex polygons and UCell::PolygonalPrism
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UCell.PolygonQueries.TwiceArea(System.Collections.Generic.List{Ubisense.UBase.Vector2D})">
      <summary>
            Compute twice the area of the polygon.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="pts">The polygon</param>
      <returns>2*(polygon area)</returns>
    </member>
    <member name="M:Ubisense.UCell.PolygonQueries.Intersects(System.Collections.Generic.List{Ubisense.UBase.Vector2D},Ubisense.UBase.Vector2D,Ubisense.UBase.Vector2D,System.Double@)">
      <summary>
            Test a polygon for intersection with a clip area.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="poly">The polygon to test</param>
      <param name="clipMin">Minimum coordinates to clip</param>
      <param name="clipMax">Maximum coordinates to clip</param>
      <param name="area">Returns the area of the intersection</param>
      <returns>True if the polygon intersects the clip area, false otherwise</returns>
    </member>
    <member name="M:Ubisense.UCell.PolygonQueries.Intersects(System.Collections.Generic.List{Ubisense.UBase.Vector2D},Ubisense.UBase.Vector2D,Ubisense.UBase.Vector2D)">
      <summary>
            Test a polygon for intersection with a clip area.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="poly">The polygon to test</param>
      <param name="clipMin">Minimum coordinates to clip</param>
      <param name="clipMax">Maximum coordinates to clip</param>
      <returns>True if the polygon intersects the clip area, false otherwise</returns>
    </member>
    <member name="M:Ubisense.UCell.PolygonQueries.Contains(System.Collections.Generic.List{Ubisense.UBase.Vector2D},Ubisense.UBase.Vector2D)">
      <summary>
            Test a polygon to see if it contains a point.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="pts">The polygon to test</param>
      <param name="p">The point to test for containment in the polygon</param>
      <returns>True if p is inside pts</returns>
    </member>
    <member name="M:Ubisense.UCell.PolygonQueries.GetBounds(System.Collections.Generic.List{Ubisense.UBase.Vector2D},Ubisense.UBase.Vector2D@,Ubisense.UBase.Vector2D@)">
      <summary>
            Get the axis-aligned bounding box of the polygon.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="pts">The polygon</param>
      <param name="minBound">Returns the minimum of the bounding box</param>
      <param name="maxBound">Returns the maximum of the bounding box</param>
    </member>
    <member name="M:Ubisense.UCell.PolygonQueries.Intersects(Ubisense.UCell.PolygonalPrism,Ubisense.UBase.Vector3D,Ubisense.UBase.Vector3D,System.Double@)">
      <summary>
            Test a PolygonalPrism extent for intersection with a clip volume.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="extent">The polygonal prism</param>
      <param name="clipMin">The lower bound of the clip volume</param>
      <param name="clipMax">The upper bound of the clip volume</param>
      <param name="volume">Returns the volume of the intersection</param>
      <returns>True if the prism intersects the volume, false otherwise</returns>
    </member>
    <member name="M:Ubisense.UCell.PolygonQueries.Intersects(Ubisense.UCell.PolygonalPrism,Ubisense.UBase.Vector3D,Ubisense.UBase.Vector3D)">
      <summary>
            Test a PolygonalPrism extent for intersection with a clip volume.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="extent">The polygonal prism</param>
      <param name="clipMin">The lower bound of the clip volume</param>
      <param name="clipMax">The upper bound of the clip volume</param>
      <returns>True if the prism intersects the volume, false otherwise</returns>
    </member>
    <member name="M:Ubisense.UCell.PolygonQueries.PolygonsIntersect(System.Collections.Generic.List{Ubisense.UBase.Vector2D},System.Collections.Generic.List{Ubisense.UBase.Vector2D})">
      <summary>
            Return true if the two simple, non-convex polygons intersect.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="p1">The first polygon</param>
      <param name="p2">The second polygon</param>
      <returns>True if the two simple, non-convex polygons intersect, false otherwise.</returns>
    </member>
    <member name="M:Ubisense.UCell.PolygonQueries.Contains(Ubisense.UCell.PolygonalPrism,Ubisense.UBase.Vector3D)">
      <summary>
            Test a polygonal prism extent to see if it contains a point.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="extent">The polygonal prism</param>
      <param name="p">The point</param>
      <returns>True if the prism contains the point, false otherwise</returns>
    </member>
    <member name="M:Ubisense.UCell.PolygonQueries.GetBounds(Ubisense.UCell.PolygonalPrism,Ubisense.UBase.Vector3D@,Ubisense.UBase.Vector3D@)">
      <summary>
            Return the bounding volume of a polygonal prism extent.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <param name="extent">The polygonal prism</param>
      <param name="minBound">Returns the lower bound of the axis-aligned bounding volume</param>
      <param name="maxBound">Returns the upper bound of the axis-aligned bounding volume</param>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.USpatial.Ownership.RoleDescription.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.RoleDescription.RowType.Marshall(System.IO.BinaryWriter,Ubisense.USpatial.Ownership.RoleDescription.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.RoleDescription.RowType.Marshall(System.IO.BinaryWriter,Ubisense.USpatial.Ownership.RoleDescription.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.RoleDescription.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.USpatial.Ownership.RoleDescription.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.RoleDescription.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.USpatial.Ownership.Relations.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.Relations.RowType.Marshall(System.IO.BinaryWriter,Ubisense.USpatial.Ownership.Relations.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.Relations.RowType.Marshall(System.IO.BinaryWriter,Ubisense.USpatial.Ownership.Relations.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.Relations.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.USpatial.Ownership.Relations.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.Relations.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.USpatial.Ownership.TypeOwnsShape.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.TypeOwnsShape.RowType.Marshall(System.IO.BinaryWriter,Ubisense.USpatial.Ownership.TypeOwnsShape.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.TypeOwnsShape.RowType.Marshall(System.IO.BinaryWriter,Ubisense.USpatial.Ownership.TypeOwnsShape.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.TypeOwnsShape.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.USpatial.Ownership.TypeOwnsShape.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.TypeOwnsShape.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.USpatial.Ownership.BaseTypeOwnsShape.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.BaseTypeOwnsShape.RowType.Marshall(System.IO.BinaryWriter,Ubisense.USpatial.Ownership.BaseTypeOwnsShape.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.BaseTypeOwnsShape.RowType.Marshall(System.IO.BinaryWriter,Ubisense.USpatial.Ownership.BaseTypeOwnsShape.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.BaseTypeOwnsShape.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.USpatial.Ownership.BaseTypeOwnsShape.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.BaseTypeOwnsShape.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.USpatial.Ownership.ObjectOwnsShape.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.ObjectOwnsShape.RowType.Marshall(System.IO.BinaryWriter,Ubisense.USpatial.Ownership.ObjectOwnsShape.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.ObjectOwnsShape.RowType.Marshall(System.IO.BinaryWriter,Ubisense.USpatial.Ownership.ObjectOwnsShape.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.ObjectOwnsShape.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.USpatial.Ownership.ObjectOwnsShape.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.ObjectOwnsShape.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.RowType.Marshall(System.IO.BinaryWriter,Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.RowType.Marshall(System.IO.BinaryWriter,Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.Schema">
      <summary>The Ubisense.USpatial.Ownership schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.USpatial.Ownership.Schema._rxpo">
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Schema.assert_type_ownership(Ubisense.UBase.Symbol,Ubisense.UBase.Symbol,Ubisense.USpatial.Shape)">
      <summary>Assert that all objects that derive from type have a relative shape for the given role, unless the role is overridden for a specific object.  The shape cannot be absolute. If the type already has a shape for this role, that shape will be replaced with this one. Returns true iff the change was successful. See also: assert_object_ownership. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="type">The type whose instances the shape should be attached to. </param>
      <param name="role">The role the shape belongs to. </param>
      <param name="shape">The shape to add. </param>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Schema.assert_object_ownership(Ubisense.UBase.UObject,Ubisense.UBase.Symbol,Ubisense.USpatial.Shape)">
      <summary>Assert that an object has a shape for the given role. The shape can be absolute or relative.  This overrides any type ownership for the same role. If the object already has a shape for the given role, it will be replaced with this one. Returns true iff the change was successful. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj">The object to attach the shape to. </param>
      <param name="role">The role the shape belongs to. </param>
      <param name="shape">The shape to add. </param>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Schema.retract_type_ownership(Ubisense.UBase.Symbol,Ubisense.UBase.Symbol)">
      <summary>Retract that a type has a shape for a role. If this type has a shape for this role, that shape will be removed, and the type will instead inherit any shapes from its ancestor types (if any of its ancestors have shapes for this role). Returns true iff the shape was removed or the type and role had no shape to remove. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="type">The type whose shape should be removed. </param>
      <param name="role">The role the shape belongs to. </param>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Schema.retract_object_ownership(Ubisense.UBase.UObject,Ubisense.UBase.Symbol)">
      <summary>Retract that an object has a shape for a role. If this object has a shape for this role, that shape will be removed, and the object will instead inherit any shapes from its types (if any of its types have shapes for this role). Returns true iff the shape was removed or the object had no shape to remove for this role. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj">The object whose shape should be removed. </param>
      <param name="role">The role the shape belongs to. </param>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Schema.create_role(Ubisense.UBase.Symbol,System.String)">
      <summary>Create a new role with a human-readable description. Returns true iff the creation succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="role">A human-readable name for the new role. Must be unique among all role names in the system. </param>
      <param name="description">A human-readable description for the new role. </param>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Schema.remove_role(Ubisense.UBase.Symbol,System.Boolean)">
      <summary>Remove a role.  If cascade is true, remove all references to the role, otherwise fail if the role is still in use in the schema. Returns true iff the removal occurred or the role already did not exist. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="role">The role to remove. </param>
      <param name="cascade">Whether to remove references to the role from relations other than RoleDescription. </param>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Schema.monitor(Ubisense.UBase.Symbol,Ubisense.UBase.Symbol)">
      <summary>Start monitoring for the relationship between 'container' and 'contained'. This will add to the Relations relation to detect when a shape belonging to the contained role enters or leaves a shape belonging to the container role. Returns true iff the addition occurred successfully. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="container">The role to monitor as the container. </param>
      <param name="contained">The role to monitor as the contained. </param>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Schema.remove_monitor(Ubisense.UBase.Symbol,Ubisense.UBase.Symbol)">
      <summary>Stop monitoring for the relationship between 'container' and 'contained'. Returns true iff this relationship was already not monitored or the removal occurred successfully. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="container">The role to monitor as the container. </param>
      <param name="contained">The role to monitor as the contained. </param>
    </member>
    <member name="P:Ubisense.USpatial.Ownership.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.USpatial.Ownership.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.RoleDescription">
      <summary>The roles currently known by the system and their human-readable descriptions. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.RoleDescription.AddInsertHandler(Ubisense.USpatial.Ownership.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.USpatial.Ownership.RoleDescription.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.RoleDescription.AddUpdateHandler(Ubisense.USpatial.Ownership.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.USpatial.Ownership.RoleDescription.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.RoleDescription.AddDeleteHandler(Ubisense.USpatial.Ownership.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.USpatial.Ownership.RoleDescription.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.RoleDescription.role_(Ubisense.USpatial.Ownership.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index role_. The name of the role is the primary key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.RoleDescription.role_(Ubisense.USpatial.Ownership.ReadTransaction,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table that match the first argument of the index role_. The name of the role is the primary key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.RoleDescription.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Ownership.RoleDescription.RowType.role_">
      <summary>The human-readable role name. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Ownership.RoleDescription.RowType.description_">
      <summary>The human-readable role description. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.RoleDescription.RowType.#ctor(Ubisense.UBase.Symbol,System.String)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.RoleDescription.___lop_key_role_">
      <summary>The lex-ordered prefixable key for the index role_</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.RoleDescription.___lop_cmp_role_">
      <summary>The ordering for the index role_</summary>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.RoleDescription.___lop_cmp_role_.Compare(Ubisense.USpatial.Ownership.RoleDescription.___lop_key_role_,Ubisense.USpatial.Ownership.RoleDescription.___lop_key_role_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.Relations">
      <summary>The role relationships currently monitored by the system. An entry in this relation means that when a shape belonging to the contained role enters or leaves a shape belonging to the container role, the event is detected and the Contains relation in the Monitor schema is updated appropriately. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Relations.AddInsertHandler(Ubisense.USpatial.Ownership.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.USpatial.Ownership.Relations.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Relations.AddUpdateHandler(Ubisense.USpatial.Ownership.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.USpatial.Ownership.Relations.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Relations.AddDeleteHandler(Ubisense.USpatial.Ownership.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.USpatial.Ownership.Relations.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Relations.pair_(Ubisense.USpatial.Ownership.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index pair_. The pair of container and contained role is the primary key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Relations.pair_(Ubisense.USpatial.Ownership.ReadTransaction,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table that match the first argument of the index pair_. The pair of container and contained role is the primary key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Relations.pair_(Ubisense.USpatial.Ownership.ReadTransaction,Ubisense.UBase.Symbol,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index pair_. The pair of container and contained role is the primary key. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Relations.container_(Ubisense.USpatial.Ownership.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index container_. Index by container role. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Relations.container_(Ubisense.USpatial.Ownership.ReadTransaction,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table that match the first argument of the index container_. Index by container role. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Relations.contained_(Ubisense.USpatial.Ownership.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index contained_. Index by contained role. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Relations.contained_(Ubisense.USpatial.Ownership.ReadTransaction,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table that match the first argument of the index contained_. Index by contained role. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.Relations.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Ownership.Relations.RowType.container_">
      <summary>The container role for which to report interactions. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Ownership.Relations.RowType.contained_">
      <summary>The contained role for which to report interactions. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Relations.RowType.#ctor(Ubisense.UBase.Symbol,Ubisense.UBase.Symbol)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.Relations.___lop_key_pair_">
      <summary>The lex-ordered prefixable key for the index pair_</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.Relations.___lop_cmp_pair_">
      <summary>The ordering for the index pair_</summary>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Relations.___lop_cmp_pair_.Compare(Ubisense.USpatial.Ownership.Relations.___lop_key_pair_,Ubisense.USpatial.Ownership.Relations.___lop_key_pair_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.Relations.___lop_key_container_">
      <summary>The lex-ordered prefixable key for the index container_</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.Relations.___lop_cmp_container_">
      <summary>The ordering for the index container_</summary>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Relations.___lop_cmp_container_.Compare(Ubisense.USpatial.Ownership.Relations.___lop_key_container_,Ubisense.USpatial.Ownership.Relations.___lop_key_container_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.Relations.___lop_key_contained_">
      <summary>The lex-ordered prefixable key for the index contained_</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.Relations.___lop_cmp_contained_">
      <summary>The ordering for the index contained_</summary>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.Relations.___lop_cmp_contained_.Compare(Ubisense.USpatial.Ownership.Relations.___lop_key_contained_,Ubisense.USpatial.Ownership.Relations.___lop_key_contained_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.TypeOwnsShape">
      <summary>The ownership of shapes by types for specific roles.  An entry in this relation means that all instances of the given type (i.e., objects) have a copy of the given shape attached to them, and that that shape is part of the given role. "Attached to them" means that the shape's position is given in object space, so the shape will move with the object when the object moves around in the real world.  This relation is generated by combining the BaseTypeOwnsShape relation with the role hierarchy, so that if a role attaches a shape to a type, it attaches the same shape to all of the descendent types. If a type has more than one ancestor, and more than one of its ancestors have a shape in the same role, then the ancestor whose name is lexicographically earliest passes its shape to the descendent type. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.TypeOwnsShape.AddInsertHandler(Ubisense.USpatial.Ownership.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.USpatial.Ownership.TypeOwnsShape.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.TypeOwnsShape.AddUpdateHandler(Ubisense.USpatial.Ownership.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.USpatial.Ownership.TypeOwnsShape.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.TypeOwnsShape.AddDeleteHandler(Ubisense.USpatial.Ownership.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.USpatial.Ownership.TypeOwnsShape.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.TypeOwnsShape.role_(Ubisense.USpatial.Ownership.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index role_. Index by role. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.TypeOwnsShape.role_(Ubisense.USpatial.Ownership.ReadTransaction,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table that match the first argument of the index role_. Index by role. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.TypeOwnsShape.owner_role_(Ubisense.USpatial.Ownership.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index owner_role_. The type and the role together form the key: each role can have at most one shape attached to each type. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.TypeOwnsShape.owner_role_(Ubisense.USpatial.Ownership.ReadTransaction,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table that match the first argument of the index owner_role_. The type and the role together form the key: each role can have at most one shape attached to each type. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.TypeOwnsShape.owner_role_(Ubisense.USpatial.Ownership.ReadTransaction,Ubisense.UBase.Symbol,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index owner_role_. The type and the role together form the key: each role can have at most one shape attached to each type. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.TypeOwnsShape.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Ownership.TypeOwnsShape.RowType.owner_">
      <summary>The type of object the shape is relative to. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Ownership.TypeOwnsShape.RowType.role_">
      <summary>The role that the shape is part of. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Ownership.TypeOwnsShape.RowType.shape_">
      <summary>The shape attached to objects of the stated type. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.TypeOwnsShape.RowType.#ctor(Ubisense.UBase.Symbol,Ubisense.UBase.Symbol,Ubisense.USpatial.Shape)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.TypeOwnsShape.___lop_key_role_">
      <summary>The lex-ordered prefixable key for the index role_</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.TypeOwnsShape.___lop_cmp_role_">
      <summary>The ordering for the index role_</summary>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.TypeOwnsShape.___lop_cmp_role_.Compare(Ubisense.USpatial.Ownership.TypeOwnsShape.___lop_key_role_,Ubisense.USpatial.Ownership.TypeOwnsShape.___lop_key_role_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.TypeOwnsShape.___lop_key_owner_role_">
      <summary>The lex-ordered prefixable key for the index owner_role_</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.TypeOwnsShape.___lop_cmp_owner_role_">
      <summary>The ordering for the index owner_role_</summary>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.TypeOwnsShape.___lop_cmp_owner_role_.Compare(Ubisense.USpatial.Ownership.TypeOwnsShape.___lop_key_owner_role_,Ubisense.USpatial.Ownership.TypeOwnsShape.___lop_key_owner_role_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.BaseTypeOwnsShape">
      <summary>The base table for ownership of shapes by types for specific roles. Entries in this table assert that all objects derived from a type have a shape for a given role. See also the annotation for the TypeOwnsShape relation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.BaseTypeOwnsShape.AddInsertHandler(Ubisense.USpatial.Ownership.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.USpatial.Ownership.BaseTypeOwnsShape.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.BaseTypeOwnsShape.AddUpdateHandler(Ubisense.USpatial.Ownership.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.USpatial.Ownership.BaseTypeOwnsShape.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.BaseTypeOwnsShape.AddDeleteHandler(Ubisense.USpatial.Ownership.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.USpatial.Ownership.BaseTypeOwnsShape.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.BaseTypeOwnsShape.role_(Ubisense.USpatial.Ownership.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index role_. Index by role. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.BaseTypeOwnsShape.role_(Ubisense.USpatial.Ownership.ReadTransaction,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table that match the first argument of the index role_. Index by role. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.BaseTypeOwnsShape.role_owner_(Ubisense.USpatial.Ownership.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index role_owner_. The type and the role together form the key: each role can have at most one shape attached to each type. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.BaseTypeOwnsShape.role_owner_(Ubisense.USpatial.Ownership.ReadTransaction,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table that match the first argument of the index role_owner_. The type and the role together form the key: each role can have at most one shape attached to each type. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.BaseTypeOwnsShape.role_owner_(Ubisense.USpatial.Ownership.ReadTransaction,Ubisense.UBase.Symbol,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index role_owner_. The type and the role together form the key: each role can have at most one shape attached to each type. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.BaseTypeOwnsShape.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Ownership.BaseTypeOwnsShape.RowType.owner_">
      <summary>The base type of objects that will have this role shape. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Ownership.BaseTypeOwnsShape.RowType.role_">
      <summary>The role of the shape. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Ownership.BaseTypeOwnsShape.RowType.shape_">
      <summary>The shape for the types and role. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.BaseTypeOwnsShape.RowType.#ctor(Ubisense.UBase.Symbol,Ubisense.UBase.Symbol,Ubisense.USpatial.Shape)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.BaseTypeOwnsShape.___lop_key_role_">
      <summary>The lex-ordered prefixable key for the index role_</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.BaseTypeOwnsShape.___lop_cmp_role_">
      <summary>The ordering for the index role_</summary>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.BaseTypeOwnsShape.___lop_cmp_role_.Compare(Ubisense.USpatial.Ownership.BaseTypeOwnsShape.___lop_key_role_,Ubisense.USpatial.Ownership.BaseTypeOwnsShape.___lop_key_role_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.BaseTypeOwnsShape.___lop_key_role_owner_">
      <summary>The lex-ordered prefixable key for the index role_owner_</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.BaseTypeOwnsShape.___lop_cmp_role_owner_">
      <summary>The ordering for the index role_owner_</summary>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.BaseTypeOwnsShape.___lop_cmp_role_owner_.Compare(Ubisense.USpatial.Ownership.BaseTypeOwnsShape.___lop_key_role_owner_,Ubisense.USpatial.Ownership.BaseTypeOwnsShape.___lop_key_role_owner_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.ObjectOwnsShape">
      <summary>The ownership of shapes by objects for specific roles.  An object has a given shape for a role. The shape is relative, which means that it is transformed to the current position and orientation of the object. Compare this with the ObjectOwnsAbsoluteShape relation.  An entry in this relation overrides any shapes attached to the object by its types. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.ObjectOwnsShape.AddInsertHandler(Ubisense.USpatial.Ownership.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.USpatial.Ownership.ObjectOwnsShape.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.ObjectOwnsShape.AddUpdateHandler(Ubisense.USpatial.Ownership.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.USpatial.Ownership.ObjectOwnsShape.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.ObjectOwnsShape.AddDeleteHandler(Ubisense.USpatial.Ownership.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.USpatial.Ownership.ObjectOwnsShape.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.ObjectOwnsShape.role_(Ubisense.USpatial.Ownership.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index role_. Index by role. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.ObjectOwnsShape.role_(Ubisense.USpatial.Ownership.ReadTransaction,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table that match the first argument of the index role_. Index by role. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.ObjectOwnsShape.owner_role_(Ubisense.USpatial.Ownership.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index owner_role_. The object and the role together form the key: each role can have at most one shape attached to each type. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.ObjectOwnsShape.owner_role_(Ubisense.USpatial.Ownership.ReadTransaction,Ubisense.UBase.UObject)">
      <summary>Iterate over the elements of the table that match the first argument of the index owner_role_. The object and the role together form the key: each role can have at most one shape attached to each type. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.ObjectOwnsShape.owner_role_(Ubisense.USpatial.Ownership.ReadTransaction,Ubisense.UBase.UObject,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index owner_role_. The object and the role together form the key: each role can have at most one shape attached to each type. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.ObjectOwnsShape.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Ownership.ObjectOwnsShape.RowType.owner_">
      <summary>The owner of the role shape. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Ownership.ObjectOwnsShape.RowType.role_">
      <summary>The role of the shape. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Ownership.ObjectOwnsShape.RowType.shape_">
      <summary>The shape for the object and role. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.ObjectOwnsShape.RowType.#ctor(Ubisense.UBase.UObject,Ubisense.UBase.Symbol,Ubisense.USpatial.Shape)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.ObjectOwnsShape.___lop_key_role_">
      <summary>The lex-ordered prefixable key for the index role_</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.ObjectOwnsShape.___lop_cmp_role_">
      <summary>The ordering for the index role_</summary>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.ObjectOwnsShape.___lop_cmp_role_.Compare(Ubisense.USpatial.Ownership.ObjectOwnsShape.___lop_key_role_,Ubisense.USpatial.Ownership.ObjectOwnsShape.___lop_key_role_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.ObjectOwnsShape.___lop_key_owner_role_">
      <summary>The lex-ordered prefixable key for the index owner_role_</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.ObjectOwnsShape.___lop_cmp_owner_role_">
      <summary>The ordering for the index owner_role_</summary>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.ObjectOwnsShape.___lop_cmp_owner_role_.Compare(Ubisense.USpatial.Ownership.ObjectOwnsShape.___lop_key_owner_role_,Ubisense.USpatial.Ownership.ObjectOwnsShape.___lop_key_owner_role_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape">
      <summary>The ownership of absolute shapes by objects for specific roles. An object has a given shape for a role. The shape is absolute, which means that it is not transformed to the current position and orientation of the object, but is defined relative to the origin of the site. Compare this with the ObjectOwnsShape relation. This is useful for defining shapes like a room or an exhibition space, where the shape does not move around.   An entry in this relation overrides any shapes attached to the object by its types. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.AddInsertHandler(Ubisense.USpatial.Ownership.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.AddUpdateHandler(Ubisense.USpatial.Ownership.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.AddDeleteHandler(Ubisense.USpatial.Ownership.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.role_(Ubisense.USpatial.Ownership.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index role_. Index by role. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.role_(Ubisense.USpatial.Ownership.ReadTransaction,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table that match the first argument of the index role_. Index by role. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.owner_role_(Ubisense.USpatial.Ownership.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index owner_role_. The object and the role together form the key: each role can have at most one shape attached to each type. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.owner_role_(Ubisense.USpatial.Ownership.ReadTransaction,Ubisense.UBase.UObject)">
      <summary>Iterate over the elements of the table that match the first argument of the index owner_role_. The object and the role together form the key: each role can have at most one shape attached to each type. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.owner_role_(Ubisense.USpatial.Ownership.ReadTransaction,Ubisense.UBase.UObject,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index owner_role_. The object and the role together form the key: each role can have at most one shape attached to each type. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.RowType.owner_">
      <summary>The owner of the absolute role shape. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.RowType.role_">
      <summary>The role of the shape. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.RowType.shape_">
      <summary>The absolute shape for the object and role. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.RowType.#ctor(Ubisense.UBase.UObject,Ubisense.UBase.Symbol,Ubisense.USpatial.Shape)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.___lop_key_role_">
      <summary>The lex-ordered prefixable key for the index role_</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.___lop_cmp_role_">
      <summary>The ordering for the index role_</summary>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.___lop_cmp_role_.Compare(Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.___lop_key_role_,Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.___lop_key_role_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.___lop_key_owner_role_">
      <summary>The lex-ordered prefixable key for the index owner_role_</summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.___lop_cmp_owner_role_">
      <summary>The ordering for the index owner_role_</summary>
    </member>
    <member name="M:Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.___lop_cmp_owner_role_.Compare(Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.___lop_key_owner_role_,Ubisense.USpatial.Ownership.ObjectOwnsAbsoluteShape.___lop_key_owner_role_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.BatteryStatus">
      <summary>The battery status of a tag. <table><tr><td>OK</td><td>The tag battery is fine.</td></tr><tr><td>Warning</td><td>The battery is showing the first signs of aging, and should be changed when convenient.</td></tr><tr><td>Failing</td><td>The battery is starting to fail, and should be changed as soon as possible.</td></tr></table></summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Enumerations</usage>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.AssertedBatteryStatus">
      <summary></summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Enumerations</usage>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UBatteryMonitor.BatteryStatus">
      <summary>The battery status of a tag. <table><tr><td>OK</td><td>The tag battery is fine.</td></tr><tr><td>Warning</td><td>The battery is showing the first signs of aging, and should be changed when convenient.</td></tr><tr><td>Failing</td><td>The battery is starting to fail, and should be changed as soon as possible.</td></tr></table></summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.BatteryStatus.Marshall(System.IO.BinaryWriter,Ubisense.UBatteryMonitor.BatteryStatus)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.BatteryStatus.Marshall(System.IO.BinaryWriter,Ubisense.UBatteryMonitor.BatteryStatus@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.BatteryStatus.Unmarshall(System.IO.BinaryReader,Ubisense.UBatteryMonitor.BatteryStatus@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.BatteryStatus.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UBatteryMonitor.AssertedBatteryStatus">
      <summary></summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.AssertedBatteryStatus.Marshall(System.IO.BinaryWriter,Ubisense.UBatteryMonitor.AssertedBatteryStatus)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.AssertedBatteryStatus.Marshall(System.IO.BinaryWriter,Ubisense.UBatteryMonitor.AssertedBatteryStatus@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.AssertedBatteryStatus.Unmarshall(System.IO.BinaryReader,Ubisense.UBatteryMonitor.AssertedBatteryStatus@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.AssertedBatteryStatus.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.Status.Schema">
      <summary>The Ubisense.UBatteryMonitor.Status schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.UBatteryMonitor.Status.Schema._rxpo">
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Status.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Status.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Status.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Status.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Status.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Status.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Status.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Status.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Status.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Status.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Status.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Status.Schema.tag_battery_changed(Ubisense.ULocationEngine.Tag)">
      <summary>Assert that the battery has been changed on a tag. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="tag"></param>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Status.Schema.assert_battery_status(Ubisense.ULocationEngine.Tag,System.DateTime,Ubisense.UBatteryMonitor.AssertedBatteryStatus)">
      <summary>Assert the battery status for a tag for a given time. Use with set_method and the StatusOverride method to disable overriding with new status. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="tag"></param>
      <param name="time"></param>
      <param name="status"></param>
    </member>
    <member name="P:Ubisense.UBatteryMonitor.Status.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.UBatteryMonitor.Status.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.Status.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus">
      <summary>A tag has an inferred battery status.  The system attempts to generate warnings in advance of a tag actually failing. These warnings may be erronous in extreme environments, such as very low or high temperatures.  It is also possible that a tag might not generate a warning at all. Use with caution. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.AddInsertHandler(Ubisense.UBatteryMonitor.Status.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.AddUpdateHandler(Ubisense.UBatteryMonitor.Status.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.AddDeleteHandler(Ubisense.UBatteryMonitor.Status.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.tag_(Ubisense.UBatteryMonitor.Status.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index tag_. The tag is the primary key of this relation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.tag_(Ubisense.UBatteryMonitor.Status.ReadTransaction,Ubisense.ULocationEngine.Tag)">
      <summary>Iterate over the elements of the table that match the first argument of the index tag_. The tag is the primary key of this relation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.RowType.tag_">
      <summary>The tag. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.RowType.time_">
      <summary>The time of the last update for this tag. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.RowType.min_voltage_">
      <summary>Minimum voltage recorded for the tag with the current battery. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.RowType.max_voltage_">
      <summary>Maximum voltage recorded for the tag with the current battery. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.RowType.status_">
      <summary>The inferred status of the battery in the tag. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.RowType.reserved1_">
      <summary>Reserved for internal use. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.RowType.reserved2_">
      <summary>Reserved for internal use. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.RowType.#ctor(Ubisense.ULocationEngine.Tag,System.DateTime,System.Single,System.Single,Ubisense.UBatteryMonitor.BatteryStatus,System.Single,System.Single)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.___lop_key_tag_">
      <summary>The lex-ordered prefixable key for the index tag_</summary>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.___lop_cmp_tag_">
      <summary>The ordering for the index tag_</summary>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.___lop_cmp_tag_.Compare(Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.___lop_key_tag_,Ubisense.UBatteryMonitor.Status.TagHasBatteryStatus.___lop_key_tag_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UBatteryMonitor.History.TagHasChargeHistory.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.History.TagHasChargeHistory.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UBatteryMonitor.History.TagHasChargeHistory.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.History.TagHasChargeHistory.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UBatteryMonitor.History.TagHasChargeHistory.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.History.TagHasChargeHistory.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UBatteryMonitor.History.TagHasChargeHistory.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.History.TagHasChargeHistory.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.History.Schema">
      <summary>The Ubisense.UBatteryMonitor.History schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.UBatteryMonitor.History.Schema._rxpo">
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.Schema.set_capacity(Ubisense.ULocationEngine.Tag,Ubisense.ULocationEngine.Tag,System.Single)">
      <summary>Set the capacity.  Returns false and fails if this would violate the restriction that tag ranges do not overlap.  Returns true and succeeds otherwise. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="lower"></param>
      <param name="upper"></param>
      <param name="capacity"></param>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.Schema.delete_capacity(Ubisense.ULocationEngine.Tag,Ubisense.ULocationEngine.Tag)">
      <summary>Delete the capacity value.  Returns false if there is no such tag range. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="lower"></param>
      <param name="upper"></param>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.Schema.tag_battery_replaced(Ubisense.ULocationEngine.Tag,System.DateTime)">
      <summary>Assert that the tag battery was replaced at the given time. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="tag"></param>
      <param name="when"></param>
    </member>
    <member name="P:Ubisense.UBatteryMonitor.History.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.UBatteryMonitor.History.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.History.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity">
      <summary>This relation specifes the expected battery capacity for a tag range. The tag range covers those tags from lower_ to higher_ inclusive.  In this relation one tag range may completely contain another but tag ranges are not permitted to overlap; where a tag is covered by more than one entry the smallest range is used. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.AddInsertHandler(Ubisense.UBatteryMonitor.History.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.AddUpdateHandler(Ubisense.UBatteryMonitor.History.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.AddDeleteHandler(Ubisense.UBatteryMonitor.History.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.lower_higher_(Ubisense.UBatteryMonitor.History.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index lower_higher_. Any given range can only have one definition </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.lower_higher_(Ubisense.UBatteryMonitor.History.ReadTransaction,Ubisense.ULocationEngine.Tag)">
      <summary>Iterate over the elements of the table that match the first argument of the index lower_higher_. Any given range can only have one definition </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.lower_higher_(Ubisense.UBatteryMonitor.History.ReadTransaction,Ubisense.ULocationEngine.Tag,Ubisense.ULocationEngine.Tag)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index lower_higher_. Any given range can only have one definition </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.RowType.lower_">
      <summary>The minimum tag in the range. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.RowType.higher_">
      <summary>The maximum tag in the range. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.RowType.capacity_">
      <summary>The battery capacity in Ah </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.RowType.#ctor(Ubisense.ULocationEngine.Tag,Ubisense.ULocationEngine.Tag,System.Single)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.___lop_key_lower_higher_">
      <summary>The lex-ordered prefixable key for the index lower_higher_</summary>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.___lop_cmp_lower_higher_">
      <summary>The ordering for the index lower_higher_</summary>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.___lop_cmp_lower_higher_.Compare(Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.___lop_key_lower_higher_,Ubisense.UBatteryMonitor.History.TagRangeHasBatteryCapacity.___lop_key_lower_higher_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.History.TagHasChargeHistory">
      <summary>This relation specifes the charge consumption history for a tag. It is usually updated whenever the next value of charge consumption  is greater than the previous value by more than 2% of the tag's battery's total capacity. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.TagHasChargeHistory.AddInsertHandler(Ubisense.UBatteryMonitor.History.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UBatteryMonitor.History.TagHasChargeHistory.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.TagHasChargeHistory.AddUpdateHandler(Ubisense.UBatteryMonitor.History.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UBatteryMonitor.History.TagHasChargeHistory.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.TagHasChargeHistory.AddDeleteHandler(Ubisense.UBatteryMonitor.History.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UBatteryMonitor.History.TagHasChargeHistory.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.TagHasChargeHistory.tag_timestamp_(Ubisense.UBatteryMonitor.History.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index tag_timestamp_. Entries are usually ordered by tag and timestamp. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.TagHasChargeHistory.tag_timestamp_(Ubisense.UBatteryMonitor.History.ReadTransaction,Ubisense.ULocationEngine.Tag)">
      <summary>Iterate over the elements of the table that match the first argument of the index tag_timestamp_. Entries are usually ordered by tag and timestamp. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.TagHasChargeHistory.tag_timestamp_(Ubisense.UBatteryMonitor.History.ReadTransaction,Ubisense.ULocationEngine.Tag,System.DateTime)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index tag_timestamp_. Entries are usually ordered by tag and timestamp. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.History.TagHasChargeHistory.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBatteryMonitor.History.TagHasChargeHistory.RowType.tag_">
      <summary>The tag </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBatteryMonitor.History.TagHasChargeHistory.RowType.timestamp_">
      <summary>The time the sample was taken  </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBatteryMonitor.History.TagHasChargeHistory.RowType.value_">
      <summary>The  value of charge consumption for the given tag at the time that the sample was taken. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.TagHasChargeHistory.RowType.#ctor(Ubisense.ULocationEngine.Tag,System.DateTime,System.Single)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.History.TagHasChargeHistory.___lop_key_tag_timestamp_">
      <summary>The lex-ordered prefixable key for the index tag_timestamp_</summary>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.History.TagHasChargeHistory.___lop_cmp_tag_timestamp_">
      <summary>The ordering for the index tag_timestamp_</summary>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.History.TagHasChargeHistory.___lop_cmp_tag_timestamp_.Compare(Ubisense.UBatteryMonitor.History.TagHasChargeHistory.___lop_key_tag_timestamp_,Ubisense.UBatteryMonitor.History.TagHasChargeHistory.___lop_key_tag_timestamp_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.Configuration.Schema">
      <summary>The Ubisense.UBatteryMonitor.Configuration schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.UBatteryMonitor.Configuration.Schema._rxpo">
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Configuration.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Configuration.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Configuration.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Configuration.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Configuration.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Configuration.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Configuration.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Configuration.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Configuration.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Configuration.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Configuration.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Configuration.Schema.set_method(Ubisense.ULocationEngine.Tag,Ubisense.ULocationEngine.Tag,System.String,System.Collections.Generic.SortedDictionary{System.String,System.Single})">
      <summary>Set the lookup method.  Returns false and fails if this would violate the restriction that tag ranges do not overlap.  Returns true and succeeds otherwise. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="lower"></param>
      <param name="upper"></param>
      <param name="method"></param>
      <param name="parameters"></param>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Configuration.Schema.delete_method(Ubisense.ULocationEngine.Tag,Ubisense.ULocationEngine.Tag)">
      <summary>Delete the lookup method.  Returns false if there is no such tag range. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="lower"></param>
      <param name="upper"></param>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Configuration.Schema.options">
      <summary>Return the set of all options available with their default parameters. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
    </member>
    <member name="P:Ubisense.UBatteryMonitor.Configuration.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.UBatteryMonitor.Configuration.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.Configuration.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod">
      <summary>This relation specifes the status calculation method for a tag range. The tag range covers those tags from lower_ to higher_ inclusive.  In this relation one tag range may completely contain another but tag ranges are not permitted to overlap; where a tag is covered by more than one entry the smallest range is used. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.AddInsertHandler(Ubisense.UBatteryMonitor.Configuration.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.AddUpdateHandler(Ubisense.UBatteryMonitor.Configuration.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.AddDeleteHandler(Ubisense.UBatteryMonitor.Configuration.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.lower_higher_(Ubisense.UBatteryMonitor.Configuration.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index lower_higher_. Any given range can only have one definition </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.lower_higher_(Ubisense.UBatteryMonitor.Configuration.ReadTransaction,Ubisense.ULocationEngine.Tag)">
      <summary>Iterate over the elements of the table that match the first argument of the index lower_higher_. Any given range can only have one definition </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.lower_higher_(Ubisense.UBatteryMonitor.Configuration.ReadTransaction,Ubisense.ULocationEngine.Tag,Ubisense.ULocationEngine.Tag)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index lower_higher_. Any given range can only have one definition </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.RowType.lower_">
      <summary>The minimum tag in the range.  </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.RowType.higher_">
      <summary>The maximum tag in the range.  </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.RowType.method_">
      <summary>The calculation method for the tag range. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.RowType.params_">
      <summary>The parameters for the calculation method. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.RowType.#ctor(Ubisense.ULocationEngine.Tag,Ubisense.ULocationEngine.Tag,System.String,System.Collections.Generic.SortedDictionary{System.String,System.Single})">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.___lop_key_lower_higher_">
      <summary>The lex-ordered prefixable key for the index lower_higher_</summary>
    </member>
    <member name="T:Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.___lop_cmp_lower_higher_">
      <summary>The ordering for the index lower_higher_</summary>
    </member>
    <member name="M:Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.___lop_cmp_lower_higher_.Compare(Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.___lop_key_lower_higher_,Ubisense.UBatteryMonitor.Configuration.TagRangeHasBatteryStatusMethod.___lop_key_lower_higher_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPresence.PresenceCell">
      <summary>A cell for organising sensors into sets whose data is treated  as a single unit.  Each Presence cell will be within the cell hierarchy and so its properties (such as extent or name) will be editable using the Site Manager tool. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.PresenceCell.op_Equality(Ubisense.UPresence.PresenceCell,Ubisense.UPresence.PresenceCell)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.PresenceCell.op_Inequality(Ubisense.UPresence.PresenceCell,Ubisense.UPresence.PresenceCell)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.PresenceCell.op_LessThan(Ubisense.UPresence.PresenceCell,Ubisense.UPresence.PresenceCell)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.PresenceCell.op_GreaterThan(Ubisense.UPresence.PresenceCell,Ubisense.UPresence.PresenceCell)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.PresenceCell.op_Implicit(Ubisense.UPresence.PresenceCell)~Ubisense.UBase.UObject">
      <summary>Implicit conversion operator to ancestor type global::Ubisense.UBase.UObject</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPresence.PresenceCell.op_Implicit(Ubisense.UPresence.PresenceCell)~Ubisense.UCell.Cell">
      <summary>Implicit conversion operator to ancestor type global::Ubisense.UCell.Cell</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPresence.PresenceCell.#cctor">
      <summary>Initialise the PresenceCell type</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.PresenceCell.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>Unsafe constructor to create an instance of type PresenceCell with a specific state.
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            </summary>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.PresenceCell.#ctor(System.Boolean)">
      <summary>Create a new PresenceCell instance that is either unique or nil</summary>
      <param name="unique">Make this instance unique</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.PresenceCell.Narrow(Ubisense.UBase.IObject)">
      <summary>Assign another object to this one if and only if the other object's dynamic type inherits from the static type of this instance</summary>
      <param name="other">The object to assign to this object</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.PresenceCell.Unique">
      <summary>Make this object into a new unique instance with DynamicType equal to PresenceCell</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.PresenceCell.Nil">
      <summary>True iff this object is the nil instance of type PresenceCell</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.PresenceCell.ToString">
      <summary>Returns a String representation of the value of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.PresenceCell.ToString(System.String,System.IFormatProvider)">
      <summary>Equivalent to ToString()</summary>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.PresenceCell.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.PresenceCell.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.PresenceCell.CompareTo(Ubisense.UPresence.PresenceCell)">
      <summary>Compare this instance with 'other'</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.PresenceCell.Equals(Ubisense.UPresence.PresenceCell)">
      <summary>True if this instance equals obj</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UPresence.PresenceCell.StaticType">
      <summary>The statically-declared type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UPresence.PresenceCell.DynamicType">
      <summary>The most-derived dynamic type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UPresence.PresenceCell.Id">
      <summary>The id of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="T:Ubisense.UPresence.Anchor">
      <summary>A positioning anchor for objects in a given cell.  This is used by the 'Neat' location injection policy to position objects at this exact position.  It will be owned by the smallest cell that physically contains it. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.Anchor.op_Equality(Ubisense.UPresence.Anchor,Ubisense.UPresence.Anchor)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.Anchor.op_Inequality(Ubisense.UPresence.Anchor,Ubisense.UPresence.Anchor)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.Anchor.op_LessThan(Ubisense.UPresence.Anchor,Ubisense.UPresence.Anchor)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.Anchor.op_GreaterThan(Ubisense.UPresence.Anchor,Ubisense.UPresence.Anchor)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.Anchor.op_Implicit(Ubisense.UPresence.Anchor)~Ubisense.UBase.UObject">
      <summary>Implicit conversion operator to ancestor type global::Ubisense.UBase.UObject</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPresence.Anchor.op_Implicit(Ubisense.UPresence.Anchor)~Ubisense.UEnterprise.UserDefined">
      <summary>Implicit conversion operator to ancestor type global::Ubisense.UEnterprise.UserDefined</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPresence.Anchor.#cctor">
      <summary>Initialise the Anchor type</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.Anchor.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>Unsafe constructor to create an instance of type Anchor with a specific state.
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            </summary>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.Anchor.#ctor(System.Boolean)">
      <summary>Create a new Anchor instance that is either unique or nil</summary>
      <param name="unique">Make this instance unique</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.Anchor.Narrow(Ubisense.UBase.IObject)">
      <summary>Assign another object to this one if and only if the other object's dynamic type inherits from the static type of this instance</summary>
      <param name="other">The object to assign to this object</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.Anchor.Unique">
      <summary>Make this object into a new unique instance with DynamicType equal to Anchor</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.Anchor.Nil">
      <summary>True iff this object is the nil instance of type Anchor</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.Anchor.ToString">
      <summary>Returns a String representation of the value of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.Anchor.ToString(System.String,System.IFormatProvider)">
      <summary>Equivalent to ToString()</summary>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.Anchor.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.Anchor.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.Anchor.CompareTo(Ubisense.UPresence.Anchor)">
      <summary>Compare this instance with 'other'</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.Anchor.Equals(Ubisense.UPresence.Anchor)">
      <summary>True if this instance equals obj</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UPresence.Anchor.StaticType">
      <summary>The statically-declared type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UPresence.Anchor.DynamicType">
      <summary>The most-derived dynamic type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UPresence.Anchor.Id">
      <summary>The id of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPresence.PresenceCell">
      <summary>A cell for organising sensors into sets whose data is treated  as a single unit.  Each Presence cell will be within the cell hierarchy and so its properties (such as extent or name) will be editable using the Site Manager tool. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.PresenceCell.Marshall(System.IO.BinaryWriter,Ubisense.UPresence.PresenceCell)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.PresenceCell.Marshall(System.IO.BinaryWriter,Ubisense.UPresence.PresenceCell@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.PresenceCell.Unmarshall(System.IO.BinaryReader,Ubisense.UPresence.PresenceCell@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.PresenceCell.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPresence.Anchor">
      <summary>A positioning anchor for objects in a given cell.  This is used by the 'Neat' location injection policy to position objects at this exact position.  It will be owned by the smallest cell that physically contains it. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Anchor.Marshall(System.IO.BinaryWriter,Ubisense.UPresence.Anchor)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Anchor.Marshall(System.IO.BinaryWriter,Ubisense.UPresence.Anchor@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Anchor.Unmarshall(System.IO.BinaryReader,Ubisense.UPresence.Anchor@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Anchor.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UPresence.Association.Triple">
      <summary>A triple corresponding to the key in the <i>MessageWasHeard</i> relation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Association.Triple.object_">
      <summary>The tag, or object owning a tag, that sent the radio beacon. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Association.Triple.sensor_">
      <summary>The sensor that heard the radio beacon. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Association.Triple.uplink_">
      <summary>True if this is an uplink, false if it is a chirp. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.Triple.op_Equality(Ubisense.UPresence.Association.Triple,Ubisense.UPresence.Association.Triple)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.Triple.op_Inequality(Ubisense.UPresence.Association.Triple,Ubisense.UPresence.Association.Triple)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.Triple.op_LessThan(Ubisense.UPresence.Association.Triple,Ubisense.UPresence.Association.Triple)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.Triple.op_GreaterThan(Ubisense.UPresence.Association.Triple,Ubisense.UPresence.Association.Triple)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.Triple.#ctor(Ubisense.UBase.UObject,Ubisense.ULocationIntegration.Sensor,System.Byte)">
      <summary>Create a new Triple instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.Triple.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.Triple.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.Triple.CompareTo(Ubisense.UPresence.Association.Triple)">
      <summary>Compare this instance with 'other'</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.Triple.Equals(Ubisense.UPresence.Association.Triple)">
      <summary>True if this instance equals obj</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPresence.Association.Triple">
      <summary>A triple corresponding to the key in the <i>MessageWasHeard</i> relation. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Association.Triple.Marshall(System.IO.BinaryWriter,Ubisense.UPresence.Association.Triple)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Association.Triple.Marshall(System.IO.BinaryWriter,Ubisense.UPresence.Association.Triple@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Association.Triple.Unmarshall(System.IO.BinaryReader,Ubisense.UPresence.Association.Triple@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Association.Triple.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPresence.Association.MessageWasHeard.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Association.MessageWasHeard.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UPresence.Association.MessageWasHeard.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Association.MessageWasHeard.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UPresence.Association.MessageWasHeard.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Association.MessageWasHeard.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UPresence.Association.MessageWasHeard.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Association.MessageWasHeard.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UPresence.Association.Schema">
      <summary>The Ubisense.UPresence.Association schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.UPresence.Association.Schema._rxpo">
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UPresence.Association.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UPresence.Association.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.Schema.inject(System.UInt32,Ubisense.ULocationIntegration.Sensor,System.Byte,System.Boolean,System.Boolean,System.Int32)">
      <summary>Assert that a message was heard. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="tag_id">The tag </param>
      <param name="sensor">The sensor </param>
      <param name="uplink">Whether the event was an uplink or a chirp </param>
      <param name="sleeping">Whether the tag was sleeping when the message was created </param>
      <param name="trembling">Whether the tag was trembling when the message was created </param>
      <param name="rssi">The signal strength </param>
    </member>
    <member name="M:Ubisense.UPresence.Association.Schema.remove(Ubisense.UBase.UObject,Ubisense.ULocationIntegration.Sensor,System.Byte)">
      <summary>Remove the message entry for the relevant triple </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="obj">The tag, or object owning a tag, that sent the radio beacon. </param>
      <param name="sensor">The sensor that heard the radio beacon. </param>
      <param name="uplink">True if this is an uplink, false if it is a chirp. </param>
    </member>
    <member name="P:Ubisense.UPresence.Association.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.UPresence.Association.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.UPresence.Association.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.UPresence.Association.MessageWasHeard">
      <summary>A relation stating when, and how strongly, a tag has been heard beaconing by a sensor. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.MessageWasHeard.AddInsertHandler(Ubisense.UPresence.Association.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UPresence.Association.MessageWasHeard.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.MessageWasHeard.AddUpdateHandler(Ubisense.UPresence.Association.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UPresence.Association.MessageWasHeard.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.MessageWasHeard.AddDeleteHandler(Ubisense.UPresence.Association.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UPresence.Association.MessageWasHeard.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.MessageWasHeard.sensor_object_uplink_(Ubisense.UPresence.Association.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index sensor_object_uplink_. Each sensor-object pair is recorded only once for each kind of message.  </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.MessageWasHeard.sensor_object_uplink_(Ubisense.UPresence.Association.ReadTransaction,Ubisense.ULocationIntegration.Sensor)">
      <summary>Iterate over the elements of the table that match the first argument of the index sensor_object_uplink_. Each sensor-object pair is recorded only once for each kind of message.  </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.MessageWasHeard.sensor_object_uplink_(Ubisense.UPresence.Association.ReadTransaction,Ubisense.ULocationIntegration.Sensor,Ubisense.UBase.UObject)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index sensor_object_uplink_. Each sensor-object pair is recorded only once for each kind of message.  </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.MessageWasHeard.sensor_object_uplink_(Ubisense.UPresence.Association.ReadTransaction,Ubisense.ULocationIntegration.Sensor,Ubisense.UBase.UObject,System.Byte)">
      <summary>Iterate over the elements of the table defined by the first 3 arguments of the index sensor_object_uplink_. Each sensor-object pair is recorded only once for each kind of message.  </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.MessageWasHeard.object_uplink_(Ubisense.UPresence.Association.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index object_uplink_. There can be several different entries for each object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.MessageWasHeard.object_uplink_(Ubisense.UPresence.Association.ReadTransaction,Ubisense.UBase.UObject)">
      <summary>Iterate over the elements of the table that match the first argument of the index object_uplink_. There can be several different entries for each object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.MessageWasHeard.object_uplink_(Ubisense.UPresence.Association.ReadTransaction,Ubisense.UBase.UObject,System.Byte)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index object_uplink_. There can be several different entries for each object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UPresence.Association.MessageWasHeard.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Association.MessageWasHeard.RowType.object_">
      <summary>The tag, or object owning a tag, that sent the radio beacon. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Association.MessageWasHeard.RowType.sensor_">
      <summary>The sensor that heard the radio beacon.  </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Association.MessageWasHeard.RowType.uplink_">
      <summary>True if this is an uplink, false if it is a chirp. This is a character instead of a boolean because it needs to be in the key and boolean types do not have an ordering relation defined in C#. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Association.MessageWasHeard.RowType.sleeping_">
      <summary>True if tag was sleeping when it created the message. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Association.MessageWasHeard.RowType.trembling_">
      <summary>True if tag was moving when it created the message. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Association.MessageWasHeard.RowType.rssi_">
      <summary>The signal strength of the tag's radio signal in dBm. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Association.MessageWasHeard.RowType.timestamp_">
      <summary>When the tag's radio beacon was heard. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPresence.Association.MessageWasHeard.RowType.#ctor(Ubisense.UBase.UObject,Ubisense.ULocationIntegration.Sensor,System.Byte,System.Boolean,System.Boolean,System.Int32,System.DateTime)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UPresence.Association.MessageWasHeard.___lop_key_sensor_object_uplink_">
      <summary>The lex-ordered prefixable key for the index sensor_object_uplink_</summary>
    </member>
    <member name="T:Ubisense.UPresence.Association.MessageWasHeard.___lop_cmp_sensor_object_uplink_">
      <summary>The ordering for the index sensor_object_uplink_</summary>
    </member>
    <member name="M:Ubisense.UPresence.Association.MessageWasHeard.___lop_cmp_sensor_object_uplink_.Compare(Ubisense.UPresence.Association.MessageWasHeard.___lop_key_sensor_object_uplink_,Ubisense.UPresence.Association.MessageWasHeard.___lop_key_sensor_object_uplink_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPresence.Association.MessageWasHeard.___lop_key_object_uplink_">
      <summary>The lex-ordered prefixable key for the index object_uplink_</summary>
    </member>
    <member name="T:Ubisense.UPresence.Association.MessageWasHeard.___lop_cmp_object_uplink_">
      <summary>The ordering for the index object_uplink_</summary>
    </member>
    <member name="M:Ubisense.UPresence.Association.MessageWasHeard.___lop_cmp_object_uplink_.Compare(Ubisense.UPresence.Association.MessageWasHeard.___lop_key_object_uplink_,Ubisense.UPresence.Association.MessageWasHeard.___lop_key_object_uplink_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPresence.Configuration.PresenceCellHasSensors.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Configuration.PresenceCellHasSensors.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UPresence.Configuration.PresenceCellHasSensors.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Configuration.PresenceCellHasSensors.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UPresence.Configuration.PresenceCellHasSensors.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Configuration.PresenceCellHasSensors.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UPresence.Configuration.PresenceCellHasSensors.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Configuration.PresenceCellHasSensors.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPresence.Configuration.TypeHasLocationPolicy.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Configuration.TypeHasLocationPolicy.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UPresence.Configuration.TypeHasLocationPolicy.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Configuration.TypeHasLocationPolicy.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UPresence.Configuration.TypeHasLocationPolicy.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Configuration.TypeHasLocationPolicy.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UPresence.Configuration.TypeHasLocationPolicy.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Configuration.TypeHasLocationPolicy.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPresence.Configuration.ServiceHasOptions.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Configuration.ServiceHasOptions.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UPresence.Configuration.ServiceHasOptions.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Configuration.ServiceHasOptions.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UPresence.Configuration.ServiceHasOptions.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Configuration.ServiceHasOptions.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UPresence.Configuration.ServiceHasOptions.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.Configuration.ServiceHasOptions.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.Schema">
      <summary>The Ubisense.UPresence.Configuration schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.UPresence.Configuration.Schema._rxpo">
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.Schema.set_option(System.String,System.String)">
      <summary>Set the service option <i>option</i> to <i>value</i>.  This may or may not have an effect, depending on the option and value selected. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="option">The option to set </param>
      <param name="value">The value to assign to the option </param>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.Schema.delete_presence_cell(Ubisense.UPresence.PresenceCell)">
      <summary>Delete a presence cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="cell">The cell </param>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.Schema.add_presence_cell_sensor(Ubisense.UPresence.PresenceCell,Ubisense.ULocationIntegration.Sensor)">
      <summary>Add a sensor to a presence cell.  If the sensor is already in another presence cell, it will be moved into this cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="cell">The cell </param>
      <param name="sensor">The sensor to be added to the cell </param>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.Schema.delete_presence_cell_sensor(Ubisense.ULocationIntegration.Sensor)">
      <summary>Delete a sensor from its presence cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="sensor">The sensor to be deleted from its cell </param>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.Schema.set_location_policy(Ubisense.UCell.Cell,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Ubisense.UBase.Symbol,System.UInt32,System.TimeSpan,System.String)">
      <summary>Set the location policy for a cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="cell">The cell that will generate the location.  This could be a Presence cell (and its population will come from the PresenceCellHasSensors relation in this schema), or a sensor cell (and its population will be the sensors in that cell), or a location cell (and its population will be the sensors in the sensor cells in that cell). </param>
      <param name="uplinks">Use uplinks to generate the location data. </param>
      <param name="chirps">Use chirps to generate the location data. </param>
      <param name="sleeping">Inject if the messages are sleeping. </param>
      <param name="non_sleeping">Inject if the messages are non-sleeping. </param>
      <param name="type">Locations will only be injected for tags that are owned by descendants of this type. </param>
      <param name="minimum_sensors">Only inject locations if there are at minimum least this number of messages in this cell in the time interval specified by <i>interval_threshold</i>. </param>
      <param name="interval_threshold">The minimum age of location data that will be overridden by an injection of a location event for this sensor. </param>
      <param name="method">The method to use for injection of location data.  This will always  correspond to the value of a 'ServiceHasOptions' entry for the  value of 'Injection Method' </param>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.Schema.delete_location_policy(Ubisense.UCell.Cell,Ubisense.UBase.Symbol)">
      <summary>Delete the location policy for a cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="cell">The cell whose policy to delete. </param>
      <param name="type">The type whose policy to delete. </param>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.Schema.set_aging_policy(Ubisense.UCell.Cell,Ubisense.UBase.Symbol,System.Boolean,System.Boolean,System.Double)">
      <summary>Set the specified aging policy  </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="cell">The cell under which the policy applies. </param>
      <param name="type">The type for which the policy applies. </param>
      <param name="presence">This data is specifying the policy for presence. </param>
      <param name="location">This data is specifying the policy for location. </param>
      <param name="time_threshold">The timeout limit beyond which the object becomes a candidate for timeout. </param>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.Schema.delete_aging_policy(Ubisense.UCell.Cell,Ubisense.UBase.Symbol,System.Boolean,System.Boolean)">
      <summary>Delete the specified aging policy. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="cell">The cell for which the policy applies. </param>
      <param name="type">The type for which the policy applies. </param>
      <param name="presence">This data is specifying the policy for presence. </param>
      <param name="location">This data is specifying the policy for location. </param>
    </member>
    <member name="P:Ubisense.UPresence.Configuration.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.UPresence.Configuration.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.PresenceCellHasSensors">
      <summary>A relation describing the set of sensors that a Presence cell contains.  The Presence cell will also be within the cell hierarchy and so  its properties will be editable using the Site Manager tool.  A presence cell may overlap sensor cells but must be contained within a location cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.PresenceCellHasSensors.AddInsertHandler(Ubisense.UPresence.Configuration.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UPresence.Configuration.PresenceCellHasSensors.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.PresenceCellHasSensors.AddUpdateHandler(Ubisense.UPresence.Configuration.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UPresence.Configuration.PresenceCellHasSensors.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.PresenceCellHasSensors.AddDeleteHandler(Ubisense.UPresence.Configuration.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UPresence.Configuration.PresenceCellHasSensors.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.PresenceCellHasSensors.cell_(Ubisense.UPresence.Configuration.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index cell_. Cells can contain more than one sensor. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.PresenceCellHasSensors.cell_(Ubisense.UPresence.Configuration.ReadTransaction,Ubisense.UPresence.PresenceCell)">
      <summary>Iterate over the elements of the table that match the first argument of the index cell_. Cells can contain more than one sensor. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.PresenceCellHasSensors.sensor_(Ubisense.UPresence.Configuration.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index sensor_. Sensors can only be in one cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.PresenceCellHasSensors.sensor_(Ubisense.UPresence.Configuration.ReadTransaction,Ubisense.ULocationIntegration.Sensor)">
      <summary>Iterate over the elements of the table that match the first argument of the index sensor_. Sensors can only be in one cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.PresenceCellHasSensors.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Configuration.PresenceCellHasSensors.RowType.cell_">
      <summary>The cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Configuration.PresenceCellHasSensors.RowType.sensor_">
      <summary>The sensor that is in the cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.PresenceCellHasSensors.RowType.#ctor(Ubisense.UPresence.PresenceCell,Ubisense.ULocationIntegration.Sensor)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.PresenceCellHasSensors.___lop_key_cell_">
      <summary>The lex-ordered prefixable key for the index cell_</summary>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.PresenceCellHasSensors.___lop_cmp_cell_">
      <summary>The ordering for the index cell_</summary>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.PresenceCellHasSensors.___lop_cmp_cell_.Compare(Ubisense.UPresence.Configuration.PresenceCellHasSensors.___lop_key_cell_,Ubisense.UPresence.Configuration.PresenceCellHasSensors.___lop_key_cell_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.PresenceCellHasSensors.___lop_key_sensor_">
      <summary>The lex-ordered prefixable key for the index sensor_</summary>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.PresenceCellHasSensors.___lop_cmp_sensor_">
      <summary>The ordering for the index sensor_</summary>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.PresenceCellHasSensors.___lop_cmp_sensor_.Compare(Ubisense.UPresence.Configuration.PresenceCellHasSensors.___lop_key_sensor_,Ubisense.UPresence.Configuration.PresenceCellHasSensors.___lop_key_sensor_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.TypeHasLocationPolicy">
      <summary>A relation governing how to inject location events for a specific cell.  If there is no entry for a given cell then location events will not be generated for it, although if there is an entry for one of its children then location events may still be generated in it.  Policies can be inherited using the well-known inheritance semantics: If an injection policy applies to some type then it also applies to all of the descendant types, unless overridden by a new policy at a descendant type, in which case the new policy applies to that type.  Because multiple inheritance is supported in Ubisense there is also a mechanism for disambiguating repeated inheritance: if a type has more than one ancestor, and more than one of its ancestors have an aging policy, and some of the ancestors are unconnected by any inheritance relationship themselves then the ancestor whose name is lexicographically earliest passes its policy to the descendant type.  Policies are restricted to the set of cells that are in any sense relevant to the location cell in which the policy is evaluated. So if a policy P is defined for type X at Site level but is then overridden by polcy P' for type X in location cell A, P still applies for type X in other location cells.  The tag will be placed at a position given by some interpolation of the positions of the sensors used by this sensor, weighted using the rssi values, to implement a very lo-fi location algorithm.  The algorithm will place the tag at a position within the extent of the specified cell. It will also randomize the position to ensure that we don't get the same value for many different tags.  Location data will only be injected for a tag that has not been seen for at least <i>interval_threshold_</i> seconds.  In injecting the data the service will only use message information that was received  after the current timestamp for the object.  That is, if the object was seen at time <i>t</i>, location data will not be injected until <i>t + interval_threshold_</i> and there will be no location data generated unless some eligible message data has been received since <i>t</i>. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasLocationPolicy.AddInsertHandler(Ubisense.UPresence.Configuration.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UPresence.Configuration.TypeHasLocationPolicy.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasLocationPolicy.AddUpdateHandler(Ubisense.UPresence.Configuration.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UPresence.Configuration.TypeHasLocationPolicy.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasLocationPolicy.AddDeleteHandler(Ubisense.UPresence.Configuration.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UPresence.Configuration.TypeHasLocationPolicy.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasLocationPolicy.type_cell_(Ubisense.UPresence.Configuration.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index type_cell_. Cells have only one policy for injecting locations for each type. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasLocationPolicy.type_cell_(Ubisense.UPresence.Configuration.ReadTransaction,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table that match the first argument of the index type_cell_. Cells have only one policy for injecting locations for each type. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasLocationPolicy.type_cell_(Ubisense.UPresence.Configuration.ReadTransaction,Ubisense.UBase.Symbol,Ubisense.UCell.Cell)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index type_cell_. Cells have only one policy for injecting locations for each type. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.TypeHasLocationPolicy.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Configuration.TypeHasLocationPolicy.RowType.type_">
      <summary>Locations will only be injected for objects that are descendants of this type. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Configuration.TypeHasLocationPolicy.RowType.cell_">
      <summary>The cell that will generate the location.  This could be a Presence cell (and its population will come from the CellHasSensors relation in this schema), or a sensor cell (and its population will be the sensors in that cell), or a location cell (and its population will be the sensors in the sensor cells in that cell). </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Configuration.TypeHasLocationPolicy.RowType.uplinks_">
      <summary>Use uplinks to generate the location data. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Configuration.TypeHasLocationPolicy.RowType.chirps_">
      <summary>Use chirps to generate the location data. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Configuration.TypeHasLocationPolicy.RowType.sleeping_">
      <summary>Inject if the messages are sleeping. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Configuration.TypeHasLocationPolicy.RowType.non_sleeping_">
      <summary>Inject if the messages are non-sleeping. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Configuration.TypeHasLocationPolicy.RowType.minimum_sensors_">
      <summary>Only inject locations if there are at minimum least this number of messages in this cell in the time interval specified by <i>interval_threshold_</i>. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Configuration.TypeHasLocationPolicy.RowType.interval_threshold_">
      <summary>The minimum age of location data that will be overridden by an  injection of a location event for this sensor. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Configuration.TypeHasLocationPolicy.RowType.method_">
      <summary>The method to use for injection of location data.  This will always  correspond to the value of a 'ServiceHasOptions' entry for the  value of 'Injection Method' </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasLocationPolicy.RowType.#ctor(Ubisense.UBase.Symbol,Ubisense.UCell.Cell,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UInt32,System.TimeSpan,System.String)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.TypeHasLocationPolicy.___lop_key_type_cell_">
      <summary>The lex-ordered prefixable key for the index type_cell_</summary>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.TypeHasLocationPolicy.___lop_cmp_type_cell_">
      <summary>The ordering for the index type_cell_</summary>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasLocationPolicy.___lop_cmp_type_cell_.Compare(Ubisense.UPresence.Configuration.TypeHasLocationPolicy.___lop_key_type_cell_,Ubisense.UPresence.Configuration.TypeHasLocationPolicy.___lop_key_type_cell_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy">
      <summary>A relation governing how location data is aged out.  Aging will occur within the extent specified by the cell, and  for all objects whose type inherits from the specified type.  For example, if there is an entry <i>(Site,"UBase::Object",true,true,t)</i>, then there will be a 'default' aging policy to age out locations data that covers every object over the whole space.  Policies can be inherited using the well-known inheritance semantics: If an aging policy applies to some type then it also applies to all of the descendant types, unless overridden by a new policy at a descendant type, in which case the new policy applies to that type.  Because multiple inheritance is supported in Ubisense there is also a mechanism for disambiguating repeated inheritance: if a type has more than one ancestor, and more than one of its ancestors have an aging policy, and some of the ancestors are unconnected by any inheritance relationship themselves then the ancestor whose name is lexicographically earliest passes its policy to the descendant type.  Policies are restricted to the set of cells that are in any sense relevant to the location cell in which the policy is evaluated. So if a policy P is defined for type X at Site level but is then overridden by polcy P' for type X in location cell A, P still applies for type X in other location cells.  Where multiple policies are applicable the policy at the smallest cell will be applied.  It is possible to specify aging policies at sensor cells and  presence cells, but care should be taken that this is not done to excess because no special mechanisms will be used to ensure that the policy is applied in a way that scales with the number of policies specified.  Thus a few uses of sensor cell and presence cell policies in each location cell would be OK, but many would not.  Because presence cells and sensor cells can overlap it is possible for an object to have more than one aging policy within the overlap in which case the minimum time applies. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.AddInsertHandler(Ubisense.UPresence.Configuration.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.AddUpdateHandler(Ubisense.UPresence.Configuration.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.AddDeleteHandler(Ubisense.UPresence.Configuration.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.type_cell_(Ubisense.UPresence.Configuration.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index type_cell_. There can only be one policy for a given type in a given cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.type_cell_(Ubisense.UPresence.Configuration.ReadTransaction,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table that match the first argument of the index type_cell_. There can only be one policy for a given type in a given cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.type_cell_(Ubisense.UPresence.Configuration.ReadTransaction,Ubisense.UBase.Symbol,Ubisense.UCell.Cell)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index type_cell_. There can only be one policy for a given type in a given cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.RowType.type_">
      <summary>The type for which the policy applies. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.RowType.cell_">
      <summary>The cell under which the policy applies. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.RowType.time_threshold_">
      <summary>The timeout limit beyond which the object becomes a candidate for timeout. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.RowType.#ctor(Ubisense.UBase.Symbol,Ubisense.UCell.Cell,System.TimeSpan)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.___lop_key_type_cell_">
      <summary>The lex-ordered prefixable key for the index type_cell_</summary>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.___lop_cmp_type_cell_">
      <summary>The ordering for the index type_cell_</summary>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.___lop_cmp_type_cell_.Compare(Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.___lop_key_type_cell_,Ubisense.UPresence.Configuration.TypeHasLocationAgingPolicy.___lop_key_type_cell_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy">
      <summary>A relation governing how presence data is aged out.  Aging will occur for the sensors owned by the cell, and for all objects whose type inherits from the specified type.  For example, if there is an entry <i>(Site,"UBase::Object",true,true,t)</i>, then there will be a 'default' aging policy to age out presence data that covers every object over the whole space.  Policies can be inherited using the well-known inheritance semantics: If an aging policy applies to some type then it also applies to all of the descendant types, unless overridden by a new policy at a descendant type, in which case the new policy applies to that type. Because multiple inheritance is supported in Ubisense there is also a mechanism for disambiguating repeated inheritance: if a type has more than one ancestor, and more than one of its ancestors have an aging policy, and some of the ancestors are unconnected by any inheritance relationship themselves then the ancestor whose name is lexicographically earliest passes its policy to the descendant type.  Policies are restricted to the set of cells that are in any sense relevant to the location cell in which the policy is evaluated. So if a policy P is defined for type X at Site level but is then overridden by polcy P' for type X in location cell A, P still applies for type X in other location cells.  Where multiple policies are applicable the earliest will be applied.  It is possible to specify aging policies at sensor cells and presence cells, but care should be taken that this is not done to excess because no special mechanisms will be used to ensure that the policy is applied in a way that scales with the number of policies specified.  Thus a few uses of sensor cell and presence cell policies in each location cell would be OK, but many would not.  Because presence cells and sensor cells can overlap it is possible for an object to have more than one aging policy within the overlap in which case the minimum time applies. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.AddInsertHandler(Ubisense.UPresence.Configuration.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.AddUpdateHandler(Ubisense.UPresence.Configuration.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.AddDeleteHandler(Ubisense.UPresence.Configuration.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.type_cell_(Ubisense.UPresence.Configuration.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index type_cell_. There can only be one policy for a given type in a given cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.type_cell_(Ubisense.UPresence.Configuration.ReadTransaction,Ubisense.UBase.Symbol)">
      <summary>Iterate over the elements of the table that match the first argument of the index type_cell_. There can only be one policy for a given type in a given cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.type_cell_(Ubisense.UPresence.Configuration.ReadTransaction,Ubisense.UBase.Symbol,Ubisense.UCell.Cell)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index type_cell_. There can only be one policy for a given type in a given cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.RowType.type_">
      <summary>The type for which the policy applies. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.RowType.cell_">
      <summary>The cell under which the policy applies. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.RowType.time_threshold_">
      <summary>The timeout limit beyond which the object becomes a candidate for timeout. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.RowType.#ctor(Ubisense.UBase.Symbol,Ubisense.UCell.Cell,System.TimeSpan)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.___lop_key_type_cell_">
      <summary>The lex-ordered prefixable key for the index type_cell_</summary>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.___lop_cmp_type_cell_">
      <summary>The ordering for the index type_cell_</summary>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.___lop_cmp_type_cell_.Compare(Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.___lop_key_type_cell_,Ubisense.UPresence.Configuration.TypeHasPresenceAgingPolicy.___lop_key_type_cell_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.ServiceHasOptions">
      <summary>A set of options governing presence service behaviour. This will contain a list of the current option strings supported. All the available options will always be present in this list. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.ServiceHasOptions.AddInsertHandler(Ubisense.UPresence.Configuration.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UPresence.Configuration.ServiceHasOptions.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.ServiceHasOptions.AddUpdateHandler(Ubisense.UPresence.Configuration.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UPresence.Configuration.ServiceHasOptions.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.ServiceHasOptions.AddDeleteHandler(Ubisense.UPresence.Configuration.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UPresence.Configuration.ServiceHasOptions.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.ServiceHasOptions.option_(Ubisense.UPresence.Configuration.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index option_. Each option can have more than one value. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.ServiceHasOptions.option_(Ubisense.UPresence.Configuration.ReadTransaction,System.String)">
      <summary>Iterate over the elements of the table that match the first argument of the index option_. Each option can have more than one value. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.ServiceHasOptions.option_(Ubisense.UPresence.Configuration.ReadTransaction,System.String,System.String)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index option_. Each option can have more than one value. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.ServiceHasOptions.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Configuration.ServiceHasOptions.RowType.option_">
      <summary>The option to set.  </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.Configuration.ServiceHasOptions.RowType.value_">
      <summary>The value. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.ServiceHasOptions.RowType.#ctor(System.String,System.String)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.ServiceHasOptions.___lop_key_option_">
      <summary>The lex-ordered prefixable key for the index option_</summary>
    </member>
    <member name="T:Ubisense.UPresence.Configuration.ServiceHasOptions.___lop_cmp_option_">
      <summary>The ordering for the index option_</summary>
    </member>
    <member name="M:Ubisense.UPresence.Configuration.ServiceHasOptions.___lop_cmp_option_.Compare(Ubisense.UPresence.Configuration.ServiceHasOptions.___lop_key_option_,Ubisense.UPresence.Configuration.ServiceHasOptions.___lop_key_option_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPresence.SiteActivity.ObjectIsActive.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.SiteActivity.ObjectIsActive.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UPresence.SiteActivity.ObjectIsActive.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.SiteActivity.ObjectIsActive.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UPresence.SiteActivity.ObjectIsActive.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.SiteActivity.ObjectIsActive.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UPresence.SiteActivity.ObjectIsActive.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPresence.SiteActivity.ObjectIsActive.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UPresence.SiteActivity.Schema">
      <summary>The Ubisense.UPresence.SiteActivity schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.UPresence.SiteActivity.Schema._rxpo">
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UPresence.SiteActivity.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.UPresence.SiteActivity.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UPresence.SiteActivity.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UPresence.SiteActivity.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UPresence.SiteActivity.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UPresence.SiteActivity.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.UPresence.SiteActivity.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UPresence.SiteActivity.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UPresence.SiteActivity.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.SiteActivity.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.SiteActivity.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="P:Ubisense.UPresence.SiteActivity.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.UPresence.SiteActivity.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.UPresence.SiteActivity.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.UPresence.SiteActivity.ObjectIsActive">
      <summary>A relation listing the objects present on the Site, where each object resident in a <i>MessageWasHeard</i> relation for a location cell is recorded.  This is kept up to date by the services that maintain the <i>MessageWasHeard</i> relation. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UPresence.SiteActivity.ObjectIsActive.AddInsertHandler(Ubisense.UPresence.SiteActivity.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UPresence.SiteActivity.ObjectIsActive.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.SiteActivity.ObjectIsActive.AddUpdateHandler(Ubisense.UPresence.SiteActivity.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UPresence.SiteActivity.ObjectIsActive.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.SiteActivity.ObjectIsActive.AddDeleteHandler(Ubisense.UPresence.SiteActivity.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UPresence.SiteActivity.ObjectIsActive.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPresence.SiteActivity.ObjectIsActive.object_(Ubisense.UPresence.SiteActivity.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index object_. Each object has only one possible entry. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPresence.SiteActivity.ObjectIsActive.object_(Ubisense.UPresence.SiteActivity.ReadTransaction,Ubisense.UBase.UObject)">
      <summary>Iterate over the elements of the table that match the first argument of the index object_. Each object has only one possible entry. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UPresence.SiteActivity.ObjectIsActive.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.SiteActivity.ObjectIsActive.RowType.object_">
      <summary>The object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.SiteActivity.ObjectIsActive.RowType.cell_">
      <summary>The cell currently managing the object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPresence.SiteActivity.ObjectIsActive.RowType.timestamp_">
      <summary>When the cell began to manage the object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPresence.SiteActivity.ObjectIsActive.RowType.#ctor(Ubisense.UBase.UObject,Ubisense.UCell.Cell,System.DateTime)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UPresence.SiteActivity.ObjectIsActive.___lop_key_object_">
      <summary>The lex-ordered prefixable key for the index object_</summary>
    </member>
    <member name="T:Ubisense.UPresence.SiteActivity.ObjectIsActive.___lop_cmp_object_">
      <summary>The ordering for the index object_</summary>
    </member>
    <member name="M:Ubisense.UPresence.SiteActivity.ObjectIsActive.___lop_cmp_object_.Compare(Ubisense.UPresence.SiteActivity.ObjectIsActive.___lop_key_object_,Ubisense.UPresence.SiteActivity.ObjectIsActive.___lop_key_object_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.Widgets.BufferedListView">
      <summary>
            A flicker-free list view.
            Uses double-buffered drawing to remove flicker.
            </summary>
    </member>
    <member name="F:Ubisense.Widgets.BufferedListView.components">
      <summary>
            Required designer variable.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.BufferedListView.#ctor">
      <summary>
            Construct a BufferedListView
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.BufferedListView.OnNotifyMessage(System.Windows.Forms.Message)">
      <summary>
            Called when a message is received
            </summary>
      <param name="m"></param>
    </member>
    <member name="M:Ubisense.Widgets.BufferedListView.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
      <summary>
            Called when the background is painted
            </summary>
      <param name="pea">The PaintEventArgs</param>
    </member>
    <member name="M:Ubisense.Widgets.BufferedListView.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
            Called when the control is painted
            </summary>
      <param name="pea">The PaintEventArgs</param>
    </member>
    <member name="M:Ubisense.Widgets.BufferedListView.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.BufferedListView.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="T:Ubisense.Widgets.ComboBoxDesigner">
      <summary>
            Provides design-time support for combo-box-like controls.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.ComboBoxDesigner.SnapLines">
      <summary>
            Supplements the default SnapLines with the baseline of the text in the combo box.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.ComboBoxDesigner.SelectionRules">
      <summary>
            Changes the selection handles to make it clear the height cannot be changed.
            </summary>
    </member>
    <member name="T:Ubisense.Widgets.EventProxy`1">
      <summary>
            Base class for a proxy for insert/update/delete events. Since you
            cannot remove a listener from these events once it is registered, you
            can use one of these instead. Construct it at the start of your
            program, connect it to the real events coming from the relation, and
            then add and remove your short-lived event handlers to this in the
            usual .NET way.
            </summary>
      <typeparam name="Rowtype">The type of rows in the relation.</typeparam>
    </member>
    <member name="F:Ubisense.Widgets.EventProxy`1.InsertHandler">
      <summary>
            This handler receives insert events and fires the <c>Insert</c> event.
            Pass this exactly once to AddInsertHandler on the appropriate relation.
            </summary>
    </member>
    <member name="F:Ubisense.Widgets.EventProxy`1.DeleteHandler">
      <summary>
            This handler receives delete events and fires the <c>Delete</c> event.
            Pass this exactly once to AddInsertHandler on the appropriate relation.
            </summary>
    </member>
    <member name="F:Ubisense.Widgets.EventProxy`1.UpdateHandler">
      <summary>
            This handler receives update events and fires the <c>Update</c> event.
            Pass this exactly once to AddInsertHandler on the appropriate relation.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.EventProxy`1.#ctor">
      <summary>
            Construct an EventProxy, initializing its handlers.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.EventProxy`1.#ctor(Ubisense.Widgets.EventProxy{`0}.HandlerConnector)">
      <summary>
             Construct an EventProxy, initializing its handlers and connecting them.
             The supplied delegate will be called with the EventProxy's internal
             event handlers as arguments, and should register them with the
             appropriate relation on the schema.
            
             Must not be NULL.
             </summary>
    </member>
    <member name="M:Ubisense.Widgets.EventProxy`1.OnInsert(`0)">
      <summary>
            Invokes the Insert event, discarding any exceptions.
            </summary>
      <param name="row">The inserted row.</param>
    </member>
    <member name="M:Ubisense.Widgets.EventProxy`1.OnDelete(`0)">
      <summary>
            Invokes the Delete event, discarding any exceptions.
            </summary>
      <param name="row">The deleted row.</param>
    </member>
    <member name="M:Ubisense.Widgets.EventProxy`1.OnUpdate(`0,`0)">
      <summary>
            Invokes the Update event, discarding any exceptions.
            </summary>
      <param name="old_row">The row as it was before the update.</param>
      <param name="new_row">The row after the update.</param>
    </member>
    <member name="E:Ubisense.Widgets.EventProxy`1.Insert">
      <summary>
            This event will fire when a row is added to the relation.
            </summary>
    </member>
    <member name="E:Ubisense.Widgets.EventProxy`1.Delete">
      <summary>
            This event will fire when a row is removed from the relation.
            </summary>
    </member>
    <member name="E:Ubisense.Widgets.EventProxy`1.Update">
      <summary>
            This event will fire when a row is updated in-place.
            </summary>
    </member>
    <member name="T:Ubisense.Widgets.EventProxy`1.HandlerConnector">
      <summary>
            A delegate of this type can be passed to the ctor. It will be
            called with the EventProxy's three event handlers as arguments, and
            should register them with the appropriate relation on the schema.
            </summary>
    </member>
    <member name="T:Ubisense.Widgets.IsIsNotComboBox">
      <summary>
            Shows a two-item combo box used to input and display a Boolean.
            </summary>
    </member>
    <member name="T:Ubisense.Widgets.ISelector`1">
      <summary>
            Represents a GUI element the user can use to input or choose an element
            of a type. Code that needs to manage keeping selectors in sync with the
            Platform can use these elements in a generic fashion.
            </summary>
      <typeparam name="T">The type of object selected by this element.</typeparam>
    </member>
    <member name="T:Ubisense.Widgets.IValid">
      <summary>
            Represents a GUI element that has some notion of whether a selection is valid or not. In general, the element's result is only valid if the Valid property is true.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.IValid.Select">
      <summary>
            Draw the user's attention to this widget, usually by focusing the underlying control.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.IValid.Populate">
      <summary>
            Causes the widget to populate its list of valid items from the original source.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.IValid.Valid">
      <summary>
            Returns true iff there is a valid selection.
            </summary>
    </member>
    <member name="E:Ubisense.Widgets.IValid.ValueChanged">
      <summary>
            Signals that the widget's value has been changed by the user and is likely to need validating again.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.ISelector`1.Result">
      <summary>
            Gets or sets the currently selected item.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.IsIsNotComboBox.#ctor">
      <summary>
            Initializes the component.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.IsIsNotComboBox.OnValueChanged">
      <summary>
            Raises the ValueChanged event.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.IsIsNotComboBox.Populate">
      <summary>
            Does nothing.
            </summary>
    </member>
    <member name="F:Ubisense.Widgets.IsIsNotComboBox.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.IsIsNotComboBox.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:Ubisense.Widgets.IsIsNotComboBox.InitializeComponent">
      <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="F:Ubisense.Widgets.IsIsNotComboBox.combo">
      <summary>
            The combo box the user will interact with.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.IsIsNotComboBox.Ubisense#Widgets#IValid#Select">
      <summary>
            Shows a two-item combo box used to input and display a Boolean.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.IsIsNotComboBox.Result">
      <summary>
            Gets or sets the currently selected value.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.IsIsNotComboBox.Valid">
      <summary>
            Gets whether the currently selected value is valid: always returns true.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.IsIsNotComboBox.True">
      <summary>
            Gets or sets the display string for the 'true' value. Defaults to "is".
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.IsIsNotComboBox.False">
      <summary>
            Gets or sets the display string for the 'false' value. Defaults to "is not".
            </summary>
    </member>
    <member name="E:Ubisense.Widgets.IsIsNotComboBox.ValueChanged">
      <summary>
            Fired when the Result of this selector changes, either by user operation or by setting the property programmatically.
            </summary>
    </member>
    <member name="T:Ubisense.Widgets.OverlayForm">
      <summary>
            A form that can be used to display overlay components (components that float
            in front of windows)
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.OverlayForm.#ctor">
      <summary>
            Construct an OverlayForm
            </summary>
    </member>
    <member name="F:Ubisense.Widgets.OverlayForm.components">
      <summary>
            Required designer variable.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.OverlayForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:Ubisense.Widgets.OverlayForm.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="T:Ubisense.Widgets.CompletingTextEntry">
      <summary>
            A class that defines auto-completion based on a trie of suggestions, using
            a TextBoxBase as an target.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.CompletingTextEntry.#ctor(System.Windows.Forms.TextBoxBase,PublicUNET.Utils.Trie{System.Char})">
      <summary>
            Constructor.
            Creates a CompletingTextEntry object with the TextBoxBase box as the target
            and the completion_trie as a source for completion suggestions.
            </summary>
      <param name="box">The target</param>
      <param name="completion_trie">The source for completion suggestions</param>
    </member>
    <member name="M:Ubisense.Widgets.CompletingTextEntry.Finalize">
      <summary>
            Destructor
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.CompletingTextEntry.UpdateTextOnCompletion">
      <summary>
            You can override this to change the behaviour when a completion is accepted.
            This function usually accesses the completion that is selected, updates the
            text in the text_box_base member based on some logic, hides the menu and
            return the completion text.
            </summary>
      <returns>The completion used.</returns>
    </member>
    <member name="M:Ubisense.Widgets.CompletingTextEntry.ClearItems">
      <summary>
            Clears all items from the completion trie
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.CompletingTextEntry.AddItem(System.String)">
      <summary>
            Adds an item to the completion trie
            </summary>
      <param name="item"></param>
    </member>
    <member name="M:Ubisense.Widgets.CompletingTextEntry.RemoveItem(System.String)">
      <summary>
            Removes an item if the completion trie contains it
            </summary>
      <param name="item"></param>
    </member>
    <member name="M:Ubisense.Widgets.CompletingTextEntry.TrySelectItem(System.String)">
      <summary>
            If the item is in the current list of available suggestions, selects
            that item.
            </summary>
      <param name="item"></param>
      <returns></returns>
    </member>
    <member name="M:Ubisense.Widgets.CompletingTextEntry.ShowMenu">
      <summary>
            Shows the completion menu.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.CompletingTextEntry.HideMenu">
      <summary>
            Hides the completion menu.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.CompletingTextEntry.Enabled">
      <summary>
            Gets or sets whether the completion is enabled.
            </summary>
    </member>
    <member name="E:Ubisense.Widgets.CompletingTextEntry.CompletionAccepted">
      <summary>
            Event that occurs when a completion suggestion is accepted.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.CompletingTextEntry.CompleteKeys">
      <summary>
            Gets/sets the set of keys that trigger a completion
            </summary>
    </member>
    <member name="T:Ubisense.Widgets.CompletingTextEntry.CompletionAcceptedEventHandler">
      <summary>
            A handler that handles completion acceptance events.
            </summary>
      <param name="completion">The completion that was accepted</param>
      <param name="accept_key">The key that caused the acceptance</param>
    </member>
    <member name="T:Ubisense.Widgets.CompletingTextEntry.CTEMenu">
      <summary>
            The menu that is shown with completion suggestions
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.CompletingTextEntry.CTEMenu.#ctor(System.Windows.Forms.TextBoxBase)">
      <summary>
            Constructor
            </summary>
      <param name="textbox">The target TextBoxBase</param>
    </member>
    <member name="M:Ubisense.Widgets.CompletingTextEntry.CTEMenu.UpdateLocation">
      <summary>
            Updates the location of the menu
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.CompletingTextEntry.CTEMenu.ShowMenu">
      <summary>
            Show the menu
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.CompletingTextEntry.CTEMenu.ResizeToDesired">
      <summary>
            Call this to make the menu try to resize itself to its desired size
            (based on the number of suggestions), or the maximum height limit, whichever
            is smaller.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.CompletingTextEntry.CTEMenu.HideMenu">
      <summary>
            Hide the menu
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.CompletingTextEntry.CTEMenu.SelectNextSuggestion">
      <summary>
            Call to select the next suggestion.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.CompletingTextEntry.CTEMenu.SelectPreviousSuggestion">
      <summary>
            Call to select the previous suggestion.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.CompletingTextEntry.CTEMenu.TrySelectItem(System.String)">
      <summary>
            Selects an item iff the item is contained in the list of completion suggestions.
            </summary>
      <param name="item">The item to select</param>
      <returns>True iff the item was selected, false otherwise</returns>
    </member>
    <member name="P:Ubisense.Widgets.CompletingTextEntry.CTEMenu.Showing">
      <summary>
            Returns whether the menu is currently being shown.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.CompletingTextEntry.CTEMenu.MaxHeight">
      <summary>
            The maximum height of the menu.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.CompletingTextEntry.CTEMenu.TextBoxBase">
      <summary>
            The TextBoxBase which the menu should suggest completions for.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.CompletingTextEntry.CTEMenu.ListBox">
      <summary>
            The internal listbox
            </summary>
    </member>
    <member name="T:Ubisense.Widgets.SchemaEventProxy">
      <summary>
            A class that can be used to proxy Ubisense schema events and expose them as .NET events.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SchemaEventProxy.#ctor">
      <summary>
            Construct a SchemaEventProxy. If you want to proxy schema events, you
            should use the other constructor.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SchemaEventProxy.#ctor(Ubisense.Widgets.SchemaEventProxy.HandlerConnector)">
      <summary>
            Construct a SchemaEventProxy, which calls the HandlerConnector with
            its event handlers as arguments.
            </summary>
      <param name="connector">The HandlerConnector to call. Must not be null.</param>
    </member>
    <member name="E:Ubisense.Widgets.SchemaEventProxy.Establish">
      <summary>
            This event will fire when an establish event occurs on the proxy.
            </summary>
    </member>
    <member name="E:Ubisense.Widgets.SchemaEventProxy.Invalid">
      <summary>
            This event will fire when an invalid event occurs on the proxy.
            </summary>
    </member>
    <member name="E:Ubisense.Widgets.SchemaEventProxy.Commit">
      <summary>
            This event will fire when a commit event occurs on the proxy.
            </summary>
    </member>
    <member name="T:Ubisense.Widgets.SchemaEventProxy.HandlerConnector">
      <summary>
            A delegate of this type can be passed to the constuctor. It will be called with the
            SchemaEventProxy's events as the arguments and should register them with the
            appropriate schema events.
            </summary>
      <param name="est">The establish event handler.</param>
      <param name="inv">The invalid event handler</param>
      <param name="com">The commit event handler.</param>
    </member>
    <member name="T:Ubisense.Widgets.SpatialComboBox">
      <summary>
            Allows the user to pick a monitored spatial relation from a combo box that lists all such in the form "ContainerRole contains ContainedRole".
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SpatialComboBox.#ctor">
      <summary>
            Initializes the component.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SpatialComboBox.Populate">
      <summary>
            Fills the combo box with monitored relations. Called automatically when the relation changes.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SpatialComboBox.OnLoad(System.EventArgs)">
      <summary>
            Raises the <c>Load</c> event and connects the schema.
            </summary>
      <param name="e">Conveys no information.</param>
    </member>
    <member name="F:Ubisense.Widgets.SpatialComboBox.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SpatialComboBox.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:Ubisense.Widgets.SpatialComboBox.InitializeComponent">
      <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SpatialComboBox.Ubisense#Widgets#IValid#Select">
      <summary>
            Allows the user to pick a monitored spatial relation from a combo box that lists all such in the form "ContainerRole contains ContainedRole".
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.SpatialComboBox.Result">
      <summary>
            Gets or sets the selected spatial relation.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.SpatialComboBox.Valid">
      <summary>
            True iff there is a valid selection. Check this before getting <c>Result</c>.
            </summary>
    </member>
    <member name="E:Ubisense.Widgets.SpatialComboBox.ValueChanged">
      <summary>
            Raised when the value of <c>Result</c> changes.
            </summary>
    </member>
    <member name="T:Ubisense.Widgets.SpatialComboBox.MonitoredRelation">
      <summary>
            Contains the same data as <c>Ubisense.USpatial.Ownership.Relations.RowType</c>, but has a <c>ToString()</c> method that outputs the relation in the required form.
            </summary>
    </member>
    <member name="F:Ubisense.Widgets.SpatialComboBox.MonitoredRelation.Container">
      <summary>
            The container role.
            </summary>
    </member>
    <member name="F:Ubisense.Widgets.SpatialComboBox.MonitoredRelation.Contained">
      <summary>
            The contained role.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SpatialComboBox.MonitoredRelation.#ctor(Ubisense.UBase.Symbol,Ubisense.UBase.Symbol)">
      <summary>
            The constructor just initialises the fields in the obvious way.
            </summary>
      <param name="ctr">The container role.</param>
      <param name="ctd">The contained role.</param>
    </member>
    <member name="M:Ubisense.Widgets.SpatialComboBox.MonitoredRelation.ToString">
      <summary>
            Produces a string of the form "{Container} contains {Contained}"
            </summary>
      <returns>A string in the specified format.</returns>
    </member>
    <member name="T:Ubisense.Widgets.TextEntryDesigner">
      <summary>
            Provides design-time support for text-entry-like controls.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.TextEntryDesigner.SnapLines">
      <summary>
            Supplements the default SnapLines with one on the baseline of the text.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.TextEntryDesigner.SelectionRules">
      <summary>
            Removes the vertical size handles from the default SelectionRules.
            </summary>
    </member>
    <member name="T:Ubisense.Widgets.ImportAndExport">
      <summary>
            This class makes it easier to create a Windows Forms application with Open, Save, Save As functionality. It remembers the file being edited and handles displaying file dialogs as necessary.
            </summary>
    </member>
    <member name="F:Ubisense.Widgets.ImportAndExport.file">
      <summary>
            The file we are working on. There is only one shared between opening and saving because generally we want to use the same directory for both.
            </summary>
    </member>
    <member name="F:Ubisense.Widgets.ImportAndExport.dir">
      <summary>
            The directory we want the dialog boxen to start in.
            </summary>
    </member>
    <member name="F:Ubisense.Widgets.ImportAndExport.reg_key">
      <summary>
            Values are saved under this registry key to remember the most recently used directory. It is accessible via the <c>RegistryKey</c> property.
            </summary>
    </member>
    <member name="F:Ubisense.Widgets.ImportAndExport.reg_name">
      <summary>
             This is the name used for the registry value used to remember the MRU directory. It is accessible via the <c>RegistryValueName</c> property.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.ImportAndExport.#ctor">
      <summary>
            Default constructor, doesn't initialize the registry parameters. The other constructor is preferred, but when used as a component an empty constructor is required.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.ImportAndExport.#ctor(Microsoft.Win32.RegistryKey,System.String)">
      <summary>
            This constructor initializes the registry parameters with its arguments and loads the MRU directory.
            </summary>
      <param name="key">
        <c>RegistryKey</c> will be set to this value.</param>
      <param name="name">
        <c>RegistryValueName</c> will be set to this value.</param>
    </member>
    <member name="M:Ubisense.Widgets.ImportAndExport.New">
      <summary>
            Call this when the user clicks on the 'New' menu item or button. It resets the selected file name.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.ImportAndExport.Open">
      <summary>
            Call this when the user clicks on the 'Open' menu item or button, and then find the result in <c>FileName</c>.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.ImportAndExport.Save">
      <summary>
            Call this when the user clicks on the 'Save' menu item or button. If there is not already a file selected, it asks the user to do so. Then find the result in <c>FileName</c>.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.ImportAndExport.SaveAs">
      <summary>
            Call this when the user clicks on the 'Save As' menu item or button, and then find the result in <c>FileName</c>.
            </summary>
    </member>
    <member name="F:Ubisense.Widgets.ImportAndExport.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.ImportAndExport.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:Ubisense.Widgets.ImportAndExport.InitializeComponent">
      <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.ImportAndExport.RegistryKey">
      <summary>
            Gets or sets the <c>RegistryKey</c> used to remember the MRU directory.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.ImportAndExport.RegistryValueName">
      <summary>
            Gets or sets the name of the registry value used to remember the MRU directory.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.ImportAndExport.FileName">
      <summary>
            Gets the current path and file name.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.ImportAndExport.Filter">
      <summary>
            Gets or sets the file filters to display in the file dialogs.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.ImportAndExport.FilterIndex">
      <summary>
            Gets or sets the index of the file filter selected in the dialog box (one-indexed).
            </summary>
    </member>
    <member name="T:Ubisense.Widgets.NamedObjectComboBox">
      <summary>
            Allows the user to pick a named object from a combo box, optionally restricting by type.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.NamedObjectComboBox.#ctor">
      <summary>
            Default constructor: required for Component usage.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.NamedObjectComboBox.OnLoad(System.EventArgs)">
      <summary>
            Raises the Load event, and connects the Naming schema.
            </summary>
      <param name="e">Conveys no information.</param>
    </member>
    <member name="M:Ubisense.Widgets.NamedObjectComboBox.Populate">
      <summary>
            Fills the combo box with valid objects. Call this when the <c>NamedObjectComboBox</c> is first shown.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.NamedObjectComboBox.InternalPopulate(Ubisense.UName.Naming.ReadTransaction)">
      <summary>
            Must be called in the control's thread.
            </summary>
      <param name="xact">A read transaction on UName.Naming.</param>
    </member>
    <member name="M:Ubisense.Widgets.NamedObjectComboBox.OnValueChanged">
      <summary>
            Raises the <c>ValueChanged</c> event.
            </summary>
    </member>
    <member name="F:Ubisense.Widgets.NamedObjectComboBox.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.NamedObjectComboBox.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:Ubisense.Widgets.NamedObjectComboBox.InitializeComponent">
      <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.NamedObjectComboBox.Ubisense#Widgets#IValid#Select">
      <summary>
            Allows the user to pick a named object from a combo box, optionally restricting by type.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.NamedObjectComboBox.Valid">
      <summary>
            Returns true iff the value of <c>Result</c> is a valid selection of a named object of the required type.
            </summary>
    </member>
    <member name="E:Ubisense.Widgets.NamedObjectComboBox.ValueChanged">
      <summary>
            Raised when the value of Result changes.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.NamedObjectComboBox.Result">
      <summary>
            Gets or sets the selected object. If you set it to an invalid object (the nil object or one not in the list), the selection will be cleared.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.NamedObjectComboBox.BaseType">
      <summary>
            Gets or sets the base type. Only objects of this type (or a descendant of this type) will be listed. Defaults to UBase::Object, so all types will be shown.
            </summary>
    </member>
    <member name="T:Ubisense.Widgets.Properties.Resources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.Properties.Resources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.Properties.Resources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="T:Ubisense.UName.Naming.SharedSchema">
      <summary>
            Provides a <c>UName.Naming.Schema</c> object shared application-wide.
            </summary>
    </member>
    <member name="F:Ubisense.UName.Naming.SharedSchema.schema">
      <summary>
            The schema being managed.
            </summary>
    </member>
    <member name="F:Ubisense.UName.Naming.SharedSchema.sync">
      <summary>
            This object is used to lock <c>schema</c>.
            </summary>
    </member>
    <member name="P:Ubisense.UName.Naming.SharedSchema.Schema">
      <summary>
            Gets the schema, first connecting it if necessary.
            </summary>
    </member>
    <member name="P:Ubisense.UName.Naming.SharedSchema.HandleObjectName">
      <summary>
            Get the singleton event handle manager for the ObjectName relation, instantiating and connecting it if necessary.
            </summary>
    </member>
    <member name="T:Ubisense.USpatial.Ownership.SharedSchema">
      <summary>
            Provides a <c>USpatial.Ownership.Schema</c> object shared application-wide.
            </summary>
    </member>
    <member name="F:Ubisense.USpatial.Ownership.SharedSchema.schema">
      <summary>
            The schema being managed.
            </summary>
    </member>
    <member name="F:Ubisense.USpatial.Ownership.SharedSchema.sync">
      <summary>
            This object is used to lock <c>schema</c>.
            </summary>
    </member>
    <member name="P:Ubisense.USpatial.Ownership.SharedSchema.Schema">
      <summary>
            Gets the schema, first connecting it if necessary.
            </summary>
    </member>
    <member name="P:Ubisense.USpatial.Ownership.SharedSchema.HandleRelations">
      <summary>
            Get the singleton event handle manager for the Relations relation, instantiating and connecting it if necessary.
            </summary>
    </member>
    <member name="T:Ubisense.Widgets.SymbolComboBox">
      <summary>
            A combo box that lists Symbols and allows the user to pick one. This
            class adds to the normal ComboBox the code to fetch and put Symbols,
            and implements some Ubisense.Widgets interfaces for convenience.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SymbolComboBox.#ctor">
      <summary>
            Initializes this component.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SymbolComboBox.Default">
      <summary>
            Gives the default Symbol; i.e. the one that is selected when the control is first shown. This should be overridden by subclasses.
            </summary>
      <returns>The nil Symbol indicating that nothing is selected.</returns>
    </member>
    <member name="M:Ubisense.Widgets.SymbolComboBox.OnValueChanged">
      <summary>
            Raises the ValueChanged event.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SymbolComboBox.FetchValidItems">
      <summary>
            Used to fetch a list of valid symbols to be shown. This version
            produces the empty list, and subclasses should override it.
            </summary>
      <returns>A list of the string values of Symbols.</returns>
    </member>
    <member name="M:Ubisense.Widgets.SymbolComboBox.Populate">
      <summary>
            This should be called when the list box is first displayed. It
            fills the list with items to be selected. This method may be called
            from any thread.
            </summary>
    </member>
    <member name="F:Ubisense.Widgets.SymbolComboBox.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SymbolComboBox.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:Ubisense.Widgets.SymbolComboBox.InitializeComponent">
      <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="F:Ubisense.Widgets.SymbolComboBox.combo">
      <summary>
            The combo box the user will interact with.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SymbolComboBox.Ubisense#Widgets#IValid#Select">
      <summary>
            A combo box that lists Symbols and allows the user to pick one. This
            class adds to the normal ComboBox the code to fetch and put Symbols,
            and implements some Ubisense.Widgets interfaces for convenience.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.SymbolComboBox.Result">
      <summary>
            Gets or sets the selected Symbol.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.SymbolComboBox.Valid">
      <summary>
            Gets a value that indicates whether there is a valid selection. Iff this returns true, <c>Result</c> is valid.
            </summary>
    </member>
    <member name="E:Ubisense.Widgets.SymbolComboBox.ValueChanged">
      <summary>
            Fired when the Result of this selector changes, either by user operation or by setting the property programmatically.
            </summary>
    </member>
    <member name="T:Ubisense.Widgets.SymbolListBox">
      <summary>
            Shows a list of Symbols and allows the user to pick at most one.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SymbolListBox.#ctor">
      <summary>
            Initializes the component.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SymbolListBox.FetchValidItems">
      <summary>
            Used to fetch a list of valid symbols to be shown. This version
            produces the empty list, and subclasses should override it.
            </summary>
      <returns>A list of the string values of Symbols.</returns>
    </member>
    <member name="M:Ubisense.Widgets.SymbolListBox.Populate">
      <summary>
            This should be called when the list box is first displayed. It
            fills the list with items to be selected. This method may be called
            from any thread.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SymbolListBox.OnValueChanged">
      <summary>
            Raises the ValueChanged event.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SymbolListBox.Add(Ubisense.UBase.Symbol)">
      <summary>
            Add a new <c>Symbol</c> to the list box. Can be called from any thread.
            </summary>
      <param name="to_add">The <c>Symbol</c> to add.</param>
    </member>
    <member name="M:Ubisense.Widgets.SymbolListBox.Remove(Ubisense.UBase.Symbol)">
      <summary>
            Remove an existing <c>Symbol</c> from the list box. Can be called from any thread.
            </summary>
      <param name="to_remove">The <c>Symbol</c> to remove.</param>
    </member>
    <member name="F:Ubisense.Widgets.SymbolListBox.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SymbolListBox.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:Ubisense.Widgets.SymbolListBox.InitializeComponent">
      <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="F:Ubisense.Widgets.SymbolListBox.box">
      <summary>
            The list box the user will interact with.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SymbolListBox.Ubisense#Widgets#IValid#Select">
      <summary>
            Shows a list of Symbols and allows the user to pick at most one.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.SymbolListBox.Sorted">
      <summary>
            If this is set, the SymbolListBox will sort entries you have added.
            Otherwise, they will stay in the same order you add them.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.SymbolListBox.Result">
      <summary>
            Gets or sets the selected Symbol. If you set this to a Symbol that
            is not in the list, the selection will be cleared.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.SymbolListBox.Valid">
      <summary>
            Returns true if the user has selected a Symbol from the list. The
            value of Result is only valid if this is true.
            </summary>
    </member>
    <member name="E:Ubisense.Widgets.SymbolListBox.ValueChanged">
      <summary>
            Raised when the value of Result has changed.
            </summary>
    </member>
    <member name="T:Ubisense.Widgets.SymbolTextEntry">
      <summary>
            Provides a text-entry-like way of entering a Symbol. This class is essentially a TextBox control with some extra logic to handle converting to Symbols.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SymbolTextEntry.#ctor">
      <summary>
            Initializes the component.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SymbolTextEntry.Populate">
      <summary>
            Fetches the list of inputs to choose from. As a <c>TextBox</c> has no notion of a list, it does nothing for this class and derived classes.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SymbolTextEntry.OnValueChanged">
      <summary>
            Raises the ValueChanged event.
            </summary>
    </member>
    <member name="F:Ubisense.Widgets.SymbolTextEntry.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SymbolTextEntry.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:Ubisense.Widgets.SymbolTextEntry.InitializeComponent">
      <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.SymbolTextEntry.Ubisense#Widgets#IValid#Select">
      <summary>
            Provides a text-entry-like way of entering a Symbol. This class is essentially a TextBox control with some extra logic to handle converting to Symbols.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.SymbolTextEntry.Result">
      <summary>
            Gets or sets the result (i.e. the entered Symbol).
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.SymbolTextEntry.Valid">
      <summary>
            Returns true iff the entered Symbol is valid. Any text is valid for this widget unless <c>MustBeNonEmpty</c> is set, in which case leaving it empty is invalid.
            </summary>
    </member>
    <member name="P:Ubisense.Widgets.SymbolTextEntry.MustBeNonEmpty">
      <summary>
            Gets or sets a flag. If this flag is true, then the empty string or nil Symbol is not a valid input.
            </summary>
    </member>
    <member name="E:Ubisense.Widgets.SymbolTextEntry.ValueChanged">
      <summary>
            Raised when the result changes. Unlike listboxes and combo boxes, this is likely to occur frequently while the user is typing, so do not respond to this event by doing something that takes a long time.
            </summary>
    </member>
    <member name="T:Ubisense.Widgets.TypeComboBox">
      <summary>
            Displays a combo box that allows the user to select a type known to the Ubisense Platform.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.TypeComboBox.#ctor">
      <summary>
            Initialises this component.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.TypeComboBox.FetchValidItems">
      <summary>
            Discovers all suitable types. This function is called from the parent class SymbolComboBox.
            </summary>
      <returns>A list of strings, each of which represents a type.</returns>
    </member>
    <member name="M:Ubisense.Widgets.TypeComboBox.Default">
      <summary>
            Discovers the default selection. This function is called from the
            parent class SymbolComboBox and is used to determine which type
            will be selected when the TypeComboBox is first shown.
            </summary>
      <returns>The value of BaseType.</returns>
    </member>
    <member name="P:Ubisense.Widgets.TypeComboBox.BaseType">
      <summary>
            Gets or sets the type, only the descendents of which will be shown
            in the drop-down. Defaults to "UBase::Object". You must ensure that
            this is a type known to the Ubisense Platform.
            </summary>
    </member>
    <member name="T:Ubisense.Widgets.ParameterisedTypeCompletingTextEntry">
      <summary>
            This class will give type completions that include parameterised generic types,
            e.g. UBase.Map&lt;UBase.Int,ULocationEngine.Tag&gt;.
            By default the complete keys are . , enter and tab.
            </summary>
    </member>
    <member name="T:Ubisense.Widgets.TypeCompletingTextEntry">
      <summary>
            This class will give type completions in C# form (dot-separated namespace and type names).
            The completions will be suggested using the . character to split namespaces and types. For
            example, a trie with UBase.Bool and UBase.List in will initially suggest UBase when the 
            user types in U.
            The default completion keys are . enter and tab.
            </summary>
    </member>
    <member name="M:Ubisense.Widgets.TypeCompletingTextEntry.#ctor(System.Windows.Forms.TextBoxBase,PublicUNET.Utils.Trie{System.Char})">
      <summary>
            Constructor
            </summary>
      <param name="box">The TextBoxBase control to attach the completion suggestions to.</param>
      <param name="completion_trie">The Trie which contains the list of completion suggestions.</param>
    </member>
    <member name="M:Ubisense.Widgets.ParameterisedTypeCompletingTextEntry.#ctor(System.Windows.Forms.TextBoxBase,PublicUNET.Utils.Trie{System.Char})">
      <summary>
            Constructor
            </summary>
      <param name="box">The TextBoxBase control to attach the completion suggestions to.</param>
      <param name="completion_trie">The Trie which contains the list of completion suggestions.</param>
    </member>
  </members>
</doc>