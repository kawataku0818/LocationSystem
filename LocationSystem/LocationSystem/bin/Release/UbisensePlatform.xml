<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>UbisensePlatform</name>
  </assembly>
  <members>
    <member name="T:Ubisense.UCell.Cell">
      <summary>Any cell.  This object type is specialised for location cells (<i>ULocation.Cell</i>), geometry cells (<i>USpatial.Cell</i>) and so on. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UCell.Cell.op_Equality(Ubisense.UCell.Cell,Ubisense.UCell.Cell)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UCell.Cell.op_Inequality(Ubisense.UCell.Cell,Ubisense.UCell.Cell)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UCell.Cell.op_LessThan(Ubisense.UCell.Cell,Ubisense.UCell.Cell)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UCell.Cell.op_GreaterThan(Ubisense.UCell.Cell,Ubisense.UCell.Cell)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UCell.Cell.op_Implicit(Ubisense.UCell.Cell)~Ubisense.UBase.UObject">
      <summary>Implicit conversion operator to ancestor type global::Ubisense.UBase.UObject</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.Cell.#cctor">
      <summary>Initialise the Cell type</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UCell.Cell.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>Unsafe constructor to create an instance of type Cell with a specific state.
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            </summary>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UCell.Cell.#ctor(System.Boolean)">
      <summary>Create a new Cell instance that is either unique or nil</summary>
      <param name="unique">Make this instance unique</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UCell.Cell.Narrow(Ubisense.UBase.IObject)">
      <summary>Assign another object to this one if and only if the other object's dynamic type inherits from the static type of this instance</summary>
      <param name="other">The object to assign to this object</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UCell.Cell.Unique">
      <summary>Make this object into a new unique instance with DynamicType equal to Cell</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UCell.Cell.Nil">
      <summary>True iff this object is the nil instance of type Cell</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UCell.Cell.ToString">
      <summary>Returns a String representation of the value of this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UCell.Cell.ToString(System.String,System.IFormatProvider)">
      <summary>Equivalent to ToString()</summary>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UCell.Cell.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UCell.Cell.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UCell.Cell.CompareTo(Ubisense.UCell.Cell)">
      <summary>Compare this instance with 'other'</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UCell.Cell.Equals(Ubisense.UCell.Cell)">
      <summary>True if this instance equals obj</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UCell.Cell.StaticType">
      <summary>The statically-declared type of this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UCell.Cell.DynamicType">
      <summary>The most-derived dynamic type of this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UCell.Cell.Id">
      <summary>The id of this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="T:Ubisense.UCell.PolygonalPrism">
      <summary>A right-polygonal prism, used as the extent of cells and areas. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UCell.PolygonalPrism.polygon_">
      <summary>The horizontal extent is a polygon. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UCell.PolygonalPrism.zmin_">
      <summary>The minimum vertical extent. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UCell.PolygonalPrism.zmax_">
      <summary>The maximum vertical extent. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.PolygonalPrism.#ctor(System.Collections.Generic.List{Ubisense.UBase.Vector2D},System.Double,System.Double)">
      <summary>Create a new PolygonalPrism instance with all values specified</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UCell.Cell">
      <summary>Any cell.  This object type is specialised for location cells (<i>ULocation.Cell</i>), geometry cells (<i>USpatial.Cell</i>) and so on. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.Cell.Marshall(System.IO.BinaryWriter,Ubisense.UCell.Cell)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.Cell.Marshall(System.IO.BinaryWriter,Ubisense.UCell.Cell@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.Cell.Unmarshall(System.IO.BinaryReader,Ubisense.UCell.Cell@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.Cell.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UCell.PolygonalPrism">
      <summary>A right-polygonal prism, used as the extent of cells and areas. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.PolygonalPrism.Marshall(System.IO.BinaryWriter,Ubisense.UCell.PolygonalPrism)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.PolygonalPrism.Marshall(System.IO.BinaryWriter,Ubisense.UCell.PolygonalPrism@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.PolygonalPrism.Unmarshall(System.IO.BinaryReader,Ubisense.UCell.PolygonalPrism@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.PolygonalPrism.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.ServiceDescriptor">
      <summary>A structure describing the name, version, level and files for a service. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.ServiceDescriptor.name">
      <summary>The service name (not fully qualified). </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.ServiceDescriptor.version">
      <summary>The service version. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.ServiceDescriptor.level">
      <summary>The level of the hierarchy at which a service should be deployed.  Levels used include: <table><tr><td>Site</td><td>the top level cell for the system</td></tr><tr><td>Spatial</td><td>all geometry cells</td></tr><tr><td>Location</td><td>all location cells</td></tr><tr><td>Sensor</td><td>all sensor cells (may have no effect depending on sensor system used)</td></tr><tr><td>All</td><td>all cells that can run the service</td></tr><tr><td>None</td><td>No cells</td></tr></table></summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.ServiceDescriptor.programs">
      <summary>The program files for the service. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.ServiceDescriptor.libraries">
      <summary>The library files for the service. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.ServiceDescriptor.data">
      <summary>The persistent data files the service uses and/or generates. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ServiceDescriptor.#ctor(System.String,Ubisense.UServiceAdmin.Version,Ubisense.UBase.Symbol,System.Collections.Generic.SortedDictionary{System.String,System.String},System.Collections.Generic.SortedDictionary{System.String,System.Collections.Generic.SortedSet{System.String}},System.Collections.Generic.SortedSet{System.String})">
      <summary>Create a new ServiceDescriptor instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.PackageDescriptor">
      <summary>A structure describing a complete installable package. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.PackageDescriptor.vendor">
      <summary>The package vendor. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.PackageDescriptor.package">
      <summary>The package name. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.PackageDescriptor.services">
      <summary>The services in the package. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.PackageDescriptor.#ctor(System.String,System.String,System.Collections.Generic.List{Ubisense.UServiceAdmin.SiteConfig.ServiceDescriptor})">
      <summary>Create a new PackageDescriptor instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.ServiceDescriptor">
      <summary>A structure describing the name, version, level and files for a service. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.ServiceDescriptor.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.SiteConfig.ServiceDescriptor)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.ServiceDescriptor.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.SiteConfig.ServiceDescriptor@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.ServiceDescriptor.Unmarshall(System.IO.BinaryReader,Ubisense.UServiceAdmin.SiteConfig.ServiceDescriptor@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.ServiceDescriptor.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.PackageDescriptor">
      <summary>A structure describing a complete installable package. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.PackageDescriptor.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.SiteConfig.PackageDescriptor)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.PackageDescriptor.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.SiteConfig.PackageDescriptor@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.PackageDescriptor.Unmarshall(System.IO.BinaryReader,Ubisense.UServiceAdmin.SiteConfig.PackageDescriptor@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.PackageDescriptor.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.NodeProperties.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.NodeProperties.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.SiteConfig.NodeProperties.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.NodeProperties.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.SiteConfig.NodeProperties.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.NodeProperties.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UServiceAdmin.SiteConfig.NodeProperties.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.NodeProperties.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.DisabledServices.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.DisabledServices.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.SiteConfig.DisabledServices.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.DisabledServices.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.SiteConfig.DisabledServices.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.DisabledServices.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UServiceAdmin.SiteConfig.DisabledServices.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.DisabledServices.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.Commentary.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.Commentary.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.SiteConfig.Commentary.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.Commentary.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.SiteConfig.Commentary.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.Commentary.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UServiceAdmin.SiteConfig.Commentary.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.Commentary.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.Schema">
      <summary>The Ubisense.UServiceAdmin.SiteConfig schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.Schema._rxpo">
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.create_node(System.String,System.String,System.Collections.Generic.List{System.String}@)">
      <summary>Create a controlller node.  A controller registers with the core using this function. Will return true iff the registration succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="name">The name for the new node. Must be unique amongst existing node names. </param>
      <param name="architecture">The architecture the new node is running on. </param>
      <param name="errors">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.remove_node(System.String,System.Boolean,System.Collections.Generic.List{System.String}@)">
      <summary>Remove a controller node.  If force is true, remove the node and all service status relating to the node.  This may cause loss of persistent data. Returns true iff the removal succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="name">The name of the node to remove. </param>
      <param name="force">Whether to continue even if cells are assigned to this node. </param>
      <param name="errors">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.set_node_cells(Ubisense.UServiceAdmin.Node,System.Collections.Generic.SortedSet{Ubisense.UCell.Cell},System.Collections.Generic.List{System.String}@)">
      <summary>Set the cells allocated to a controller node. The new cells replace any already allocated to this node. Returns true iff the allocation succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="node">The node to change. </param>
      <param name="cells">The cells to give it. </param>
      <param name="errors">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.set_cell_nodes(Ubisense.UCell.Cell,System.Collections.Generic.SortedSet{Ubisense.UServiceAdmin.Node},System.Collections.Generic.List{System.String}@)">
      <summary>Set the nodes a cell is allocated to. The cell will be unallocated from any nodes it was previously allocated to.  Returns true iff the allocation succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="cell">The cell to allocate. </param>
      <param name="nodes">The nodes to allocate this cell to. </param>
      <param name="errors">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.create_service(Ubisense.UServiceAdmin.ServiceName,Ubisense.UBase.Symbol,System.Collections.Generic.List{System.String}@)">
      <summary>Create a new service. Returns true iff the creation succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="name">The name for the new service. </param>
      <param name="level">The level it should run at. </param>
      <param name="errors">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.register_files(Ubisense.UServiceAdmin.ServiceName,Ubisense.UServiceAdmin.Version,System.Collections.Generic.SortedSet{System.String},System.Collections.Generic.SortedDictionary{System.String,System.String},System.Collections.Generic.SortedDictionary{System.String,System.Collections.Generic.SortedSet{System.String}},System.Collections.Generic.SortedSet{System.String},System.Collections.Generic.List{System.String}@)">
      <summary>Register the files associated with a service. Returns true iff the registration succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="service">The name of the service to change. </param>
      <param name="version">The version these files apply to. </param>
      <param name="architectures">The architectures these service supports. </param>
      <param name="programs">The executable file for each architecture. </param>
      <param name="libraries">The library files for each architecture. </param>
      <param name="data">The data files. </param>
      <param name="errors">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.remove_service(Ubisense.UServiceAdmin.ServiceName,System.Collections.Generic.List{System.String}@)">
      <summary>Remove an existing service. The service's files and outstanding execution requests must be removed first. Returns true iff the removal succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="name">The name of the service to remove. </param>
      <param name="errors">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.deregister_files(Ubisense.UServiceAdmin.ServiceName,Ubisense.UServiceAdmin.Version,System.Collections.Generic.List{System.String}@)">
      <summary>Remove the files associated with a service. The given version of the service must be removed from all controller nodes before its files can be deregistered. Returns true iff the removal succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="service">The name of the service whose files should be removed. </param>
      <param name="version">The version whose files should be removed. </param>
      <param name="errors">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.set_disabled_cells(Ubisense.UServiceAdmin.ServiceName,System.Collections.Generic.SortedSet{Ubisense.UCell.Cell},System.Collections.Generic.List{System.String}@)">
      <summary>Set the cells for which a service is disabled. This will replace any existing setting for this service, so is used both to disable the service on some cells and to re-enable it afterwards. Returns true iff the removal succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="service">The name of the service to change. </param>
      <param name="cells">The cells it should be disabled on. </param>
      <param name="errors">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.request_status(Ubisense.UServiceAdmin.ServiceName,Ubisense.UBase.Symbol,System.Collections.Generic.List{System.String}@)">
      <summary>Request a state change for a service at all cells running the service. This function changes the service's entry in the DesiredState relation. Controller nodes subscribe to that relation. When they are notified of this change, they take actions to bring about the desired state, thus effecting the requested change. This operation returns true iff the request was added, but may return before the state change has taken place so can give no indication of whether the change succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="service">The name of the service to change. </param>
      <param name="status">The new status you want the service to reach. </param>
      <param name="errors">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.request_status_at_cell(Ubisense.UServiceAdmin.ServiceName,Ubisense.UCell.Cell,Ubisense.UBase.Symbol,System.Collections.Generic.List{System.String}@)">
      <summary>Request a state change for a service at the given cell only. This function changes the service's entry in the DesiredState relation. Controller nodes subscribe to that relation. When the node allocated to the given cell is notified of this change, they take actions to bring about the desired state, thus effecting the requested change. This operation returns true iff the request was added successfully, but may return before the state change has taken place so can give no indication of whether the change succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="service">The name of the service to change. </param>
      <param name="cell">The cell to change. </param>
      <param name="status">The new status you want the service to reach. </param>
      <param name="errors">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.request_backup(Ubisense.UServiceAdmin.ServiceName,System.Collections.Generic.List{System.String}@)">
      <summary>Request a backup of all current instances of a service.  The services will copy their persistent data files back to the core. Returns true iff the request was added successfully. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="service">The name of the service to back up. </param>
      <param name="errors">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.request_backup_at_cell(Ubisense.UServiceAdmin.ServiceName,Ubisense.UCell.Cell,System.Collections.Generic.List{System.String}@)">
      <summary>Request a backup of a service instance on a given cell. The service will copy its persistent data back to the core. Returns true iff the request was added successfully. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="service">The name of the service to back up. </param>
      <param name="cell">The cell it should be backed up from. </param>
      <param name="errors">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.deploy_service(Ubisense.UServiceAdmin.ServiceName,Ubisense.UServiceAdmin.Version,Ubisense.UCell.Cell,Ubisense.UServiceAdmin.Node,System.Collections.Generic.List{System.String}@)">
      <summary>This method is DEPRECATED since release 2.2. Use deploy_service_for_cell, deploy_service_all_cells, deploy_if_automatic or deploy as appropriate.  This method always returns an error indicating that clients with the correct version should be used. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="service">The name of the service to deploy. </param>
      <param name="version">The version of the service to deploy. </param>
      <param name="cell">The cell associated with this instance of the service. </param>
      <param name="node">The node to deploy it to. </param>
      <param name="errors">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.deploy_service_for_cell(Ubisense.UServiceAdmin.ServiceName,Ubisense.UCell.Cell,Ubisense.UServiceAdmin.Node,System.Collections.Generic.List{System.String}@)">
      <summary>Deploy the latest version of a service for a cell onto a specific controller node. The service will be migrated if it is currently running for the same cell on a different controller node. Returns true iff the state was updated successfully, but may return before the deployment or migration has taken place so can give no indication of whether the change succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="service">The name of the service to deploy. </param>
      <param name="cell">The cell associated with this instance of the service. </param>
      <param name="node">The node to deploy it to. </param>
      <param name="errors">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.deploy_service_all_cells(Ubisense.UServiceAdmin.ServiceName,System.Collections.Generic.List{System.String}@)">
      <summary>Deploy the latest version of all matching services onto a suitable controller for all the cells on which it should be deployed. Returns true iff the state was updated successfully, but may return before the deployment or migration has taken place so can give no indication of whether the change succeeded. Each component of the name (vendor, package or service) can be either an empty string, to match any service, or a non-emptry string to match that string exactly. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="service">The name of the service to deploy. </param>
      <param name="errors">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.deploy_if_automatic(System.Collections.Generic.List{System.String}@)">
      <summary>If automatic deployment is enabled, deploy the latest version of all services onto a suitable controller for all the cells on which they should be deployed. Returns true iff the state was updated successfully, but may return before the deployment or migration has taken place so can give no indication of whether the change succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="errors">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.deploy(System.Collections.Generic.List{System.String}@)">
      <summary>Deploy the latest version of all services onto a suitable controller for all the cells on which they should be deployed. Returns true iff the state was updated successfully, but may return before the deployment or migration has taken place so can give no indication of whether the change succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="errors">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.undeploy_service(Ubisense.UServiceAdmin.ServiceName,Ubisense.UCell.Cell,System.Collections.Generic.List{System.String}@)">
      <summary>This method is DEPRECATED since release 2.2. Use undeploy_service_for_cell or undeploy_service_all_cells.  This method always returns an error indicating that clients with the correct version should be used. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="service">The name of the service to undeploy. </param>
      <param name="cell">The cell it should be undeployed from. </param>
      <param name="errors">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.undeploy_service_for_cell(Ubisense.UServiceAdmin.ServiceName,Ubisense.UCell.Cell,System.Collections.Generic.List{System.String}@)">
      <summary>Undeploy a service for a cell.  If the service instance is currently running, it will be stopped and will write its persistent data files back to the core. Returns true iff the DesiredState relation was updated successfully. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="service">The name of the service to undeploy. </param>
      <param name="cell">The cell it should be undeployed from. </param>
      <param name="errors">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.undeploy_service_all_cells(Ubisense.UServiceAdmin.ServiceName,System.Collections.Generic.List{System.String}@)">
      <summary>Undeploy a service from all cells on which it is deployed. If the service instance is currently running, it will be stopped and will write its persistent data files back to the core. Returns true iff the DesiredState relation was updated successfully.  Each component of the name (vendor, package or service) can be either an empty string, to match any service, or a non-emptry string to match that string exactly. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="service">The name of the service to undeploy. </param>
      <param name="errors">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.remove_cell(Ubisense.UCell.Cell,System.Collections.Generic.List{System.String}@)">
      <summary>Remove all service instances for a cell. Returns true iff the removal succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="cell">The cell to remove services from. </param>
      <param name="errors">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.node_heartbeat(Ubisense.UServiceAdmin.Node)">
      <summary>Report that a controller node is alive. Returns true iff the update succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="node">The node the heartbeat is from. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.assert_status(Ubisense.UServiceAdmin.State)">
      <summary>Assert the actual state of a service. Returns true iff the update succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="state">The actual state that holds in reality. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.remove_status(Ubisense.UServiceAdmin.State)">
      <summary>Remove the actual state of the service and cell given in the State object from the ActualState relation. Returns true iff the removal was successful. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="state">The state to be removed. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.commentary(System.String)">
      <summary>Add a message to the commentary. The timestamp will be added automatically. Returns true iff the addition succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="comment">The message to add. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Schema.set_automatic_deployment(System.Boolean)">
      <summary>Enable or disable automatic deployment of services to cells. Returns true iff the setting was successfully changed. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="enabled">The new value for the setting. </param>
    </member>
    <member name="P:Ubisense.UServiceAdmin.SiteConfig.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.UServiceAdmin.SiteConfig.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.NodeProperties">
      <summary>A controller node has a name, architecture and last reported that it is alive at a given time. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.NodeProperties.AddInsertHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UServiceAdmin.SiteConfig.NodeProperties.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.NodeProperties.AddUpdateHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UServiceAdmin.SiteConfig.NodeProperties.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.NodeProperties.AddDeleteHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UServiceAdmin.SiteConfig.NodeProperties.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.NodeProperties.node_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index node_. Supports look-up by node. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.NodeProperties.node_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction,Ubisense.UServiceAdmin.Node)">
      <summary>Iterate over the elements of the table that match the first argument of the index node_. Supports look-up by node. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.NodeProperties.name_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index name_. Supports look-up by node name. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.NodeProperties.name_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction,System.String)">
      <summary>Iterate over the elements of the table that match the first argument of the index name_. Supports look-up by node name. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.NodeProperties.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.NodeProperties.RowType.node_">
      <summary>The controller object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.NodeProperties.RowType.name_">
      <summary>The name of the controller, usually the fully qualified host name. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.NodeProperties.RowType.architecture_">
      <summary>The architecture of the controller. <table><tr><td>i586_windows_1.3</td><td>Microsoft Windows XP or 2003</td></tr><tr><td>i586_linux_2.4</td><td>Linux running a 2.4 kernel</td></tr><tr><td>i586_linux_2.6</td><td>Linux running a 2.6 kernel</td></tr></table></summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.NodeProperties.RowType.heartbeat_">
      <summary>The last time the controller reported as alive. Controllers normally report every minute. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.NodeProperties.RowType.missed_heartbeats_">
      <summary>How many missed heartbeats the core has counted since the last time the controller reported as alive. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.NodeProperties.RowType.#ctor(Ubisense.UServiceAdmin.Node,System.String,System.String,System.DateTime,System.UInt32)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.NodeProperties.___lop_key_node_">
      <summary>The lex-ordered prefixable key for the index node_</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.NodeProperties.___lop_cmp_node_">
      <summary>The ordering for the index node_</summary>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.NodeProperties.___lop_cmp_node_.Compare(Ubisense.UServiceAdmin.SiteConfig.NodeProperties.___lop_key_node_,Ubisense.UServiceAdmin.SiteConfig.NodeProperties.___lop_key_node_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.NodeProperties.___lop_key_name_">
      <summary>The lex-ordered prefixable key for the index name_</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.NodeProperties.___lop_cmp_name_">
      <summary>The ordering for the index name_</summary>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.NodeProperties.___lop_cmp_name_.Compare(Ubisense.UServiceAdmin.SiteConfig.NodeProperties.___lop_key_name_,Ubisense.UServiceAdmin.SiteConfig.NodeProperties.___lop_key_name_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.NodeAllocation">
      <summary>Each cell is allocated to a controller node. That node runs all the services for that cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.AddInsertHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.AddUpdateHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.AddDeleteHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.node_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index node_. Supports look-up by node, to find the cells a node serves. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.node_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction,Ubisense.UServiceAdmin.Node)">
      <summary>Iterate over the elements of the table that match the first argument of the index node_. Supports look-up by node, to find the cells a node serves. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.cell_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index cell_. Supports look-up by cell, to find the controller for a given cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.cell_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction,Ubisense.UCell.Cell)">
      <summary>Iterate over the elements of the table that match the first argument of the index cell_. Supports look-up by cell, to find the controller for a given cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.RowType.cell_">
      <summary>The cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.RowType.node_">
      <summary>The node on which services for the cell will be run. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.RowType.#ctor(Ubisense.UCell.Cell,Ubisense.UServiceAdmin.Node)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.___lop_key_node_">
      <summary>The lex-ordered prefixable key for the index node_</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.___lop_cmp_node_">
      <summary>The ordering for the index node_</summary>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.___lop_cmp_node_.Compare(Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.___lop_key_node_,Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.___lop_key_node_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.___lop_key_cell_">
      <summary>The lex-ordered prefixable key for the index cell_</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.___lop_cmp_cell_">
      <summary>The ordering for the index cell_</summary>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.___lop_cmp_cell_.Compare(Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.___lop_key_cell_,Ubisense.UServiceAdmin.SiteConfig.NodeAllocation.___lop_key_cell_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.ServiceProperties">
      <summary>A service has a fully qualified name and should be deployed at a level. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.AddInsertHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.AddUpdateHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.AddDeleteHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.service_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index service_. The service object uniquely defines its properties. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.service_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction,Ubisense.UServiceAdmin.Service)">
      <summary>Iterate over the elements of the table that match the first argument of the index service_. The service object uniquely defines its properties. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.name_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index name_. The name of a service uniquely defines that service's properties. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.name_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction,Ubisense.UServiceAdmin.ServiceName)">
      <summary>Iterate over the elements of the table that match the first argument of the index name_. The name of a service uniquely defines that service's properties. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.RowType.service_">
      <summary>The service object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.RowType.name_">
      <summary>The fully qualified name of the service. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.RowType.level_">
      <summary>The level of the hierarchy at which a service should be deployed.  Levels used include: <table><tr><td>Site</td><td>the top level cell for the system</td></tr><tr><td>Spatial</td><td>all geometry cells</td></tr><tr><td>Location</td><td>all location cells</td></tr><tr><td>Sensor</td><td>all sensor cells (may have no effect depending on sensor system used)</td></tr><tr><td>All</td><td>all cells that can run the service</td></tr></table></summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.RowType.#ctor(Ubisense.UServiceAdmin.Service,Ubisense.UServiceAdmin.ServiceName,Ubisense.UBase.Symbol)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.___lop_key_service_">
      <summary>The lex-ordered prefixable key for the index service_</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.___lop_cmp_service_">
      <summary>The ordering for the index service_</summary>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.___lop_cmp_service_.Compare(Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.___lop_key_service_,Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.___lop_key_service_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.___lop_key_name_">
      <summary>The lex-ordered prefixable key for the index name_</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.___lop_cmp_name_">
      <summary>The ordering for the index name_</summary>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.___lop_cmp_name_.Compare(Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.___lop_key_name_,Ubisense.UServiceAdmin.SiteConfig.ServiceProperties.___lop_key_name_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles">
      <summary>Relates a service to the set of executable and data files it needs. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.AddInsertHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.AddUpdateHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.AddDeleteHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.service_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index service_. A service's identity and version uniquely defines a collection of files for each architecture. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.service_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction,Ubisense.UServiceAdmin.Service)">
      <summary>Iterate over the elements of the table that match the first argument of the index service_. A service's identity and version uniquely defines a collection of files for each architecture. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.service_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction,Ubisense.UServiceAdmin.Service,Ubisense.UServiceAdmin.Version)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index service_. A service's identity and version uniquely defines a collection of files for each architecture. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.service_ref_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index service_ref_. Just specifying a name gets you a list of versions to choose from. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.service_ref_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction,Ubisense.UServiceAdmin.Service)">
      <summary>Iterate over the elements of the table that match the first argument of the index service_ref_. Just specifying a name gets you a list of versions to choose from. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.RowType.service_">
      <summary>The service object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.RowType.version_">
      <summary>The version of the service. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.RowType.architectures_">
      <summary>The set of architectures for which the service has program files. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.RowType.programs_">
      <summary>The service program files. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.RowType.libraries_">
      <summary>The service library files.  These are architecture-dependent files that are required to run the service program file. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.RowType.data_">
      <summary>The persistent data files used or generated by the service.  These are the files that are written back to the core when the service is backed up or stopped. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.RowType.#ctor(Ubisense.UServiceAdmin.Service,Ubisense.UServiceAdmin.Version,System.Collections.Generic.SortedSet{System.String},System.Collections.Generic.SortedDictionary{System.String,System.String},System.Collections.Generic.SortedDictionary{System.String,System.Collections.Generic.SortedSet{System.String}},System.Collections.Generic.SortedSet{System.String})">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.___lop_key_service_">
      <summary>The lex-ordered prefixable key for the index service_</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.___lop_cmp_service_">
      <summary>The ordering for the index service_</summary>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.___lop_cmp_service_.Compare(Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.___lop_key_service_,Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.___lop_key_service_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.___lop_key_service_ref_">
      <summary>The lex-ordered prefixable key for the index service_ref_</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.___lop_cmp_service_ref_">
      <summary>The ordering for the index service_ref_</summary>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.___lop_cmp_service_ref_.Compare(Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.___lop_key_service_ref_,Ubisense.UServiceAdmin.SiteConfig.ServiceFiles.___lop_key_service_ref_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.DisabledServices">
      <summary>A service is disabled for a set of cells, and will not be deployed to them.  This allows a service to be assigned a level, but not run on all cells of that level. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.DisabledServices.AddInsertHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UServiceAdmin.SiteConfig.DisabledServices.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.DisabledServices.AddUpdateHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UServiceAdmin.SiteConfig.DisabledServices.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.DisabledServices.AddDeleteHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UServiceAdmin.SiteConfig.DisabledServices.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.DisabledServices.service_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index service_. The service uniquely defines the set of cells. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.DisabledServices.service_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction,Ubisense.UServiceAdmin.Service)">
      <summary>Iterate over the elements of the table that match the first argument of the index service_. The service uniquely defines the set of cells. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.DisabledServices.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.DisabledServices.RowType.service_">
      <summary>The service object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.DisabledServices.RowType.cells_">
      <summary>The set of cells for which the service is disabled. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.DisabledServices.RowType.#ctor(Ubisense.UServiceAdmin.Service,System.Collections.Generic.SortedSet{Ubisense.UCell.Cell})">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.DisabledServices.___lop_key_service_">
      <summary>The lex-ordered prefixable key for the index service_</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.DisabledServices.___lop_cmp_service_">
      <summary>The ordering for the index service_</summary>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.DisabledServices.___lop_cmp_service_.Compare(Ubisense.UServiceAdmin.SiteConfig.DisabledServices.___lop_key_service_,Ubisense.UServiceAdmin.SiteConfig.DisabledServices.___lop_key_service_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.DesiredState">
      <summary>A service should have a state.  This relation is used to assert the desired service configuration.  Controllers subscribe to the relation and perform actions required to make DesiredState the same as ActualState. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.DesiredState.AddInsertHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UServiceAdmin.State})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.DesiredState.AddUpdateHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UServiceAdmin.State})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.DesiredState.AddDeleteHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UServiceAdmin.State})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.DesiredState.service_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index service_. Each (service,cell) pair has exactly one desired state. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.DesiredState.service_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction,Ubisense.UServiceAdmin.Service)">
      <summary>Iterate over the elements of the table that match the first argument of the index service_. Each (service,cell) pair has exactly one desired state. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.DesiredState.service_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction,Ubisense.UServiceAdmin.Service,Ubisense.UCell.Cell)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index service_. Each (service,cell) pair has exactly one desired state. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.DesiredState.node_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index node_. Each controller has desired states for each of the cells and services it serves. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.DesiredState.node_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction,Ubisense.UServiceAdmin.Node)">
      <summary>Iterate over the elements of the table that match the first argument of the index node_. Each controller has desired states for each of the cells and services it serves. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.DesiredState.service_ref_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index service_ref_. Each service has a desired state for each cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.DesiredState.service_ref_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction,Ubisense.UServiceAdmin.Service)">
      <summary>Iterate over the elements of the table that match the first argument of the index service_ref_. Each service has a desired state for each cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.DesiredState.___lop_key_service_">
      <summary>The lex-ordered prefixable key for the index service_</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.DesiredState.___lop_cmp_service_">
      <summary>The ordering for the index service_</summary>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.DesiredState.___lop_cmp_service_.Compare(Ubisense.UServiceAdmin.SiteConfig.DesiredState.___lop_key_service_,Ubisense.UServiceAdmin.SiteConfig.DesiredState.___lop_key_service_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.DesiredState.___lop_key_node_">
      <summary>The lex-ordered prefixable key for the index node_</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.DesiredState.___lop_cmp_node_">
      <summary>The ordering for the index node_</summary>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.DesiredState.___lop_cmp_node_.Compare(Ubisense.UServiceAdmin.SiteConfig.DesiredState.___lop_key_node_,Ubisense.UServiceAdmin.SiteConfig.DesiredState.___lop_key_node_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.DesiredState.___lop_key_service_ref_">
      <summary>The lex-ordered prefixable key for the index service_ref_</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.DesiredState.___lop_cmp_service_ref_">
      <summary>The ordering for the index service_ref_</summary>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.DesiredState.___lop_cmp_service_ref_.Compare(Ubisense.UServiceAdmin.SiteConfig.DesiredState.___lop_key_service_ref_,Ubisense.UServiceAdmin.SiteConfig.DesiredState.___lop_key_service_ref_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.ActualState">
      <summary>A service currently has a state.  Controllers update this relation to indicate the current state of services they control. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ActualState.AddInsertHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UServiceAdmin.State})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ActualState.AddUpdateHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UServiceAdmin.State})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ActualState.AddDeleteHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UServiceAdmin.State})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ActualState.service_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index service_. Each (service,cell) pair has exactly one actual state. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ActualState.service_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction,Ubisense.UServiceAdmin.Service)">
      <summary>Iterate over the elements of the table that match the first argument of the index service_. Each (service,cell) pair has exactly one actual state. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ActualState.service_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction,Ubisense.UServiceAdmin.Service,Ubisense.UCell.Cell)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index service_. Each (service,cell) pair has exactly one actual state. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ActualState.node_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index node_. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ActualState.node_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction,Ubisense.UServiceAdmin.Node)">
      <summary>Iterate over the elements of the table that match the first argument of the index node_. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.ActualState.___lop_key_service_">
      <summary>The lex-ordered prefixable key for the index service_</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.ActualState.___lop_cmp_service_">
      <summary>The ordering for the index service_</summary>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ActualState.___lop_cmp_service_.Compare(Ubisense.UServiceAdmin.SiteConfig.ActualState.___lop_key_service_,Ubisense.UServiceAdmin.SiteConfig.ActualState.___lop_key_service_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.ActualState.___lop_key_node_">
      <summary>The lex-ordered prefixable key for the index node_</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.ActualState.___lop_cmp_node_">
      <summary>The ordering for the index node_</summary>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.ActualState.___lop_cmp_node_.Compare(Ubisense.UServiceAdmin.SiteConfig.ActualState.___lop_key_node_,Ubisense.UServiceAdmin.SiteConfig.ActualState.___lop_key_node_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.Commentary">
      <summary>Messages generated by core or controllers relating to service configuration. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Commentary.AddInsertHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UServiceAdmin.SiteConfig.Commentary.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Commentary.AddUpdateHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UServiceAdmin.SiteConfig.Commentary.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Commentary.AddDeleteHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UServiceAdmin.SiteConfig.Commentary.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Commentary.time_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index time_. Finds messages based on a timestamp. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Commentary.time_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction,System.DateTime)">
      <summary>Iterate over the elements of the table that match the first argument of the index time_. Finds messages based on a timestamp. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.Commentary.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.Commentary.RowType.time_">
      <summary>The time the message was raised. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.Commentary.RowType.message_">
      <summary>The text of the message. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Commentary.RowType.#ctor(System.DateTime,System.String)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.Commentary.___lop_key_time_">
      <summary>The lex-ordered prefixable key for the index time_</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.Commentary.___lop_cmp_time_">
      <summary>The ordering for the index time_</summary>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.Commentary.___lop_cmp_time_.Compare(Ubisense.UServiceAdmin.SiteConfig.Commentary.___lop_key_time_,Ubisense.UServiceAdmin.SiteConfig.Commentary.___lop_key_time_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment">
      <summary>Whether the core service should automatically deploy cell services.  The default is for this to be enabled, if there is no row.  There will be at most one row. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.AddInsertHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.AddUpdateHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.AddDeleteHandler(Ubisense.UServiceAdmin.SiteConfig.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.enabled_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index enabled_. Index on the only value; used internally. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.enabled_(Ubisense.UServiceAdmin.SiteConfig.ReadTransaction,System.Boolean)">
      <summary>Iterate over the elements of the table that match the first argument of the index enabled_. Index on the only value; used internally. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.RowType.enabled_">
      <summary>The setting in question. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.RowType.#ctor(System.Boolean)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.___lop_key_enabled_">
      <summary>The lex-ordered prefixable key for the index enabled_</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.___lop_cmp_enabled_">
      <summary>The ordering for the index enabled_</summary>
    </member>
    <member name="M:Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.___lop_cmp_enabled_.Compare(Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.___lop_key_enabled_,Ubisense.UServiceAdmin.SiteConfig.AutomaticDeployment.___lop_key_enabled_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UCell.Extent.CellHasExtent.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.Extent.CellHasExtent.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UCell.Extent.CellHasExtent.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.Extent.CellHasExtent.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UCell.Extent.CellHasExtent.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.Extent.CellHasExtent.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UCell.Extent.CellHasExtent.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.Extent.CellHasExtent.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UCell.Extent.Schema">
      <summary>The Ubisense.UCell.Extent schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.UCell.Extent.Schema._rxpo">
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UCell.Extent.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.UCell.Extent.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UCell.Extent.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UCell.Extent.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UCell.Extent.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UCell.Extent.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.UCell.Extent.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UCell.Extent.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UCell.Extent.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UCell.Extent.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UCell.Extent.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UCell.Extent.Schema.set_cell_extent(Ubisense.UCell.Cell,Ubisense.UCell.PolygonalPrism)">
      <summary>Set a cell extent, replacing an existing extent for the cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="cell"></param>
      <param name="extent"></param>
    </member>
    <member name="M:Ubisense.UCell.Extent.Schema.remove_cell_extent(Ubisense.UCell.Cell)">
      <summary>Remove a cell extent. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="cell"></param>
    </member>
    <member name="P:Ubisense.UCell.Extent.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.UCell.Extent.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.UCell.Extent.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.UCell.Extent.CellHasExtent">
      <summary>Defines the extent of each cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UCell.Extent.CellHasExtent.AddInsertHandler(Ubisense.UCell.Extent.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UCell.Extent.CellHasExtent.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UCell.Extent.CellHasExtent.AddUpdateHandler(Ubisense.UCell.Extent.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UCell.Extent.CellHasExtent.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UCell.Extent.CellHasExtent.AddDeleteHandler(Ubisense.UCell.Extent.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UCell.Extent.CellHasExtent.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UCell.Extent.CellHasExtent.cell_(Ubisense.UCell.Extent.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index cell_. Look up the (unique) extent of a cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UCell.Extent.CellHasExtent.cell_(Ubisense.UCell.Extent.ReadTransaction,Ubisense.UCell.Cell)">
      <summary>Iterate over the elements of the table that match the first argument of the index cell_. Look up the (unique) extent of a cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UCell.Extent.CellHasExtent.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UCell.Extent.CellHasExtent.RowType.cell_">
      <summary>The cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UCell.Extent.CellHasExtent.RowType.extent_">
      <summary>The extent of the cell. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.Extent.CellHasExtent.RowType.#ctor(Ubisense.UCell.Cell,Ubisense.UCell.PolygonalPrism)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UCell.Extent.CellHasExtent.___lop_key_cell_">
      <summary>The lex-ordered prefixable key for the index cell_</summary>
    </member>
    <member name="T:Ubisense.UCell.Extent.CellHasExtent.___lop_cmp_cell_">
      <summary>The ordering for the index cell_</summary>
    </member>
    <member name="M:Ubisense.UCell.Extent.CellHasExtent.___lop_cmp_cell_.Compare(Ubisense.UCell.Extent.CellHasExtent.___lop_key_cell_,Ubisense.UCell.Extent.CellHasExtent.___lop_key_cell_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UMulticast.Assigned.MulticastAddress.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UMulticast.Assigned.MulticastAddress.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UMulticast.Assigned.MulticastAddress.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UMulticast.Assigned.MulticastAddress.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UMulticast.Assigned.MulticastAddress.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UMulticast.Assigned.MulticastAddress.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UMulticast.Assigned.MulticastAddress.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UMulticast.Assigned.MulticastAddress.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UMulticast.Assigned.Schema">
      <summary>The Ubisense.UMulticast.Assigned schema class controls all storage and connection for this relational schema</summary>
      <package>UbisensePlatform.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.UMulticast.Assigned.Schema._rxpo">
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisensePlatform.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisensePlatform.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisensePlatform.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisensePlatform.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisensePlatform.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisensePlatform.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisensePlatform.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisensePlatform.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.Schema.get_multicast_address(System.String,Ubisense.UBase.Address@)">
      <summary>Get a multicast address for a given service name; if it has been assigned, return true and assign the address to the out parameter, otherwise return false. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="name">The name of the service </param>
      <param name="address">The multicast address assigned to the service </param>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.Schema.assign_multicast_address(System.String)">
      <summary>Get a multicast address for a given service name. If one has already been assigned, return it, otherwise assign a new multicast address and return that instead.  The multicast address will be in a range defined by the following configuration service parameters: <table><tr><td>multicast_min</td><td>The minimum IP address(default 239.192.0.0)</td></tr><tr><td>multicast_max</td><td>The maximum IP address(default 239.192.255.255)</td></tr><tr><td>multicast_base_port</td><td>The minimum port number (default 55000)</td></tr></table> Any address created will be in the range from multicast_min:multicast_base_port to multicast_max:65535. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="name">The name of the service </param>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.Schema.remove_multicast_address(System.String)">
      <summary>Remove the assignment for the given service name.  This frees it up for potential assignment to another name. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="name">The service name </param>
    </member>
    <member name="P:Ubisense.UMulticast.Assigned.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.UMulticast.Assigned.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UMulticast.Assigned.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.UMulticast.Assigned.MulticastAddress">
      <summary>A relation between service names and multicast addresses. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.MulticastAddress.AddInsertHandler(Ubisense.UMulticast.Assigned.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UMulticast.Assigned.MulticastAddress.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.MulticastAddress.AddUpdateHandler(Ubisense.UMulticast.Assigned.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UMulticast.Assigned.MulticastAddress.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.MulticastAddress.AddDeleteHandler(Ubisense.UMulticast.Assigned.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UMulticast.Assigned.MulticastAddress.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.MulticastAddress.name_(Ubisense.UMulticast.Assigned.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index name_. Look up entries in the relation by service name, which uniquely defines an assigned multicast address </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.MulticastAddress.name_(Ubisense.UMulticast.Assigned.ReadTransaction,System.String)">
      <summary>Iterate over the elements of the table that match the first argument of the index name_. Look up entries in the relation by service name, which uniquely defines an assigned multicast address </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.MulticastAddress.address_(Ubisense.UMulticast.Assigned.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index address_. Look up values in the relation by address. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.MulticastAddress.address_(Ubisense.UMulticast.Assigned.ReadTransaction,Ubisense.UBase.Address)">
      <summary>Iterate over the elements of the table that match the first argument of the index address_. Look up values in the relation by address. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UMulticast.Assigned.MulticastAddress.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UMulticast.Assigned.MulticastAddress.RowType.name_">
      <summary>The name of the service </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UMulticast.Assigned.MulticastAddress.RowType.address_">
      <summary>The multicast address assigned to the service </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UMulticast.Assigned.MulticastAddress.RowType.accessed_">
      <summary>The time when the address was assigned </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.MulticastAddress.RowType.op_Equality(Ubisense.UMulticast.Assigned.MulticastAddress.RowType,Ubisense.UMulticast.Assigned.MulticastAddress.RowType)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.MulticastAddress.RowType.op_Inequality(Ubisense.UMulticast.Assigned.MulticastAddress.RowType,Ubisense.UMulticast.Assigned.MulticastAddress.RowType)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.MulticastAddress.RowType.op_LessThan(Ubisense.UMulticast.Assigned.MulticastAddress.RowType,Ubisense.UMulticast.Assigned.MulticastAddress.RowType)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.MulticastAddress.RowType.op_GreaterThan(Ubisense.UMulticast.Assigned.MulticastAddress.RowType,Ubisense.UMulticast.Assigned.MulticastAddress.RowType)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.MulticastAddress.RowType.#ctor(System.String,Ubisense.UBase.Address,System.DateTime)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.MulticastAddress.RowType.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.MulticastAddress.RowType.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.MulticastAddress.RowType.CompareTo(Ubisense.UMulticast.Assigned.MulticastAddress.RowType)">
      <summary>Compare this instance with 'other'</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.MulticastAddress.RowType.Equals(Ubisense.UMulticast.Assigned.MulticastAddress.RowType)">
      <summary>True if this instance equals obj</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UMulticast.Assigned.MulticastAddress.___lop_key_name_">
      <summary>The lex-ordered prefixable key for the index name_</summary>
    </member>
    <member name="T:Ubisense.UMulticast.Assigned.MulticastAddress.___lop_cmp_name_">
      <summary>The ordering for the index name_</summary>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.MulticastAddress.___lop_cmp_name_.Compare(Ubisense.UMulticast.Assigned.MulticastAddress.___lop_key_name_,Ubisense.UMulticast.Assigned.MulticastAddress.___lop_key_name_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UMulticast.Assigned.MulticastAddress.___lop_key_address_">
      <summary>The lex-ordered prefixable key for the index address_</summary>
    </member>
    <member name="T:Ubisense.UMulticast.Assigned.MulticastAddress.___lop_cmp_address_">
      <summary>The ordering for the index address_</summary>
    </member>
    <member name="M:Ubisense.UMulticast.Assigned.MulticastAddress.___lop_cmp_address_.Compare(Ubisense.UMulticast.Assigned.MulticastAddress.___lop_key_address_,Ubisense.UMulticast.Assigned.MulticastAddress.___lop_key_address_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UBase.MonitorControl">
      <summary>
            A control that displays platform trace output in a separate window.
            This should normally be used via the MonitorForm, so that a single
            line of code is required for the display of monitor messages in your
            aplication.
            <seealso cref="T:Ubisense.UBase.MonitorForm" /></summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MonitorControl.#ctor">
      <summary>
            Create the control
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MonitorControl.AddMessage(System.String)">
      <summary>
            Write a message which will display in the trace output window.
            This can be called from any thread (not just the creator of the control).
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MonitorControl.OnContentsChanged">
      <summary>
            Ensure the ContentsChanged event is handled by all event handlers
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MonitorControl.UpdateContents">
      <summary>
            This was public but looks like it should be private to me (PJS).
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MonitorControl.ScrollToEnd">
      <summary>
            Ensure that the control is scrolled to the end of the messages.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MonitorControl.Trim">
      <summary>
            Trim the current contents of the string builder to the 
            maximum number of characters supported by the text box.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="F:Ubisense.UBase.MonitorControl.components">
      <summary> 
            Required designer variable.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MonitorControl.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:Ubisense.UBase.MonitorControl.InitializeComponent">
      <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="E:Ubisense.UBase.MonitorControl.ContentsChanged">
      <summary>
            An event raised whenever the control messages change
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.MonitorForm">
      <summary>
            The MonitorForm automatically displays a dialog when monitor messages are generated by the platform.
            <seealso cref="T:Ubisense.UBase.MonitorControl" /></summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MonitorForm.#ctor">
      <summary>
            Construct a MonitorForm, which will automatically show itself when a new error or warning message
            is generated by the platform middleware.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="F:Ubisense.UBase.MonitorImplForm.components">
      <summary>
            Required designer variable.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MonitorImplForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:Ubisense.UBase.MonitorImplForm.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.Address">
      <summary> 
            An IPEndPoint that also has an ordering relation so that it can be used as a 
            proper Ubisense basic type
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Address.#ctor(System.Int64,System.Int32)">
      <summary>
            Create an IP endpoint with a given address and port number
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="addr">The address</param>
      <param name="port">The port number</param>
    </member>
    <member name="M:Ubisense.UBase.Address.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>
            Create an IP endpoint with a given address and port number
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="addr">The address</param>
      <param name="port">The port number</param>
    </member>
    <member name="M:Ubisense.UBase.Address.#ctor">
      <summary>
            Create an IP endpoint for 0.0.0.0:0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Address.ToString(System.String,System.IFormatProvider)">
      <summary> Returns a String representation of the value of
            this instance of the Address class, according to the provided
            format specifier and culture-specific format information
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Address.CompareTo(Ubisense.UBase.Address)">
      <summary>
            Compare by comparing the stringified value
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Address.Equals(System.Object)">
      <summary>
            Compare by comparing the stringified value
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Address.Equals(Ubisense.UBase.Address)">
      <summary>
            Compare by comparing the stringified value
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Address.GetHashCode">
      <summary>
            The hash code is the hash of the stringified value
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Address.op_Equality(Ubisense.UBase.Address,Ubisense.UBase.Address)">
      <summary>
            True iff x.CompareTo(y) == 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Address.op_Inequality(Ubisense.UBase.Address,Ubisense.UBase.Address)">
      <summary>
            True iff x.CompareTo(y) != 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Address.op_LessThan(Ubisense.UBase.Address,Ubisense.UBase.Address)">
      <summary>
            True iff x.CompareTo(y) &lt; 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Address.op_GreaterThan(Ubisense.UBase.Address,Ubisense.UBase.Address)">
      <summary>
            True iff x.CompareTo(y) &gt; 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UVis.Colour">
      <summary>
            A colour represented as double Red, Green, Blue and Alpha components.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Colour.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Construct a colour from its components.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Colour.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Construct a fully opaque colour.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Colour.ToString(System.String,System.IFormatProvider)">
      <summary>
            Convert a colour to a string.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Colour.Read(System.IO.BinaryReader)">
      <summary>
            Read a colour from a binary reader.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Colour.Write(System.IO.BinaryWriter)">
      <summary>
            Write a colour to a binary writer.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Colour.Red">
      <summary>
            The red component of the colour, ranging from 0.0 to 1.0.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Colour.Green">
      <summary>
            The green component of the colour, ranging from 0.0 tp 1.0.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Colour.Blue">
      <summary>
            The blue component of the colour, ranging from 0.0 tp 1.0.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Colour.Alpha">
      <summary>
            The alpha, or transparency, component of the colour. Alpha of 0.0 is fully transparent, 1.0 is fully opaque.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.Blob">
      <summary>
            A container for some raw binary data.  
            Since the data could be large, and is held in memory, the class implements IDisposable.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Blob.#ctor">
      <summary>
            Create an empty Blob.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Blob.#ctor(System.Byte[])">
      <summary>
            Create a Blob from an array of bytes.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Blob.#ctor(System.IO.MemoryStream)">
      <summary>
            Create a Blob from a MemoryStream.  The MemoryStream buffer
            must be publicly visible or the Blob won't be writable.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Blob.Read(System.IO.BinaryReader)">
      <summary>
            Read using a binary reader.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Blob.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Blob.Dispose">
      <summary>
            Clean up the data managed by the blob
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.Blob.Data">
      <summary>
            A stream containing the blob data.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBuilding.ConvexPolygon">
      <summary>
            A convex polygon defined by a list of points and a privacy value.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.ConvexPolygon.#ctor">
      <summary>
            Create an empty ConvexPolygon.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.ConvexPolygon.#ctor(System.Collections.Generic.List{Ubisense.UBase.Vector2D},System.Int32)">
      <summary>
            Create a ConvexPolygon from a list of points and a privacy value.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.ConvexPolygon.Read(System.IO.BinaryReader)">
      <summary>
            Read using a binary reader.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.ConvexPolygon.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.ConvexPolygon.CompareTo(Ubisense.UBuilding.ConvexPolygon)">
      <summary>
            The total ordering is based on the ordering of x coordinates, then y coordinates.  
            Two coordinates are considered equal if they differ by less than 1e-6.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.ConvexPolygon.Equals(Ubisense.UBuilding.ConvexPolygon)">
      <summary>
            True if this.CompareTo(other) == 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.ConvexPolygon.Equals(System.Object)">
      <summary>
            True if this.CompareTo(other) == 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.ConvexPolygon.GetHashCode">
      <summary>
            The exclusive OR of all point hash codes
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.ConvexPolygon.op_Equality(Ubisense.UBuilding.ConvexPolygon,Ubisense.UBuilding.ConvexPolygon)">
      <summary>
            True if this.CompareTo(other) == 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.ConvexPolygon.op_Inequality(Ubisense.UBuilding.ConvexPolygon,Ubisense.UBuilding.ConvexPolygon)">
      <summary>
            True if this.CompareTo(other) != 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.ConvexPolygon.op_LessThan(Ubisense.UBuilding.ConvexPolygon,Ubisense.UBuilding.ConvexPolygon)">
      <summary>
            True if this.CompareTo(other) &lt; 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.ConvexPolygon.op_GreaterThan(Ubisense.UBuilding.ConvexPolygon,Ubisense.UBuilding.ConvexPolygon)">
      <summary>
            True if this.CompareTo(other) &gt; 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBuilding.ConvexPolygon.Points">
      <summary>
            The points of the convex polygon.  No check is made to ensure the polygon is really convex,
            but if it is not then the containment methods will not work.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBuilding.ConvexPolygon.Privacy">
      <summary>
            A value indicating how private a space is, used in route planning.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.Box">
      <summary>
            A 3D double floating point interval expressed by two 3D vectors
            such that Bottom is the box's most negative vertex and
            Top is the box's most positive vertex.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Box.#ctor(Ubisense.UBase.Vector3D,Ubisense.UBase.Vector3D)">
      <summary>
            Create a box containing the coordinate aligned region between two points.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Box.Disjoint(Ubisense.UBase.Box)">
      <summary>
            Return true if the two boxes do not intersect.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Box.Contains(Ubisense.UBase.Box)">
      <summary>
            Return true if this box Contains the other.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Box.Translate(Ubisense.UBase.Vector3D)">
      <summary>
            Move the box by subtracting the given vector.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Box.Scale(System.Double)">
      <summary>
            Scale the box by dividing by the given Scale.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Box.Clip(Ubisense.UBase.Box)">
      <summary>
            Clip this box to the given other box.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Box.Extend(Ubisense.UBase.Box)">
      <summary>
            Extend this box to contain the other box.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Box.ToString(System.String,System.IFormatProvider)">
      <summary>
            Convert a box to a string.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Box.Read(System.IO.BinaryReader)">
      <summary>
            Read using a binary reader.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Box.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.Box.Bottom">
      <summary>
            The more negative point; i.e. the point closer to negative infinity.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.Box.Top">
      <summary>
            The more positive point; i.e. the point closer to positive infinity.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBuilding.ComparablePair`2">
      <summary>
            A pair of values that is comparable using a lexicographic ordering, unlike the
            standard C# KeyValuePair that does not support compare operations.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="F:Ubisense.UBuilding.ComparablePair`2.Key">
      <summary>
            The first element of the pair
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="F:Ubisense.UBuilding.ComparablePair`2.Value">
      <summary>
            The second element of the pair
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.ComparablePair`2.#ctor(`0,`1)">
      <summary>
            Create a pair with values specified.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.ComparablePair`2.CompareTo(Ubisense.UBuilding.ComparablePair{`0,`1})">
      <summary>
            Compare using a lexiocgraphic ordering  
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.ComparablePair`2.Equals(Ubisense.UBuilding.ComparablePair{`0,`1})">
      <summary>
            True if this.CompareTo(other) is 0   
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.ComparablePair`2.Equals(System.Object)">
      <summary>
            True if this.CompareTo(other) is 0   
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.ComparablePair`2.GetHashCode">
      <summary>
            The exclusive OR of the hashes for Key and Value  
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.ComparablePair`2.op_Equality(Ubisense.UBuilding.ComparablePair{`0,`1},Ubisense.UBuilding.ComparablePair{`0,`1})">
      <summary>
            True if this.CompareTo(other) = 0   
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.ComparablePair`2.op_Inequality(Ubisense.UBuilding.ComparablePair{`0,`1},Ubisense.UBuilding.ComparablePair{`0,`1})">
      <summary>
            True if this.CompareTo(other) != 0  
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.ComparablePair`2.op_LessThan(Ubisense.UBuilding.ComparablePair{`0,`1},Ubisense.UBuilding.ComparablePair{`0,`1})">
      <summary>
            True if this.CompareTo(other) &lt; 0  
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBuilding.ComparablePair`2.op_GreaterThan(Ubisense.UBuilding.ComparablePair{`0,`1},Ubisense.UBuilding.ComparablePair{`0,`1})">
      <summary>
            True if this.CompareTo(other) &gt; 0   
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.ICursor`1">
      <summary>
            A cursor returned by a query on a table of the given row type.
            </summary>
      <package>UbisensePlatform.dll</package>
      <typeparam name="Rowtype">The type of row in the table</typeparam>
    </member>
    <member name="P:Ubisense.UBase.ICursor`1.RowId">
      <summary>
            Unique identifier of the row of Current in the table.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.License">
      <summary>
            A license to run an application on a machine under the given constraints.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="F:Ubisense.UBase.License.application">
      <summary>
            The application or module that is licensed.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="F:Ubisense.UBase.License.host">
      <summary>
            The host id on which the license is valid, empty for a license not bound to a host.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.License.ULongToDateTime(System.UInt64)">
      <summary>
            Extract a DateTime value from a 64 bit value that represents
            the number of nanoseconds elapsed since the Ubisense origin time.
            The Ubisense time origin is 00:00:00 UTC (01/01/1970)
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.License.DateTimeToULong(System.DateTime)">
      <summary>
            Convert a DateTime value into a 64 bit value that represents
            the number of nanoseconds elapsed since the Ubisense origin time.
            The Ubisense time origin is 00:00:00 UTC (01/01/1970)
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.License.Owner">
      <summary>
            The owner of the license, to whom it was issued.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.License.ValidFrom">
      <summary>
            When the license begins.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.License.ValidTo">
      <summary>
            When the license ends.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.License.Capabilities">
      <summary>
            Capabilities included in this license.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.Line">
      <summary>
            A 2D line defined as the span between two points.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Line.#ctor(Ubisense.UBase.Vector2D,Ubisense.UBase.Vector2D)">
      <summary>
            Create a line between two points.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Line.Intersects(Ubisense.UBase.Line)">
      <summary>
            Return true if this line Intersects with another.
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="l">The line to test Intersection against</param>
      <returns>True if the lines intersect within their respective begin and end intervals</returns>
    </member>
    <member name="M:Ubisense.UBase.Line.Intersection(Ubisense.UBase.Line)">
      <summary>Returns the point where two lines intersect</summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Line.Contains(Ubisense.UBase.Vector2D)">
      <summary>
            Tests whether a point lies on this line.
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="p">The point to test</param>
      <returns>True if the point lies on the line, between the end points.</returns>
    </member>
    <member name="M:Ubisense.UBase.Line.SquaredDistance(Ubisense.UBase.Vector2D)">
      <summary>
            Return the squared distance to the nearest point on the line.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Line.ToString(System.String,System.IFormatProvider)">
      <summary>
            Convert a line to a string.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Line.CompareTo(Ubisense.UBase.Line)">
      <summary>
            Defines a total ordering of lines.  Order is based on the ordering of begin, then of end.
            </summary>
      <package>UbisensePlatform.dll</package>
      <seealso cref="M:Ubisense.UBase.Vector2D.CompareTo(Ubisense.UBase.Vector2D)" />
    </member>
    <member name="M:Ubisense.UBase.Line.Read(System.IO.BinaryReader)">
      <summary>
            Read using a binary reader.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Line.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.Line.Begin">
      <summary>
            The start of the line.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.Line.End">
      <summary>
            The end of the line.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.USpatial.Shape">
      <summary>
            A Shape is either a circular or polygonal prism.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.USpatial.Shape.GetVariety">
      <summary>
            Get the GetVariety of shape that this is.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.USpatial.Shape.Check(Ubisense.USpatial.Shape)">
      <summary>
            Check whether this shape Contains another shape.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.USpatial.Shape.Contains(Ubisense.UBase.Vector2D)">
      <summary>Return true if the shape contains point p in 2D.</summary>
      <package>UbisensePlatform.dll</package>
      <remarks>
            Derived from the comp.graphics.algorithms FAQ
            http://exaflop.org/docs/cgafaq/
            Subject 2.03: How do I find if a point lies within a polygon?
            The definitive reference is "Vector2D in Polyon Strategies"
            by Eric Haines [Gems IV] pp. 24-46.
            </remarks>
    </member>
    <member name="M:Ubisense.USpatial.Shape.SquaredDistance(Ubisense.UBase.Vector2D)">
            The minimum squared distance from a line on the
            polygon to the point p
        </member>
    <member name="M:Ubisense.USpatial.Shape.TransformShape(Ubisense.UBase.Position)">
            Transform from the old to new transforms
        </member>
    <member name="M:Ubisense.USpatial.Shape.GetPolygon(System.Collections.Generic.List{Ubisense.UBase.Vector2D})">
            Return the points of the shape if it is a polygon.
        </member>
    <member name="M:Ubisense.USpatial.Shape.GetCircle(Ubisense.UBase.Vector2D@,System.Double@)">
            Return the centre and radius of the shape if it is a circle.
        </member>
    <member name="M:Ubisense.USpatial.Shape.#ctor(Ubisense.UBase.Vector2D,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Create a circular shape.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.USpatial.Shape.#ctor(System.Collections.Generic.List{Ubisense.UBase.Vector2D},System.Double,System.Double,System.Boolean)">
      <summary>
            Create a polygonal shape.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.USpatial.Shape.#ctor(Ubisense.UBase.Box,System.Double,System.Double,System.Boolean)">
      <summary>
            Create a circular shape around a box.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.USpatial.Shape.#ctor">
      <summary>
            Construct an empty shape.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.USpatial.Shape.ToString(System.String,System.IFormatProvider)">
      <summary>
            Convert a box to a string.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.USpatial.Shape.Read(System.IO.BinaryReader)">
      <summary>
            Read using a binary reader.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.USpatial.Shape.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.USpatial.Shape.Points">
      <summary>
            The current points for the outline of the shape.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.USpatial.Shape.OriginalPoints">
      <summary>
            The pre-transform points for the outline of the shape.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.USpatial.Shape.Top">
      <summary>
            The top of the shape's vertical extent.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.USpatial.Shape.Bottom">
      <summary>
            The bottom of the shape's vertical extent.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.USpatial.Shape.Transform">
      <summary>
            Offset and rotation to take OriginalPoints to Points.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.USpatial.Shape.Absolute">
      <summary>
            Whether the shape is absolute. Relative shapes move with their owner objects,
            where absolute shapes remain fixed.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.USpatial.Shape.BoundingBox">
      <summary>
            The bounding box of the shape.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.USpatial.Shape.BoundingBoxValid">
      <summary>
            If you change the points, top or bottom, set BoundingBoxValid to false.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.USpatial.Shape.Variety">
      <summary>Varieties of shape</summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.USpatial.Shape.Status">
      <summary>
            The ways in which the shape can relate to another shape
            Contains = this shape contains the other; 
            Disjoint = this shape is completely separate from the other;
            Overlaps = neither of the other ways applies.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.MACConverter">
      <summary>
            A type converter for converting string to MAC address.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MACConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary></summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MACConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary></summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MACConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary></summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MACConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary></summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MACConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary></summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MACConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary></summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.MAC">
      <summary>
            An ethernet media access control address.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="F:Ubisense.UBase.MAC.Nil">
      <summary>
            Create a new MAC address 00:00:00:00:00:00
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MAC.#ctor">
      <summary>
            Create a new MAC address 00:00:00:00:00:00
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MAC.#ctor(System.Byte[])">
      <summary>
            Create a new MAC address with the specified values
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MAC.#ctor(Ubisense.UBase.MAC)">
      <summary>
            Create a new MAC address copied from other
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MAC.#ctor(System.String)">
      <summary>
            Construct a mac address from a string.  Constructs the Nil address if string is not valid.
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="s"></param>
    </member>
    <member name="M:Ubisense.UBase.MAC.Parse(System.String)">
      <summary>
            Parse a string into a mac address. On failure return the Nil mac address (all zeros).
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MAC.ToString">
      <summary>
            Return a string representation of the address in AB:CD:EF:01:23:45 form
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MAC.ToString(System.String,System.IFormatProvider)">
      <summary>
            Return a string representation of the address in AB:CD:EF:01:23:45 form
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MAC.Equals(System.Object)">
      <summary>
            Compares this object to another object.
            </summary>
      <param name="obj">The object to compare with.</param>
      <returns>False if <paramref name="obj" /> is not of type <c>Ubisense.UBase.MAC</c>; otherwise true iff the two objects represent the same address.</returns>
    </member>
    <member name="M:Ubisense.UBase.MAC.CompareTo(Ubisense.UBase.MAC)">
      <summary>
            Compare the bytes in lexicographic order
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MAC.Read(System.IO.BinaryReader)">
      <summary>
            Read a MAC address from a stream
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MAC.Write(System.IO.BinaryWriter)">
      <summary>
            Write a MAC address to a stream
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.MAC.Address">
      <summary>
            The address as a six-byte array
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.MAC.Item(System.Int32)">
      <summary>
            Get the nth byte of the address, where 0 &lt;= n &lt; 6
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.Position">
      <summary>
            A Position represents a 3D translation and orientation.
            </summary>
      <package>UbisensePlatform.dll</package>
      <seealso cref="T:Ubisense.UBase.Vector3D" />
      <seealso cref="T:Ubisense.UBase.Quaternion" />
    </member>
    <member name="M:Ubisense.UBase.Position.#ctor(Ubisense.UBase.Vector3D,Ubisense.UBase.Quaternion)">
      <summary>
            Create a position from a point and rotation.  The orientation is a rotation from the x-axis.
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="p">The point</param>
      <param name="r">The orientation</param>
    </member>
    <member name="M:Ubisense.UBase.Position.#ctor(Ubisense.UBase.Vector3D@,Ubisense.UBase.Quaternion@)">
      <summary>
            Create a position from a point and rotation.  The orientation is a rotation from the x-axis.
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="p">The point</param>
      <param name="r">The orientation</param>
    </member>
    <member name="M:Ubisense.UBase.Position.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Crate a position from three coordinates, and a rotation about an axis.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Position.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a position from three coordinates, and a rotation about the z-axis.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Position.ToString(System.String,System.IFormatProvider)">
      <summary>
            Return a readable position in the form {translation x rotation}
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Position.Read(System.IO.BinaryReader)">
      <summary>
            Read from a stream
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Position.Write(System.IO.BinaryWriter)">
      <summary>
            Write to a stream
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.Position.P">
      <summary>
            The translation component of the position
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.Position.R">
      <summary>
            The rotation component of the position
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.Quaternion">
      <summary>
            A Quaternion is used to represent a rotation.
            </summary>
      <remarks>
            Be careful not to use a default constructed
            Quaternion, because it is not correctly normalized.  This cannot be
            fixed with Quaternion as a struct because .NET does not allow definition of
            a default explicit constructor for a struct.
            </remarks>
      <package>UbisensePlatform.dll</package>
      <seealso cref="T:Ubisense.UBase.Position" />
    </member>
    <member name="F:Ubisense.UBase.Quaternion.Identity">
      <summary>
            A quaternion representing no rotation.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>Construct a quaternion where a is the real part and b,c,d
            are the imaginary parts.</summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Quaternion.#ctor(Ubisense.UBase.Vector3D)">
      <summary>Make a quaternion representing the 3D vector v.</summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Quaternion.#ctor(Ubisense.UBase.Vector3D@)">
      <summary>Make a quaternion representing the 3D vector v.</summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Quaternion.#ctor(Ubisense.UBase.Vector3D,System.Double)">
      <summary>Make a quaternion representing the rotation by angle radians
            about axis.</summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Quaternion.#ctor(Ubisense.UBase.Vector3D@,System.Double)">
      <summary>Make a quaternion representing the rotation by angle radians
            about axis.</summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Quaternion.Normalize">
      <summary>Normalize a quaternion.</summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Quaternion.ToEuler(System.Double@,System.Double@,System.Double@)">
      <summary>
            Convert quaternion to euler angles.  Using a right-handed
            coordinate system, rotation is by roll around positive x
            axis, then by pitch around negative y axis, then by yaw
            around positive z axis.  Hence yaw is positive to the left,
            pitch is positive up, and roll is clockwise.  Euler angles
            are in radians.  Pitch values are rounded in case of Gimbal
            lock (pitch very close to +/- 90 degrees).
            </summary>
      <package>UbisensePlatform.dll</package>
      <seealso cref="M:Ubisense.UBase.Quaternion.FromEuler(System.Double,System.Double,System.Double)" />
    </member>
    <member name="M:Ubisense.UBase.Quaternion.FromEuler(System.Double,System.Double,System.Double)">
      <summary>
            Convert from euler angles to this quaternion. See ToEuler
            for sense of angles.  Euler angles are in radians.
            </summary>
      <package>UbisensePlatform.dll</package>
      <seealso cref="M:Ubisense.UBase.Quaternion.ToEuler(System.Double@,System.Double@,System.Double@)" />
    </member>
    <member name="M:Ubisense.UBase.Quaternion.op_Addition(Ubisense.UBase.Quaternion,Ubisense.UBase.Quaternion)">
      <summary>
            Add two quaternions - useful for slerping.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Quaternion.op_Multiply(Ubisense.UBase.Quaternion,Ubisense.UBase.Quaternion)">
      <summary>
            Multiply two quaternions, giving the rotation y followed by the rotation x.
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="x">The second rotation to apply.</param>
      <param name="y">The first rotation to apply.</param>
      <returns>Composed rotatation r = x*y</returns>
    </member>
    <member name="M:Ubisense.UBase.Quaternion.op_Multiply(System.Double,Ubisense.UBase.Quaternion)">
      <summary>
            Multiply by a scalar.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Quaternion.op_Division(Ubisense.UBase.Quaternion,System.Double)">
      <summary>Divide by a scalar.</summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Quaternion.slerp(Ubisense.UBase.Quaternion@,Ubisense.UBase.Quaternion@,System.Double)">
      <summary>
            Spherical interpolation between two quaternions. 
            </summary>
      <package>UbisensePlatform.dll</package>
      <returns>If t=0, return q0. If t=1 return q1.  
            Else return a spherical linear interpolation between q0 and q1.</returns>
      <remarks>The quaternions should be normalised.</remarks>
    </member>
    <member name="M:Ubisense.UBase.Quaternion.slerp(Ubisense.UBase.Quaternion,Ubisense.UBase.Quaternion,System.Double)">
      <summary>
            Spherical interpolation between two quaternions. 
            </summary>
      <package>UbisensePlatform.dll</package>
      <returns>If t=0, return q0. If t=1 return q1.  
            Else return a spherical linear interpolation between q0 and q1.</returns>
      <remarks>The quaternions should be normalised.</remarks>
    </member>
    <member name="M:Ubisense.UBase.Quaternion.rotate(Ubisense.UBase.Vector3D@)">
      <summary>
            Rotate a vector by this quaternion.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Quaternion.rotate(Ubisense.UBase.Vector3D)">
      <summary>
            Rotate a vector by this quaternion.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Quaternion.conjugate">
      <summary>
            Conjugate of a quaternion.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Quaternion.Dot(Ubisense.UBase.Quaternion@,Ubisense.UBase.Quaternion@)">
      <summary>
            Dot product of two quaternions.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Quaternion.Dot(Ubisense.UBase.Quaternion,Ubisense.UBase.Quaternion)">
      <summary>
            Dot product of two quaternions.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Quaternion.Read(System.IO.BinaryReader)">
      <summary>
            Read from a stream
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Quaternion.Write(System.IO.BinaryWriter)">
      <summary>
            Write to a stream
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Quaternion.ToString(System.String,System.IFormatProvider)">
      <summary>
            Return a readable form looking like [a,b,c,d]
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.Quaternion.A">
      <summary>
            The real part of the quaternion.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.Quaternion.B">
      <summary>
            The first imaginary part.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.Quaternion.C">
      <summary>
            The second imaginary part.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.Quaternion.D">
      <summary>
            The third imaginary part.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.Vector2D">
      <summary>
            A Vector2D can represent a 2 dimensional vector or point.  
            It supports all the usual operations on points.
            </summary>
      <package>UbisensePlatform.dll</package>
      <seealso cref="T:Ubisense.UBase.Vector3D" />
    </member>
    <member name="M:Ubisense.UBase.Vector2D.#ctor(System.Double,System.Double)">
      <summary>
            Create a vector with the given x and y components
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector2D.op_Addition(Ubisense.UBase.Vector2D,Ubisense.UBase.Vector2D)">
      <summary>
            Add two vectors
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector2D.op_Subtraction(Ubisense.UBase.Vector2D,Ubisense.UBase.Vector2D)">
      <summary>
            Subtract vector v2 from v1
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector2D.op_Multiply(System.Double,Ubisense.UBase.Vector2D)">
      <summary>
            Multiply v by the scalar s
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector2D.op_Multiply(Ubisense.UBase.Vector2D,System.Double)">
      <summary>
            Multiply v by the scalar s
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector2D.op_Division(Ubisense.UBase.Vector2D,System.Double)">
      <summary>
            Divide v by the scalar s
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector2D.SquaredDistance(Ubisense.UBase.Vector2D,Ubisense.UBase.Vector2D)">
      <summary>
            Return the squared distance between two points.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector2D.SquaredDistance(Ubisense.UBase.Vector2D)">
      <summary>
            Returns the squared distance between this and another point.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector2D.Dot(Ubisense.UBase.Vector2D,Ubisense.UBase.Vector2D)">
      <summary>
            Return the dot product of two vectors.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector2D.Cross(Ubisense.UBase.Vector2D,Ubisense.UBase.Vector2D)">
      <summary>
            Return the vector product of two vectors
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector2D.Norm(Ubisense.UBase.Vector2D)">
      <summary>
            Return the normalised form of v (i.e. v/sqrt(v.v))
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector2D.Read(System.IO.BinaryReader)">
      <summary>
            Read a vector from a stream
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector2D.Write(System.IO.BinaryWriter)">
      <summary>
            Write a vector to a stream
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector2D.ToString(System.String,System.IFormatProvider)">
      <summary>
            Return a readable string in the form {x,y}
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector2D.CompareTo(Ubisense.UBase.Vector2D)">
      <summary>
            The total ordering is based on the ordering of x coordinates, then y coordinates.  
            Two coordinates are considered equal if they differ by less than Math.epsilon.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector2D.Equals(Ubisense.UBase.Vector2D)">
      <summary>
            True if this.CompareTo(other) == 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector2D.Equals(System.Object)">
      <summary>
            True if this.CompareTo(other) == 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector2D.GetHashCode">
      <summary>
            Returns hash(x) XOR hash(y)
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector2D.op_Equality(Ubisense.UBase.Vector2D,Ubisense.UBase.Vector2D)">
      <summary>
            True if this.CompareTo(other) == 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector2D.op_Inequality(Ubisense.UBase.Vector2D,Ubisense.UBase.Vector2D)">
      <summary>
            True if this.CompareTo(other) != 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector2D.op_LessThan(Ubisense.UBase.Vector2D,Ubisense.UBase.Vector2D)">
      <summary>
            True if this.CompareTo(other) &lt; 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector2D.op_GreaterThan(Ubisense.UBase.Vector2D,Ubisense.UBase.Vector2D)">
      <summary>
            True if this.CompareTo(other) &gt; 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.Vector2D.X">
      <summary>
            The x-axis component
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.Vector2D.Y">
      <summary>
            The y-axis component
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.InsertEventHandler`1">
      <summary>
            An event handler function for inserts to a relation
            </summary>
      <package>UbisensePlatform.dll</package>
      <typeparam name="Rowtype">The type of the rows of the associated relation</typeparam>
      <param name="row">The row inserted</param>
    </member>
    <member name="T:Ubisense.UBase.DeleteEventHandler`1">
      <summary>
            An event handler function for deletes from a relation
            </summary>
      <package>UbisensePlatform.dll</package>
      <typeparam name="Rowtype">The type of the rows of the associated relation</typeparam>
      <param name="old">The row deleted</param>
    </member>
    <member name="T:Ubisense.UBase.UpdateEventHandler`1">
      <summary>
            An event handler function for updates to a relation
            </summary>
      <package>UbisensePlatform.dll</package>
      <typeparam name="Rowtype">The type of the rows of the associated relation</typeparam>
      <param name="old">The old value of the row</param>
      <param name="row">The new value of the row</param>
    </member>
    <member name="T:Ubisense.UBase.CommitEventHandler">
      <summary>
            An event handler function for schema commit events 
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.InvalidEventHandler">
      <summary>
            An event handler function for schema invalidation events
            (the events that occur just before the schema is 
            updated due to an establish state)
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.EstablishEventHandler">
      <summary>
            An event handler function for schema establish state events
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UVis.Material">
      <summary>
            A material surface property.  This describes the colour of the material in 
            diffuse, ambient, specular and emissive components.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Material.#ctor(Ubisense.UVis.Colour,Ubisense.UVis.Colour,Ubisense.UVis.Colour,System.Double,Ubisense.UVis.Colour)">
      <summary>
            Construct a material property with flat colour the same as ambient.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Material.#ctor(Ubisense.UVis.Colour,Ubisense.UVis.Colour,Ubisense.UVis.Colour,System.Double,Ubisense.UVis.Colour,Ubisense.UVis.Colour)">
      <summary>
            Construct a material property.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Material.Read(System.IO.BinaryReader)">
      <summary>
            Read using a binary reader.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Material.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Material.Diffuse">
      <summary>
            The diffuse colour of the material. Diffuse reflection is uniform reflection of light
            with no directional dependence for the viewer, such as a matte surface like cardboard.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Material.Ambient">
      <summary>
            The ambient colour of the material.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Material.Specular">
      <summary>
            The specular, or gloss, colour of the material.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Material.Power">
      <summary>
            How wide the specular reflections are.  Lower values give sharper reflections.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Material.Emissive">
      <summary>
            The emissive, or generated, colour of the material.
            Note that the light is not cast onto other objects.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Material.Flat">
      <summary>
            The 2D or flat lighting colour of the material.  This is the colour used when viewing an object in 2d.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UVis.Vertex">
      <summary>
            A mesh vertex has a position and a normal vector.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Vertex.#ctor(Ubisense.UBase.Vector3D,Ubisense.UBase.Vector3D)">
      <summary>
            Construct a vertex.
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="p">The position of the vertex</param>
      <param name="n">The normal of the surface at the vertex</param>
    </member>
    <member name="M:Ubisense.UVis.Vertex.Read(System.IO.BinaryReader)">
      <summary>
            Read using a binary reader.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Vertex.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Vertex.P">
      <summary>
            The position of the vertex.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Vertex.N">
      <summary>
            The normal of the surface at the vertex.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.IMarshaller`1">
      <summary>
            Abstract interface to a marshalling helper class
            </summary>
      <typeparam name="T">The type to marshall</typeparam>
    </member>
    <member name="M:Ubisense.UBase.IMarshaller`1.Marshall(System.IO.BinaryWriter,`0)">
      <summary>
            Marshall into a binary data source, passing by value
            </summary>
      <param name="sink">The output sink for the value</param>
      <param name="value">The entity to be marshalled, passed by value (where possible)</param>
    </member>
    <member name="M:Ubisense.UBase.IMarshaller`1.Marshall(System.IO.BinaryWriter,`0@)">
      <summary>
            Marshall into a binary data source, passing by reference
            </summary>
      <param name="sink">The output sink for the value</param>
      <param name="value">The entity to be marshalled, passed by reference (where possible)</param>
    </member>
    <member name="M:Ubisense.UBase.IMarshaller`1.Unmarshall(System.IO.BinaryReader,`0@)">
      <summary>
            Unmarshall from a binary data source into an out parameter
            </summary>
      <param name="source">The input data source for the value</param>
      <param name="value">The reference to the entity to unmarshall into</param>
    </member>
    <member name="M:Ubisense.UBase.IMarshaller`1.Unmarshall(System.IO.BinaryReader)">
      <summary>
            Unmarshall from a binary data source, returning a new value
            </summary>
      <param name="source">The input data source for the value</param>
      <returns>A new entity with value set by unmarshalling</returns>
    </member>
    <member name="T:Ubisense.UVis.Face">
      <summary>
            A Face gives the indices of the three points making up a face.  This is used to construct a mesh object, such as Mesh1, Mesh2 and Mesh3.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Face.#ctor(System.UInt32,System.UInt32,System.UInt32)">
      <summary>
            Create a face from the points with the given indices in the corresponding list of points or vertices.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Face.Read(System.IO.BinaryReader)">
      <summary>
            Read using a binary reader.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Face.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Face.Index1">
      <summary>
            The index of the first vertex on the face in the corresponding list of points or vertices.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Face.Index2">
      <summary>
            The index of the second vertex on the face in the corresponding list of points or vertices.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Face.Index3">
      <summary>
            The index of the third vertex on the face in the corresponding list of points or vertices.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UVis.Line">
      <summary>
            A line is defined by its end points.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Line.#ctor(Ubisense.UBase.Vector3D,Ubisense.UBase.Vector3D)">
      <summary>
            Create a line between two points.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Line.Read(System.IO.BinaryReader)">
      <summary>
            Read using a binary reader.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Line.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Line.P1">
      <summary>
            The start of the line
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Line.P2">
      <summary>
            The end of the line
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UVis.Transform">
      <summary>
            A transform takes a canonical primitive and transforms it by scaling independently
            in each coordinate, then rotating, then translating.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Transform.#ctor(Ubisense.UBase.Vector3D,Ubisense.UBase.Quaternion,Ubisense.UBase.Vector3D)">
      <summary>
            Create a transform that first scales, then rotates, then offsets an object.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Transform.Read(System.IO.BinaryReader)">
      <summary>
            Read using a binary reader.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Transform.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Transform.Scale">
      <summary>
            The scaling component of the transform
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Transform.Rotate">
      <summary>
            The rotation component of the transform
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Transform.Offset">
      <summary>
            The offset component of the transform
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UVis.Alignment">
      <summary>
            Text alignment enum.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="F:Ubisense.UVis.Alignment.Centre">
      <summary>
            Align the center of the object with the anchor point
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="F:Ubisense.UVis.Alignment.Start">
      <summary>
            Align the start (left or top) of the object with the anchor point.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="F:Ubisense.UVis.Alignment.End">
      <summary>
            Align the end (right or bottom) of the object with the anchor point.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UVis.Primitive">
      <summary>
            The base type for representation primitives.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Primitive.Read(System.IO.BinaryReader)">
      <summary>
            Read a primitive using a binary reader.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Primitive.Write(System.IO.BinaryWriter)">
      <summary>
            Write a primitive to a binary writer.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Primitive.Transform">
      <summary>
            The transform from the canonical object to this primitive.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UVis.Primitive.Type">
      <summary>
            The types of primitive supported.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UVis.Box">
      <summary>
            The canonical box is unit width, height and depth, centred on the origin.  
            A transform is applied to the box primitive.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Box.#ctor(Ubisense.UVis.Transform,System.UInt32)">
      <summary>
            Construct a box primitive with a given surface attribute.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Box.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Box.Attribute">
      <summary>
            The index of the material surface properties in the material list
            of the Rep to which the primitive is added.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UVis.Cylinder">
      <summary>
            The canonical cylinder is centred on the origin, and aligned with
            the z axis, with unit radius and length. 
            A transform is applied to the cylinder primitive.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Cylinder.#ctor(Ubisense.UVis.Transform,System.UInt32)">
      <summary>
            Construct a cylinder primitive with a given surface attribute.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Cylinder.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Cylinder.Attribute">
      <summary>
            The index of the material surface properties in the material list
            of the Rep to which the primitive is added.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UVis.Sphere">
      <summary>
            The canonical sphere is centred on the origin with unit radius. 
            A transform is applied to the sphere primitive.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Sphere.#ctor(Ubisense.UVis.Transform,System.UInt32)">
      <summary>
            Construct a sphere primitive with a given surface attribute.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Sphere.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Sphere.Attribute">
      <summary>
            The index of the material surface properties in the material list
            of the Rep to which the primitive is added.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UVis.Text2D">
      <summary>
            Represents text rendered horizontally in the camera plane. The text
            is drawn as follows:
            <list type="bullet"><item><description>Project the reference point to give p</description></item><item><description>Calculate s, the equivalent in the camera plane of a unit
            length in the world at the reference point</description></item><item><description>Calculate the point in the camera plane, c = (p + s*offset)</description></item><item><description>Calculate the height of the text in the camera plane hp = s*h</description></item><item><description>Draw the text horizontally in the camera plane, according
            to alignments ha and va relative to c, and with height hp</description></item></list></summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Text2D.#ctor(System.String,Ubisense.UBase.Vector2D,Ubisense.UVis.Alignment,Ubisense.UVis.Alignment,Ubisense.UVis.Transform,System.UInt32)">
      <summary>
            Construct a 2D text primitive. Use the transform scale 'z' value to determine
            the text height in metres. Use alignments so the text begins, ends, or is
            centred on the point determined by the offset.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Text2D.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Text2D.Text">
      <summary>
            The text to show.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Text2D.Offset">
      <summary>
            2D offset of anchor point from reference point.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Text2D.HorizontalAlignment">
      <summary>
            Horizontal alignment of the text to the anchor point.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Text2D.VerticalAlignment">
      <summary>
            Vertical alignment of text to the anchor point.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Text2D.Height">
      <summary>
            Rendered height of text in metres.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Text2D.Attribute">
      <summary>
            The index of the material surface properties in the material list
            of the Rep to which the primitive is added.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UVis.Text3D">
      <summary>
            Represents text drawn in 3D.  The canonical frame for the
            text is in in the XY plane, with X axis being left to right
            along the string.  The centre of the string is at the
            origin, and it has unit width.
            A transform is applied to the text primitive.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Text3D.#ctor(System.String,Ubisense.UVis.Transform,System.UInt32)">
      <summary>
            Construct a Text3D primitive with a given surface attribute.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Text3D.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Text3D.Text">
      <summary>
            The text string to render.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Text3D.Attribute">
      <summary>
            The index of the material surface properties in the material list
            of the Rep to which the primitive is added.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UVis.Mesh1">
      <summary>
            Represents a mesh of triangular faces, sharing a single surface attribute.  The list of points
            defines the 3d points of the mesh.  Each face then refers to three of the points by their index.
            The normals are set so that each face is rendered flat, with normal defined by a counter-clockwise
            winding rule for the three points. 
            This mesh is then transformed.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Mesh1.#ctor(System.Collections.Generic.List{Ubisense.UBase.Vector3D},System.Collections.Generic.List{Ubisense.UVis.Face},Ubisense.UVis.Transform,System.UInt32)">
      <summary>
            Construct a mesh primitive with a given surface attribute.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Mesh1.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Mesh1.Points">
      <summary>
            The points used as vertices in the mesh faces.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Mesh1.Faces">
      <summary>
            The faces of the mesh.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Mesh1.Attribute">
      <summary>
            The index of the material surface properties in the material list
            of the Rep to which the primitive is added.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UVis.Mesh2">
      <summary>
            As Mesh1, but with each face having a surface attribute.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Mesh2.#ctor(System.Collections.Generic.List{Ubisense.UBase.Vector3D},System.Collections.Generic.List{Ubisense.UVis.Face},Ubisense.UVis.Transform,System.Collections.Generic.List{System.UInt32})">
      <summary>
            Construct a mesh primitive with individual surface attributes.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Mesh2.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Mesh2.Points">
      <summary>
            The points used as vertices of the mesh faces.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Mesh2.Faces">
      <summary>
            The faces of the mesh.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Mesh2.Attributes">
      <summary>
            The indices of the material surface properties for each face in the material list
            of the Rep to which the primitive is added.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UVis.Mesh3">
      <summary>
            As Mesh1, but with surface normals for each vertex.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Mesh3.#ctor(System.Collections.Generic.List{Ubisense.UVis.Vertex},System.Collections.Generic.List{Ubisense.UVis.Face},Ubisense.UVis.Transform,System.UInt32)">
      <summary>
            Construct a mesh primitive with a given surface attribute.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Mesh3.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Mesh3.Vertices">
      <summary>
            The vertices of the mesh.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Mesh3.Faces">
      <summary>
            The faces of the mesh.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Mesh3.Attribute">
      <summary>
            The index of the material surface properties in the material list
            of the Rep to which the primitive is added.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UVis.Mesh4">
      <summary>
            A mesh represented by device specific data.  If not
            supported by a renderer, this will not be displayed. The
            windows renderer assumes the data to be an X format file.  
            This mesh is then transformed.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Mesh4.#ctor(System.Byte[],Ubisense.UVis.Transform,System.UInt32)">
      <summary>
            Construct a device specific mesh primitive with a given surface attribute.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Mesh4.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Mesh4.Data">
      <summary>
            Binary data of the native mesh representation.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Mesh4.Attribute">
      <summary>
            The index of the material surface properties in the material list
            of the Rep to which the primitive is added.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UVis.Lines">
      <summary>
            A list of lines drawn with a given colour.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Lines.#ctor(System.Collections.Generic.List{Ubisense.UVis.Line},Ubisense.UVis.Transform,Ubisense.UVis.Colour)">
      <summary>
            Construct a list of lines.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Lines.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Lines.Contents">
      <summary>
            The list of lines in this primitive.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Lines.Colour">
      <summary>
            The colour of the lines.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UVis.Image">
      <summary>
             An image contained in the memory buffer. The supported
             file formats are: .bmp, .dds, .dib, .jpg, .png, and .tga.
             The image must have dimensions that are powers of two, for
             maximum compatibility with rendering hardware.  Use the
             transform to return an image to its original aspect ratio.
             For example, if the original is 400x120, scale it to
             512x128, and set the transform to have a scale of (0.78125,
             0.9375, 1.0)
            
             The image is rendered onto a rectangle in the XY plane, with
             unit height, and width defined by the aspect ratio of the
             source image. The alignment parameters define placement of
             the origin for the canonical rectangle. This canonical
             rectangle is then transformed.
             </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Image.#ctor(System.Byte[],Ubisense.UVis.Alignment,Ubisense.UVis.Alignment,Ubisense.UVis.Transform)">
      <summary>
            Construct an image primitive.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Image.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Image.Data">
      <summary>
            The binary data for the image.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Image.HorizontalAlignment">
      <summary>
            The horizontal alignment of the image.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Image.VerticalAlignment">
      <summary>
            The vertical alignment of the image.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UVis.NestedRep">
      <summary>
            A nested representation object. A transform is applied to the nested representation.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.NestedRep.#ctor(Ubisense.UVis.Rep,Ubisense.UVis.Transform)">
      <summary>
            Construct a NestedRep primitive.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.NestedRep.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.NestedRep.Rep">
      <summary>
            The nested representation.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UVis.Rep">
      <summary>
            A Rep defines how an object is represented in the visualisation.
            Usage is to construct a Rep and then add materials and primitives to it.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Rep.#ctor">
      <summary>
            Create an empty representation.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Rep.#ctor(System.Collections.Generic.SortedDictionary{System.UInt32,Ubisense.UVis.Material},System.Collections.Generic.LinkedList{Ubisense.UVis.Primitive})">
      <summary>
            Create a representation from materials and primitives.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Rep.Read(System.IO.BinaryReader)">
      <summary>
            Read using a binary reader.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UVis.Rep.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Rep.Materials">
      <summary>
            The material attributes for the representation.  
            Materials are referred to by index into this map within the primitives of the representation.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UVis.Rep.Primitives">
      <summary>
            The list of primitives that make up the representation.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.Vector3D">
      <summary>
            A Vector3D can represent a 3 dimensional vector or point.  
            It supports all the usual operations on points, and interactions with Vector2D and Quaternion.
            </summary>
      <package>UbisensePlatform.dll</package>
      <seealso cref="T:Ubisense.UBase.Vector2D" />
      <seealso cref="T:Ubisense.UBase.Quaternion" />
    </member>
    <member name="M:Ubisense.UBase.Vector3D.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Create the vector (x,y,z)
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector3D.op_Addition(Ubisense.UBase.Vector3D,Ubisense.UBase.Vector3D)">
      <summary>
            Add two vectors
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector3D.op_Subtraction(Ubisense.UBase.Vector3D,Ubisense.UBase.Vector3D)">
      <summary>
            Subtract one vector from the other
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector3D.op_UnaryNegation(Ubisense.UBase.Vector3D)">
      <summary>
            Negate a vector; i.e. return a vector with the same magnitude but opposite direction.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector3D.op_Multiply(System.Double,Ubisense.UBase.Vector3D)">
      <summary>
            Multiply the vector v by the scalar s
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector3D.op_Multiply(Ubisense.UBase.Vector3D,System.Double)">
      <summary>
            Multiply the vector v by the scalar s
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector3D.op_Division(Ubisense.UBase.Vector3D,System.Double)">
      <summary>
            Divide the vector v by the scalar s
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector3D.SquaredDistance(Ubisense.UBase.Vector3D@,Ubisense.UBase.Vector3D@)">
      <summary>
            Return the squared distance between two points.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector3D.SquaredDistance(Ubisense.UBase.Vector3D,Ubisense.UBase.Vector3D)">
      <summary>
            Return the squared distance between two points.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector3D.Dot(Ubisense.UBase.Vector3D@,Ubisense.UBase.Vector3D@)">
      <summary>
            Return the dot product of two vectors.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector3D.Dot(Ubisense.UBase.Vector3D,Ubisense.UBase.Vector3D)">
      <summary>
            Return the dot product of two vectors.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector3D.Cross(Ubisense.UBase.Vector3D,Ubisense.UBase.Vector3D)">
      <summary>
            Return the cross product of two vectors.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector3D.Cross(Ubisense.UBase.Vector3D@,Ubisense.UBase.Vector3D@)">
      <summary>
            Return the cross product of two vectors.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector3D.Norm(Ubisense.UBase.Vector3D@)">
      <summary>
            Return a unit vector with the same direction as v.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector3D.Norm(Ubisense.UBase.Vector3D)">
      <summary>
            Return a unit vector with the same direction as v.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector3D.ToString(System.String,System.IFormatProvider)">
      <summary>
            Return a string showing the vector as {x,y,z}
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector3D.Read(System.IO.BinaryReader)">
      <summary>
            Read a vector from a stream
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Vector3D.Write(System.IO.BinaryWriter)">
      <summary>
            Write a vector to a stream
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.Vector3D.X">
      <summary>
            The x-axis component
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.Vector3D.Y">
      <summary>
            The y-axis component
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.Vector3D.Z">
      <summary>
            The z-axis component
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.ZeroedBinaryStringConverter">
      <summary>
            A type converter for converting string to ZeroedBinaryString.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.ZeroedBinaryStringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary></summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.ZeroedBinaryStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary></summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.ZeroedBinaryStringConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary></summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.ZeroedBinaryStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary></summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.ZeroedBinaryStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary></summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.ZeroedBinaryStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary></summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.ZeroedBinaryString">
      <summary>
            A byte array that is cleared when it is disposed.  This is used to hold sensitive credentials.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="F:Ubisense.UBase.ZeroedBinaryString.MaxLength">
      <summary>
            The maximum length allowed for a credential string.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.ZeroedBinaryString.#ctor">
      <summary>
            Create a zeroed binary string of the minimum length.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.ZeroedBinaryString.#ctor(System.Int32)">
      <summary>
            Construct a zeroed binary string with a given size.
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="size">The number of bytes in the string.  
            This is bound to the range [0,MaxLength].</param>
    </member>
    <member name="M:Ubisense.UBase.ZeroedBinaryString.#ctor(System.Byte[])">
      <summary>
            Construct from a byte array.
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="data">The contents of the zeroed binary string, which is cleared 
            once its contents have been copied.  The length is clipped or extended with 
            zeros to be in the range [0,MaxLength].</param>
    </member>
    <member name="M:Ubisense.UBase.ZeroedBinaryString.#ctor(System.String)">
      <summary>
            Create a ZeroedBinaryString based on the standard string s
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.ZeroedBinaryString.Dispose">
      <summary>
            Clear the string on disposal, writing zeroes over its contents.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.ZeroedBinaryString.Clear">
      <summary>
            Delete the characters in the array, writing zero over them
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.ZeroedBinaryString.Read(System.IO.BinaryReader)">
      <summary>
            Read from a BinaryReader.
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="r">The reader from which to read the string</param>
      <returns></returns>
    </member>
    <member name="M:Ubisense.UBase.ZeroedBinaryString.Write(System.IO.BinaryWriter)">
      <summary>
            Write to a BinaryWriter.
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="w">The writer used to write the string</param>
    </member>
    <member name="M:Ubisense.UBase.ZeroedBinaryString.Equals(System.Object)">
      <summary>
            True if this.CompareTo(obj) = 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.ZeroedBinaryString.GetHashCode">
      <summary>
            A hash obtained from the data string
            but with a function that is not
            equal to the data string hash function.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.ZeroedBinaryString.CompareTo(Ubisense.UBase.ZeroedBinaryString)">
      <summary>
            Compare using a standard string comparison
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.ZeroedBinaryString.Data">
      <summary>
            Get the contents of the string
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.ZeroedBinaryString.Empty">
      <summary>
            Return true if the ZeroedBinaryString contains only 0's.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.UbisenseException">
      <summary>
            The base type of all Ubisense errors.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.UbisenseException.#ctor(System.String)">
      <summary>
            Create a UbisenseException with the specified application exception message
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.UbisenseException.#ctor(System.String,System.Exception)">
      <summary>
            Create a UbisenseException with the specified application exception message
            and inner exception
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.FileException">
      <summary>
            The type of all errors involving file handling operations.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.FileException.#ctor(System.String)">
      <summary>
            Create a FileException with the specified application exception message
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.FileException.#ctor(System.String,System.Exception)">
      <summary>
            Create a FileException with the specified application 
            exception message and inner exception
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.ConsistencyException">
      <summary>
            The type of all errors caused by schema inconsistency, such as
            when a change event for a relation cannot be applied to that
            relation.
            </summary>
      <package>UbisensePlatform.dll</package>
      <remarks>
            Consistency errors often indicate that their is
            a mismatch between client-side and server side schemas, often
            caused when one of the schema versions is out of date.  A
            consistency exception may also be thrown at the server side
            when ApplyPending is not called after a batch of
            InsertPending, UpdatePending, or DeletePending calls.
            </remarks>
    </member>
    <member name="M:Ubisense.UBase.ConsistencyException.#ctor(System.String)">
      <summary>
            Create a ConsistencyException with the specified application exception message
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.ConstraintException`1">
      <summary>
            The type of all table constraint violation errors, such as broken key
            constraints or referential integrity constraints.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.ConstraintException`1.#ctor(System.String,System.UInt64,`0)">
      <summary>
            Create a ConstraintException: this is usually used by Ubisense code
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.ConstraintException`1.RowId">
      <summary>
            The row id of the row that violated the constraint.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.ConstraintException`1.Row">
      <summary>
            The row object that violated the constraint.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.ClientException">
      <summary>
            The type of all errors caused by failure of the client-server protocol,
            such as failure of a client to synchronize with its server or failure 
            of a client's remote procedure call.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.ClientException.#ctor(System.String,System.String)">
      <summary>
            Create a ClientException with the specified properties
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.ClientException.#ctor(System.String,System.String,System.Exception)">
      <summary>
            Create a ClientException with the specified properties
            and inner exception
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.ClientException.ServiceName">
      <summary>
            The name of the service for the client that raised the exception
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.AuthenticationException">
      <summary>
            The type of all errors raised by the authentication
            process, such as when the client has failed to supply the 
            appropriate credentials to connect to its server.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.AuthenticationException.#ctor(System.String,System.String)">
      <summary>
            Create an AuthenticationException with the specified properties
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.AuthenticationException.Service">
      <summary>
            The name of the service for which authentication failed
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.UpcallException">
      <summary>
            The type of all errors thrown by servers and caused by
            errors in the implementation of the upcall part of a remote
            procedure call.  When a server fails in the upcall part
            of an RPC this exception will be raised and the calling
            client will raise a ClientException.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.UpcallException.#ctor(System.String,System.Exception)">
      <summary>
            Create an UpcallException with the specified properties
            and inner exception
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.ContainerMarshaller`3">
      <summary>
            Generic marshaller for any Map, Set, Multimap or Multiset
            </summary>
      <typeparam name="TContainer">The actual type of the Map, Set, Multimap or Multiset</typeparam>
      <typeparam name="TValue">The value type</typeparam>
      <typeparam name="TValueMarshaller">The marshaller for the value type</typeparam>
    </member>
    <member name="M:Ubisense.UBase.ContainerMarshaller`3.Marshall(System.IO.BinaryWriter,`0@)">
      <summary>
            Marshall into a binary data source, passing by reference
            </summary>
      <param name="sink">The output sink for the value</param>
      <param name="value">The entity to be marshalled, passed by reference (where possible)</param>
    </member>
    <member name="M:Ubisense.UBase.ContainerMarshaller`3.Unmarshall(System.IO.BinaryReader,`0@)">
      <summary>
            Unmarshall from a binary data source into an out parameter
            </summary>
      <param name="source">The input data source for the value</param>
      <param name="value">The reference to the entity to unmarshall into</param>
    </member>
    <member name="T:Ubisense.UBase.IObject">
      <summary>
            The abstract interface to a Ubisense object.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.IObject.Narrow(Ubisense.UBase.IObject)">
      <summary>
            Assign another object's type and id to this one iff
            the other object's dynamic type inherits
            from the static type of this object
            </summary>
      <package>UbisensePlatform.dll</package>
      <remarks>
            Sets this to be Nil if other does not inherit from the static type of this object.
            </remarks>
    </member>
    <member name="M:Ubisense.UBase.IObject.Unique">
      <summary>
            Make this object into a new unique object of type StaticType
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.IObject.Nil">
      <summary>
            True iff this object is the Nil object of type StaticType
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.IObject.StaticType">
      <summary>
            The static type of the object
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.IObject.DynamicType">
      <summary>
            The most-derived dynamic type of the object
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.IObject.Id">
      <summary>
            The object's id
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.UObject">
      <summary>
            The base Ubisense object.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.UObject.Narrow(Ubisense.UBase.IObject)">
      <summary>
            Assign another object's type and id to this one iff
            the other object's dynamic type inherits
            from the static type of this object
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.UObject.Unique">
      <summary>
            Make this object into a new unique object of type StaticType
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.UObject.Nil">
      <summary>
            True iff this object is the Nil object of type StaticType
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.UObject.ToString(System.String,System.IFormatProvider)">
      <summary> Returns a String representation of the value of
            this instance of the Symbol class.  The provided
            format specifier and culture-specific format information
             are both ignored.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.UObject.ToString">
      <summary> Returns a String representation of the value of
            this instance of the Symbol class, according to the provided
            format specifier and culture-specific format information
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.UObject.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>
            Create an object given some state.  This is intended only for use
            by Ubisense generated code, which is guaranteed to use the 
            constructor correctly.  Incorrect of the constructor could easily
            break a Ubisense system.  To understand why, suppose there is a unique object of 
            dynamic type T and Id i: this makes the implicit assertion across
            the whole system that i is the id of an object with dynamic type T.
            If we were then to (incorrectly) call UObject(i,T',cookie), where
            T != T', we would be making the implicit assertion across the whole
            system that i is the id of an object with dynamic type T', which
            is inconsistent.  So this would render the whole system inconsistent.
            Therefore:  don't use this constructor!
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="other_id">The id to give the new object</param>
      <param name="other_type">The dynamic type of the new object</param>
      <param name="cookie">A magic number to prevent object creation by the uninitiated</param>
    </member>
    <member name="M:Ubisense.UBase.UObject.Equals(System.Object)">
      <summary>
            True if this.CompareTo(other) = 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.UObject.GetHashCode">
      <summary>
            The exclusive OR of the hash codes of the dynamic type and
            the id of this object.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.UObject.CompareTo(Ubisense.UBase.UObject)">
      <summary>
            Compare by dynamic type and id
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.UObject.Equals(Ubisense.UBase.UObject)">
      <summary>
            True if this.CompareTo(other) = 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.UObject.op_Equality(Ubisense.UBase.UObject,Ubisense.UBase.UObject)">
      <summary>
            True if this.CompareTo(other) = 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.UObject.op_Inequality(Ubisense.UBase.UObject,Ubisense.UBase.UObject)">
      <summary>
            True if this.CompareTo(other) != 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.UObject.op_LessThan(Ubisense.UBase.UObject,Ubisense.UBase.UObject)">
      <summary>
            True if this.CompareTo(other) &lt; 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.UObject.op_GreaterThan(Ubisense.UBase.UObject,Ubisense.UBase.UObject)">
      <summary>
            True if this.CompareTo(other) &gt; 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.UObject.StaticType">
      <summary>
            The static type of the object
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.UObject.DynamicType">
      <summary>
            The most-derived dynamic type of the object
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.UObject.Id">
      <summary>
            The object's id
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UBuilding.ConvexPolygon">
      <summary>
            Class used to marshall and unmarshall the UBuilding.ConvexPolygon class.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.ConvexPolygon.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.ConvexPolygon)">
      <summary>
            Marshall using a binary writer.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.ConvexPolygon.Marshall(System.IO.BinaryWriter,Ubisense.UBuilding.ConvexPolygon@)">
      <summary>
            Marshall using a binary writer.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.ConvexPolygon.Unmarshall(System.IO.BinaryReader,Ubisense.UBuilding.ConvexPolygon@)">
      <summary>
            Unmarshall using a binary reader.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBuilding.ConvexPolygon.Unmarshall(System.IO.BinaryReader)">
      <summary>
            Unmarshall using a binary reader.
            </summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UVis.Rep">
      <summary>
            Class used to marshall and unmarshall the UVis.Rep class.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Rep.Marshall(System.IO.BinaryWriter,Ubisense.UVis.Rep)">
      <summary>
            Marshall using a binary writer.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Rep.Marshall(System.IO.BinaryWriter,Ubisense.UVis.Rep@)">
      <summary>
            Marshall using a binary writer.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Rep.Unmarshall(System.IO.BinaryReader,Ubisense.UVis.Rep@)">
      <summary>
            Unmarshall using a binary reader.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UVis.Rep.Unmarshall(System.IO.BinaryReader)">
      <summary>
            Unmarshall using a binary reader.
            </summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.USpatial.Shape">
      <summary>
            Class used to marshall and unmarshall the USpatial.Shape class.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Shape.Marshall(System.IO.BinaryWriter,Ubisense.USpatial.Shape)">
      <summary>
            Marshall using a binary writer.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Shape.Marshall(System.IO.BinaryWriter,Ubisense.USpatial.Shape@)">
      <summary>
            Marshall using a binary writer.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Shape.Unmarshall(System.IO.BinaryReader,Ubisense.USpatial.Shape@)">
      <summary>
            Unmarshall using a binary reader.
            </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.USpatial.Shape.Unmarshall(System.IO.BinaryReader)">
      <summary>
            Unmarshall using a binary reader.
            </summary>
    </member>
    <member name="T:Ubisense.UBase.Messages">
      <summary>
            Messages generated by the platform base classes.
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.AuthCancel">
      <summary>
            A message similar to "Authentication was cancelled"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.AuthCredentialsReadError">
      <summary>
            A message similar to "failed to unmarshall credentials from stream"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.AuthDialogConjunction">
      <summary>
            A message similar to ", "
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.AuthDialogConjunctionLast">
      <summary>
            A message similar to " or "
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.AuthDialogPrompt">
      <summary>
            A message similar to "Please login as "
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.AuthInvalidQueryAuth">
      <summary>
            A message similar to "QueryAuth must be called from within GetCredentials method"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.AuthLargeIntegerReadError">
      <summary>
            A message similar to "failed to unmarshall large integer from stream"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.AuthorityNotValidUntil">
      <summary>
            A message similar to "Authority expired on {0}"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.AuthorityExpiredOn">
      <summary>
            A message similar to "Authority will not be valid until {0}"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.AuthoritySignatureInvalid">
      <summary>
            A message similar to "Signature of authority is invalid"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.AuthZeroedBinaryStringReadError">
      <summary>
            A message similar to "failed to unmarshall credential string from stream"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.ColourFormatString">
      <summary>
            A message similar to "[red:{0}, green:{1}, blue:{2}, alpha:{3}]"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.LicenseCouldNotBeRead">
      <summary>
            A message similar to "Could not read valid license from file "{0}", error was "{1}""
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.LicenseDurationLongerThanAuthorityMax">
      <summary>
            A message similar to "License duration is longer than maximum for authority"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.LicenseExpiryAfterAuthority">
      <summary>
            A message similar to "License expiry date is after the expiry date of the signature authority"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.LicenseFileNotFound">
      <summary>
            A message similar to "License file "{0}" not found"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.LicenseForWrongApplication">
      <summary>
            A message similar to "License file is for application {0} not for {1} "
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.LicenseNoLongerValid">
      <summary>
            A message similar to "License is no longer valid"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.LicenseNotForThisHost">
      <summary>
            A message similar to "License is not for this host"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.LicenseNotFoundForMachine">
      <summary>
            A message similar to "License was not found for this machine"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.LicenseNotYetValid">
      <summary>
            A message similar to "License is not yet valid"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.LicenseSignatureInvalid">
      <summary>
            A message similar to "Signature of license is invalid"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.LicenseUnlimitedButAuthorityDurationNot">
      <summary>
            A message similar to "License is unlimited but authority duration is not"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.LicenseUnlimitedButAuthorityNot">
      <summary>
            A message similar to "License is unlimited but authority is not"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.MarshallingUBinaryWriterDateTime">
      <summary>
            A message similar to "DateTime cannot be represented in Ubisense"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.MarshallingUBinaryWriterIPV4">
      <summary>
            A message similar to "Ubisense platform currently only supports IPv4 endpoints"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.NullIteratorDereference">
      <summary>
            A message similar to "Attempt to dereference the iterator 'End'"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.RepresentationFormatString">
      <summary>
            A message similar to "[diffuse:{0}, ambient:{1}, specular:{2}, emissive:{3}, power:{4}]"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.ServicesFragmentedMessageOverflow">
      <summary>
            A message similar to "memory buffer too large to fragment with this fragment size"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.ServicesInvokeHeaderReadError">
      <summary>
            A message similar to "failed to unmarshall header from stream"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.ServicesServiceFinderEmptyName">
      <summary>
            A message similar to "service name cannot be an empty string"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.ServicesServiceFinderNullName">
      <summary>
            A message similar to "service name cannot be null"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.SocketsUDPSocketImplNetworkSocketNotBound">
      <summary>
            A message similar to "socket is not bound"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.TESCannotSavePersistent">
      <summary>
            A message similar to "Cannot save schema to persistent files. Duplicate servers running?"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.TESClientCannotReadGroup">
      <summary>
            A message similar to "{0}: cannot read group from service response"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.TESClientContactingService">
      <summary>
            A message similar to "{0}: attempting to contact service"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.TESClientFailure">
      <summary>
            A message similar to "cannot sync with service"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.TESClientVersion">
      <summary>
            A message similar to "{0}: wrong schema version - you may need to upgrade"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.TESIndexDatalessTable">
      <summary>
            A message similar to "cannot add an index to a dataless table"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.TESIsKeyViolated">
      <summary>
            A message similar to "key constraint violated"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.TESIsReferencedViolated">
      <summary>
            A message similar to "is referenced constraint violated"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.TESReferencesViolated">
      <summary>
            A message similar to "references constraint violated"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.TESTableInsertExistingRowId">
      <summary>
            A message similar to "inserted a row with an id already in the table"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.TESTableRemoveMissingRowId">
      <summary>
            A message similar to "removed a row with an id not in the table"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.TESTableUpdateMissingRowId">
      <summary>
            A message similar to "updated a row with an id not in the table"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.TESTableWrongTableIndex">
      <summary>
            A message similar to "table received a change for a different table index"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.TESWriteTransactionCannotNest">
      <summary>
            A message similar to "cannot nest a batched transaction"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.TESWriteTransactionCannotSetTransaction">
      <summary>
            A message similar to "can only set transaction number on a batched write transaction"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.TESCannotSyncSRMReceiver">
      <summary>
            A message similar to "Cannot save schema to persistent files. Duplicate servers running?"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.TypesIdReadError">
      <summary>
            A message similar to "failed to unmarshall id from stream"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.TypesRedBlackEnumeratorInvalid">
      <summary>
            A message similar to "cannot access value of enumerator when state is invalid"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.TypesRedBlackKeyNotFound">
      <summary>
            A message similar to "RedBlack tree is empty"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.TypesRedBlackKeyNull">
      <summary>
            A message similar to "RedBlackNode key must not be null"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.TypesRedBlackNotComparable">
      <summary>
            A message similar to "Nether key objects implement IComparable"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.TypesRedBlackReadError">
      <summary>
            A message similar to "failed to unmarshall map from stream"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.UbisenseMarshalling">
      <summary>
            A message similar to "Failed to marshall value representation to data stream"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.UbisenseUnmarshalling">
      <summary>
            A message similar to "Failed to unmarshall legal Ubisense value representation from data stream"
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.LicenseError">
      <summary>
              Looks up a localized string similar to "License Error".
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.LicenseNotFound">
      <summary>
              Looks up a localized string similar to "License Not Found".
            </summary>
    </member>
    <member name="P:Ubisense.UBase.Messages.CapabilitiesSignatureInvalid">
      <summary>
              Looks up a localized string similar to "Capabilities Signature Invalid".
            </summary>
    </member>
    <member name="T:PublicUNET.Resources.Messages">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.AuthCancel">
      <summary>
              Looks up a localized string similar to Authentication was cancelled.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.AuthCredentialsReadError">
      <summary>
              Looks up a localized string similar to failed to unmarshall credentials from stream.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.AuthDialogConjunction">
      <summary>
              Looks up a localized string similar to , .
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.AuthDialogConjunctionLast">
      <summary>
              Looks up a localized string similar to  or .
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.AuthDialogPrompt">
      <summary>
              Looks up a localized string similar to Please login as .
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.AuthInvalidQueryAuth">
      <summary>
              Looks up a localized string similar to QueryAuth must be called from within GetCredentials method.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.AuthLargeIntegerReadError">
      <summary>
              Looks up a localized string similar to failed to unmarshall large integer from stream.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.AuthorityExpiredOn">
      <summary>
              Looks up a localized string similar to Authority expired on {0}.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.AuthorityNotValidUntil">
      <summary>
              Looks up a localized string similar to Authority will not be valid until {0}.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.AuthoritySignatureInvalid">
      <summary>
              Looks up a localized string similar to Signature of authority is invalid.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.AuthZeroedBinaryStringReadError">
      <summary>
              Looks up a localized string similar to failed to unmarshall credential string from stream.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.CapabilitiesSignatureInvalid">
      <summary>
               Looks up a localized string similar to The signature of the site licenses is invalid.
            
            Application will exit..
             </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.ColourFormatString">
      <summary>
              Looks up a localized string similar to [red:{0}, green:{1}, blue:{2}, alpha:{3}].
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.LicenseCouldNotBeRead">
      <summary>
              Looks up a localized string similar to Could not read valid license from file "{0}", error was "{1}".
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.LicenseDurationLongerThanAuthorityMax">
      <summary>
              Looks up a localized string similar to License duration is longer than maximum for authority.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.LicenseError">
      <summary>
              Looks up a localized string similar to License Error.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.LicenseExpiryAfterAuthority">
      <summary>
              Looks up a localized string similar to License expiry date is after the expiry date of the signature authority.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.LicenseFileNotFound">
      <summary>
              Looks up a localized string similar to License file "{0}" not found.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.LicenseForWrongApplication">
      <summary>
              Looks up a localized string similar to License file is for application {0} not for {1} .
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.LicenseNoLongerValid">
      <summary>
              Looks up a localized string similar to License is no longer valid.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.LicenseNotForThisHost">
      <summary>
              Looks up a localized string similar to License is not for this host.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.LicenseNotFound">
      <summary>
              Looks up a localized string similar to License was not found for this machine.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.LicenseNotFoundForMachine">
      <summary>
              Looks up a localized string similar to License was not found for this machine.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.LicenseNotYetValid">
      <summary>
              Looks up a localized string similar to License is not yet valid.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.LicenseSignatureInvalid">
      <summary>
              Looks up a localized string similar to Signature of license is invalid.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.LicenseUnlimitedButAuthorityDurationNot">
      <summary>
              Looks up a localized string similar to License is unlimited but authority duration is not.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.LicenseUnlimitedButAuthorityNot">
      <summary>
              Looks up a localized string similar to License is unlimited but authority is not.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.MarshallingUBinaryWriterDateTime">
      <summary>
              Looks up a localized string similar to DateTime cannot be represented in Ubisense.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.MarshallingUBinaryWriterIPV4">
      <summary>
              Looks up a localized string similar to Ubisense platform currently only supports IPv4 endpoints.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.NullIteratorDereference">
      <summary>
              Looks up a localized string similar to Attempt to dereference the iterator 'End'.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.RepresentationFormatString">
      <summary>
              Looks up a localized string similar to [diffuse:{0}, ambient:{1}, specular:{2}, emissive:{3}, power:{4}].
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.ServicesFragmentedMessageOverflow">
      <summary>
              Looks up a localized string similar to memory buffer too large to fragment with this fragment size.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.ServicesInvokeHeaderReadError">
      <summary>
              Looks up a localized string similar to failed to unmarshall header from stream.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.ServicesServiceFinderEmptyName">
      <summary>
              Looks up a localized string similar to service name cannot be an empty string.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.ServicesServiceFinderNullName">
      <summary>
              Looks up a localized string similar to service name cannot be null.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.SocketsUDPSocketImplNetworkSocketNotBound">
      <summary>
              Looks up a localized string similar to socket is not bound.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.TESCannotSavePersistent">
      <summary>
              Looks up a localized string similar to Cannot save schema to persistent files. Duplicate servers running?.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.TESCannotSyncSRMReceiver">
      <summary>
              Looks up a localized string similar to cannot sync with service data stream.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.TESClientCannotReadGroup">
      <summary>
              Looks up a localized string similar to {0}: cannot read group from service response.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.TESClientContactingService">
      <summary>
              Looks up a localized string similar to {0}: attempting to contact service.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.TESClientFailure">
      <summary>
              Looks up a localized string similar to cannot sync with service.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.TESClientVersion">
      <summary>
              Looks up a localized string similar to {0}: wrong schema version - you may need to upgrade.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.TESIndexDatalessTable">
      <summary>
              Looks up a localized string similar to cannot add an index to a dataless table.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.TESIsKeyViolated">
      <summary>
              Looks up a localized string similar to key constraint violated.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.TESIsReferencedViolated">
      <summary>
              Looks up a localized string similar to is referenced constraint violated.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.TESReferencesViolated">
      <summary>
              Looks up a localized string similar to references constraint violated.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.TESTableInsertExistingRowId">
      <summary>
              Looks up a localized string similar to inserted a row with an id already in the table.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.TESTableRemoveMissingRowId">
      <summary>
              Looks up a localized string similar to removed a row with an id not in the table.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.TESTableUpdateMissingRowId">
      <summary>
              Looks up a localized string similar to updated a row with an id not in the table.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.TESTableWrongTableIndex">
      <summary>
              Looks up a localized string similar to table received a change for a different table index.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.TESWriteTransactionCannotNest">
      <summary>
              Looks up a localized string similar to cannot nest a batched transaction.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.TESWriteTransactionCannotSetTransaction">
      <summary>
              Looks up a localized string similar to can only set transaction number on a batched write transaction.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.TypesIdReadError">
      <summary>
              Looks up a localized string similar to failed to unmarshall id from stream.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.TypesRedBlackEnumeratorInvalid">
      <summary>
              Looks up a localized string similar to cannot access value of enumerator when state is invalid.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.TypesRedBlackKeyNotFound">
      <summary>
              Looks up a localized string similar to RedBlack tree is empty.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.TypesRedBlackKeyNull">
      <summary>
              Looks up a localized string similar to RedBlackNode key must not be null.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.TypesRedBlackNotComparable">
      <summary>
              Looks up a localized string similar to Nether key objects implement IComparable.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.TypesRedBlackReadError">
      <summary>
              Looks up a localized string similar to failed to unmarshall map from stream.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.UbisenseMarshalling">
      <summary>
              Looks up a localized string similar to Failed to marshall value representation to data stream.
            </summary>
    </member>
    <member name="P:PublicUNET.Resources.Messages.UbisenseUnmarshalling">
      <summary>
              Looks up a localized string similar to Failed to unmarshall legal Ubisense value representation from data stream.
            </summary>
    </member>
    <member name="T:Ubisense.UCell.CommandLine">
      <summary>
            Retrieve a reference to the object that is passed
            in to a service on the command line when that service
            is started by a Ubisense local controller.  Usually this
            reference is the cell that the service is to be started 
            in.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UCell.CommandLine.Object(System.String[])">
      <summary>
            Retrieve a reference to the object that is passed
            in to a service on the command line when that service
            is started by a Ubisense local controller.  Usually this
            reference is the cell that the service is to be started 
            in.
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="arguments">The command line arguments passed to Main</param>
      <returns>The object reference referred to by the command line</returns>
    </member>
    <member name="M:Ubisense.UBase.HelpFinder.FindHelpFile(System.String)">
      <summary>
            Attempts to find the specified compiled help file.
            </summary>
      <param name="p">The name of the help file, including ".chm"</param>
      <returns>If found, the full path to the help file. Otherwise, the name of the help file.</returns>
    </member>
    <member name="F:Ubisense.UBase.Math.epsilon">
      <summary>
            The value below which differences between real numbers are
            taken to be zero (i.e. if |x - y| &lt; epsilon then x == y).
            By default this is 1e-12.
            </summary>
    </member>
    <member name="M:Ubisense.UBase.Math.eq(System.Double,System.Double)">
      <summary>
            True if the difference between x and y is less than epsilon.
            </summary>
    </member>
    <member name="M:Ubisense.UBase.Math.lt(System.Double,System.Double)">
      <summary>
            True if !eq(x,y) and x is less than y
            </summary>
    </member>
    <member name="M:Ubisense.UBase.Math.gt(System.Double,System.Double)">
      <summary>
            True if !eq(x,y) and x is greater than y
            </summary>
    </member>
    <member name="M:Ubisense.UBase.Math.ccw(Ubisense.UBase.Vector2D,Ubisense.UBase.Vector2D,Ubisense.UBase.Vector2D)">
      <summary>
            The ccw function as found in Sedgewick (Algorithms in C++, Addison-Wesley 
            Longman Publishing Co., Inc., Boston, MA, 1992), but without the errors
            (see Lewis, J.L. ('A reliable test for inclusion of a point in a polygon',
            ACM SIGCSE Bulletin volume 34 ,  Issue 4  (December 2002)) for a discussion).
            This returns true if travelling from p0 through p1 to p2 results in a counter-
            clockwise rotation.
            </summary>
    </member>
    <member name="M:Ubisense.UBase.Math.col(Ubisense.UBase.Vector2D,Ubisense.UBase.Vector2D,Ubisense.UBase.Vector2D)">
      <summary>
            True if the points p0, p1 and p2 are collinear
            </summary>
    </member>
    <member name="T:Ubisense.UBase.Monitor">
      <summary>
            A static class used to register to receive monitor messages, such as warnings or errors generated in the platform middleware.
            </summary>
      <package>UbisensePlatform.dll</package>
      <remarks>
            This class is used by the <see cref="T:Ubisense.UBase.MonitorForm" /> which can be used to display
            platform messages in a popup form. Typical messages include warnings when platform services are
            temporarily unavailable, either because they have been stopped, or because the network connectivity
            is lost.
            </remarks>
    </member>
    <member name="M:Ubisense.UBase.Monitor.OnMonitorMessage(System.Object,System.String)">
      <summary>
            Call this function to send a monitor message to
            all the MonitorMessageHandler event handlers.  This
            is normally only used by Ubisense middleware.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="E:Ubisense.UBase.Monitor.MonitorMessage">
      <summary>
            This event is raised when a monitor message, such 
            as a warning or error, is generated in the platform middleware.
            </summary>
      <package>UbisensePlatform.dll</package>
      <seealso cref="T:Ubisense.UBase.MonitorControl" />
      <seealso cref="T:Ubisense.UBase.MonitorForm" />
    </member>
    <member name="T:Ubisense.UBase.Monitor.MonitorMessageHandler">
      <summary>
            A handler for monitor messages.
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="sender">The message sender</param>
      <param name="message">The warning or error message</param>
    </member>
    <member name="T:Ubisense.UBase.GenericRedBlackTree`1">
      <summary>
            A red-black tree parameterized by its node type.
            The node type TNode is guaranteed to be a class type and 
            so the size of the TNode values in this red-black tree class
            will always be the 32 bit pointer size.  Thus only one copy
            of all this code will ever be created, according to the description
            of the Generics implementation in Andrew Kennedy's paper "Parametric 
            Polymorphism for Popular Programming Languages"
            http://research.microsoft.com/~akenn/generics/FOOL2003.ppt
            </summary>
      <typeparam name="TNode">The node type</typeparam>
    </member>
    <member name="M:Ubisense.UBase.GenericRedBlackTree`1.KeyCompare(`0,`0)">
      <summary>
            Shorthand (inlined) call to the comparer's comparison routine
            </summary>
    </member>
    <member name="M:Ubisense.UBase.GenericRedBlackTree`1.Insert(`0)">
      <summary>
            Insert a node into the tree
            </summary>
      <param name="node">The node to insert</param>
      <returns>The node inserted or NotFound if not inserted</returns>
    </member>
    <member name="M:Ubisense.UBase.GenericRedBlackTree`1.Insert(`0,`0)">
      <summary>
            Insert node into the tree using another node as a position hint
            </summary>
      <param name="node">The node to insert</param>
      <param name="hint">The position hint</param>
      <returns>The node inserted or NotFound if not inserted</returns>
    </member>
    <member name="M:Ubisense.UBase.GenericRedBlackTree`1.Delete(`0)">
      <summary>
             Delete a node from the tree and restore red black properties
             </summary>
      <param name="node">The node to delete</param>
    </member>
    <member name="M:Ubisense.UBase.GenericRedBlackTree`1.swap(`0,`0)">
      <summary>
            Swap storage for nodes
            </summary>
      <param name="old_node">Node currently in the tree, that will be unlinked</param>
      <param name="new_node">Node to replace old_node in the tree</param>
    </member>
    <member name="M:Ubisense.UBase.GenericRedBlackTree`1.Clear">
      <summary>
             Empty the tree
            </summary>
    </member>
    <member name="M:Ubisense.UBase.GenericRedBlackTree`1.FindNode(`0,System.Boolean,System.Boolean)">
      <summary>Internal method to search for a node</summary>
      <param name="node">The node to search for in the tree</param>
      <param name="findFirst">If there are multiple exact matches,
            whether to use the first or last exact match in the tree</param>
      <param name="exact">Whether to require an exact match</param>
      <returns>The smallest node greater than or equal to 'node' (equal to 
            'node' if 'exact' is specified) or NotFound if there is no such node</returns>
    </member>
    <member name="M:Ubisense.UBase.GenericRedBlackTree`1.Leftmost">
      <summary> Return the left most node or NotFound if there is none</summary>
    </member>
    <member name="M:Ubisense.UBase.GenericRedBlackTree`1.Rightmost">
      <summary> Return the right most node or NotFound if there is none</summary>
    </member>
    <member name="M:Ubisense.UBase.GenericRedBlackTree`1.NextNode(`0)">
      <summary>
            Return the node after the node specified
            </summary>
      <param name="node">The specified node</param>
      <returns>The node after the specified node or NotFound if there is none</returns>
    </member>
    <member name="M:Ubisense.UBase.GenericRedBlackTree`1.PreviousNode(`0)">
      <summary>
            Return the node before the node specified
            </summary>
      <param name="node">The specified node</param>
      <returns>The node before the specified node or NotFound if there is none</returns>
    </member>
    <member name="M:Ubisense.UBase.GenericRedBlackTree`1.SearchBefore(`0,`0)">
      <summary>
            Find the smallest node less than or equal to hint
            and greater than node
            </summary>
      <param name="hint">The upper bound of the search</param>
      <param name="node">The lower bound of the search</param>
      <returns>The smallest node less than or equal to hint
            and greater than node</returns>
    </member>
    <member name="M:Ubisense.UBase.GenericRedBlackTree`1.SearchAfter(`0,`0)">
      <summary>
            Find the largest node greater than or equal to hint
            and less than node
            </summary>
      <param name="hint">The lower bound of the search</param>
      <param name="node">The upper bound of the search</param>
      <returns>The largest node greater than or equal to hint
            and less than node</returns>
    </member>
    <member name="M:Ubisense.UBase.GenericRedBlackTree`1.InsertBefore(`0,`0)">
      <summary>
            Insert a node either immediately before a given node, without
            checking the ordering properties on the nodes.  This must
            be used carefully to ensure that ordering properties are
            preserved in the tree.
            </summary>
      <param name="parent">The node to insert before which must not be NotFound</param>
      <param name="node">The node to insert</param>
    </member>
    <member name="M:Ubisense.UBase.GenericRedBlackTree`1.InsertAfter(`0,`0)">
      <summary>
            Insert a node either immediately after a given node, without
            checking the ordering properties on the nodes.  This must
            be used carefully to ensure that ordering properties are
            preserved in the tree.
            </summary>
      <param name="parent">The node to insert after which must not be NotFound</param>
      <param name="node">The node to insert</param>
    </member>
    <member name="M:Ubisense.UBase.GenericRedBlackTree`1.RestoreAfterInsert(`0)">
      <summary>
             Examine the tree and restore red-black properties after inserting 'x'
            </summary>
    </member>
    <member name="M:Ubisense.UBase.GenericRedBlackTree`1.RestoreAfterDelete(`0)">
      <summary>
             Examine the tree and restore red-black properties after deleting 'x'
            </summary>
    </member>
    <member name="M:Ubisense.UBase.GenericRedBlackTree`1.RotateLeft(`0)">
      <summary>
             RotateLeft
             Rebalance the tree by rotating the nodes to the left
            </summary>
    </member>
    <member name="M:Ubisense.UBase.GenericRedBlackTree`1.RotateRight(`0)">
      <summary>
             RotateRight
             Rebalance the tree by rotating the nodes to the right
            </summary>
    </member>
    <member name="P:Ubisense.UBase.GenericRedBlackTree`1.NotFound">
      <summary>
            An empty leaf node, returned when searches fail.
            </summary>
    </member>
    <member name="P:Ubisense.UBase.GenericRedBlackTree`1.Count">
      <summary>
            The number of elements in the tree
            </summary>
    </member>
    <member name="T:Ubisense.UBase.BaseComparer`1">
      <summary>
            A default comparison operator that works for all IComparable types
            </summary>
      <package>UbisensePlatform.dll</package>
      <typeparam name="TKey">The IComparable type to build an operator for</typeparam>
    </member>
    <member name="T:Ubisense.UBase.Iterator`1">
      <summary>
            An forwards-and-reverse iterator over a balanced tree
            -- a bit like an STL iterator.
            </summary>
      <package>UbisensePlatform.dll</package>
      <typeparam name="TValue">The value type of the tree</typeparam>
    </member>
    <member name="M:Ubisense.UBase.Iterator`1.Increment">
      <summary>
            Go to the next value of the iterator
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Iterator`1.Decrement">
      <summary>
            Go to the previous value of the iterator
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Iterator`1.Eq(Ubisense.UBase.Iterator{`0})">
      <summary>
            True if this is the same iterator as other
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Iterator`1.Neq(Ubisense.UBase.Iterator{`0})">
      <summary>
            True if !this.Eq(other)
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.Iterator`1.Value">
      <summary>
            The current value of the iterator 
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.SetEnumerator`1">
      <summary>
            An enumerator for sets
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.SetEnumerator`1.Dispose">
      <summary>
            Clean up storage (in this case it does nothing 
            as there is no special storage to clean up)
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.SetEnumerator`1.GetEnumerator">
      <summary>
            Get the enumerator corresponding to this value (in this
            case, return the object itself)
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.SetEnumerator`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Get the enumerator corresponding to this value (in this
            case, return the object itself).  This implemnts the non-generic
            IEnumerator (which should probably not be used by new code)
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.SetEnumerator`1.MoveNext">
      <summary>
            Go on to the next value, returning true if there is one.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.SetEnumerator`1.Reset">
      <summary>
            Restart at the beginning of the enumerator
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.SetEnumerator`1.#ctor(Ubisense.UBase.Iterator{`0},Ubisense.UBase.Iterator{`0},System.Boolean)">
      <summary>
            Create the enumerator with a pair of iterators
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.SetEnumerator`1.Current">
      <summary>
            The current value of the enumerator
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.SetEnumerator`1.System#Collections#IEnumerator#Current">
      <summary>
            Return the current value of the enumerator.  This implemnts the non-generic
            IEnumerator (which should probably not be used by new code)
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.MapEnumerator`2">
      <summary>
            An enumerator for maps
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MapEnumerator`2.Dispose">
      <summary>
            See comments for SetEnumerator
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MapEnumerator`2.GetEnumerator">
      <summary>
            See comments for SetEnumerator
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MapEnumerator`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            See comments for SetEnumerator
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MapEnumerator`2.MoveNext">
      <summary>
            See comments for SetEnumerator
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MapEnumerator`2.Reset">
      <summary>
            See comments for SetEnumerator
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.MapEnumerator`2.#ctor(Ubisense.UBase.Iterator{System.Collections.Generic.KeyValuePair{`0,`1}},Ubisense.UBase.Iterator{System.Collections.Generic.KeyValuePair{`0,`1}},System.Boolean)">
      <summary>
            See comments for SetEnumerator
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.MapEnumerator`2.Current">
      <summary>
            See comments for SetEnumerator
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.MapEnumerator`2.System#Collections#IEnumerator#Current">
      <summary>
            See comments for SetEnumerator
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.SortedContainer`1">
      <summary>
            A base collection type, implemented as a balanced tree
            </summary>
      <package>UbisensePlatform.dll</package>
      <typeparam name="TValue">The value type of the collection</typeparam>
    </member>
    <member name="M:Ubisense.UBase.SortedContainer`1.Clear">
      <summary>
            Empty the tree
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.SortedContainer`1.Count">
      <summary>
            The total number of elements in the tree
            </summary>
      <package>UbisensePlatform.dll</package>
      <returns>The total number of elements in the tree</returns>
    </member>
    <member name="M:Ubisense.UBase.SortedContainer`1.Count(`0)">
      <summary>
            Count the elements matching a given value
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="x">The value to match</param>
      <returns>The number of elements matching x</returns>
    </member>
    <member name="M:Ubisense.UBase.SortedContainer`1.Insert(`0)">
      <summary>
            Insert an element returning a pointer to it
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="x">The element to insert</param>
      <returns>A pointer to the element or End if the element
            was not inserted</returns>
    </member>
    <member name="M:Ubisense.UBase.SortedContainer`1.Insert(`0,Ubisense.UBase.Iterator{`0})">
      <summary>
            Insert an element returning a pointer to it, using an
            iterator as a positioning hint
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="x">The element to insert</param>
      <param name="hint">The hint iterator</param>
      <returns>A pointer to the element or End if the element
            was not inserted</returns>
    </member>
    <member name="M:Ubisense.UBase.SortedContainer`1.Erase(Ubisense.UBase.Iterator{`0})">
      <summary>
            Erase an element at the position pointed to by the iterator
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="x">The iterator pointing to the element to erase</param>
    </member>
    <member name="M:Ubisense.UBase.SortedContainer`1.Find(`0)">
      <summary>
            Find an element that exactly matches x
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="x">The element to match</param>
      <returns>A pointer to the element or End if the element
            was not found</returns>
    </member>
    <member name="M:Ubisense.UBase.SortedContainer`1.LowerBound(`0)">
      <summary>
            Find the smallest element greater than or equal to a given value
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="x">The value to search for</param>
      <returns>Pointer to the smallest element greater than or equal to x</returns>
    </member>
    <member name="M:Ubisense.UBase.SortedContainer`1.UpperBound(`0)">
      <summary>
            Find the smallest element greater than a given value
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="x">The value to search for</param>
      <returns>Pointer to the smallest element greater than x</returns>
    </member>
    <member name="M:Ubisense.UBase.SortedContainer`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>
            Create the container, given a comparer function
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.SortedContainer`1.Empty">
      <summary>
            True iff there are no elements
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.SortedContainer`1.Begin">
      <summary>
            The smallest element 
            </summary>
      <package>UbisensePlatform.dll</package>
      <returns>Pointer to the smallest element</returns>
    </member>
    <member name="P:Ubisense.UBase.SortedContainer`1.End">
      <summary>
            Off the end of the collection
            </summary>
      <package>UbisensePlatform.dll</package>
      <returns>Pointer to the NotFound element</returns>
    </member>
    <member name="P:Ubisense.UBase.SortedContainer`1.Rbegin">
      <summary>
            The largest element 
            </summary>
      <package>UbisensePlatform.dll</package>
      <returns>Pointer to the largest element</returns>
    </member>
    <member name="P:Ubisense.UBase.SortedContainer`1.Rend">
      <summary>
            Off the end of the collection
            </summary>
      <package>UbisensePlatform.dll</package>
      <returns>Pointer to the NotFound element</returns>
    </member>
    <member name="T:Ubisense.UBase.Multiset`1">
      <summary>
            A collection that can contain duplicate entries,
            implemented as a balanced tree
            </summary>
      <package>UbisensePlatform.dll</package>
      <typeparam name="TValue">The value type of the collection</typeparam>
    </member>
    <member name="M:Ubisense.UBase.Multiset`1.Forwards(Ubisense.UBase.Iterator{`0},Ubisense.UBase.Iterator{`0})">
      <summary>
            An enumerator defined by two iterators
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="begin">The beginning iterator</param>
      <param name="end">The end iterator</param>
      <returns>An enumerator that goes between begin and end, incrementing begin</returns>
    </member>
    <member name="M:Ubisense.UBase.Multiset`1.Backwards(Ubisense.UBase.Iterator{`0},Ubisense.UBase.Iterator{`0})">
      <summary>
            An enumerator defined by two iterators
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="begin">The beginning iterator</param>
      <param name="end">The end iterator</param>
      <returns>An enumerator that goes between begin and end, decrementing begin</returns>
    </member>
    <member name="M:Ubisense.UBase.Multiset`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>
            Create the container, given a comparer function
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.Multimap`2">
      <summary>
            A key-value mapping that can contain duplicate entries,
            implemented as a balanced tree of KeyValuePairs
            </summary>
      <package>UbisensePlatform.dll</package>
      <typeparam name="TKey">The key type of the collection</typeparam>
      <typeparam name="TValue">The value type of the collection</typeparam>
    </member>
    <member name="M:Ubisense.UBase.Multimap`2.Count(`0)">
      <summary>
            Count the elements matching a given key
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="x">The key to match</param>
      <returns>The number of elements matching x</returns>
    </member>
    <member name="M:Ubisense.UBase.Multimap`2.Find(`0)">
      <summary>
            Find an element that exactly matches x
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="x">The element to match</param>
      <returns>A pointer to the element or End if the element
            was not found</returns>
    </member>
    <member name="M:Ubisense.UBase.Multimap`2.LowerBound(`0)">
      <summary>
            Find the smallest element greater than or equal to a given value
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="x">The value to search for</param>
      <returns>Pointer to the smallest element greater than or equal to x</returns>
    </member>
    <member name="M:Ubisense.UBase.Multimap`2.UpperBound(`0)">
      <summary>
            Find the smallest element greater than a given value
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="x">The value to search for</param>
      <returns>Pointer to the smallest element greater than x</returns>
    </member>
    <member name="M:Ubisense.UBase.Multimap`2.Assign(Ubisense.UBase.Iterator{System.Collections.Generic.KeyValuePair{`0,`1}},`1)">
      <summary>
            Set the value at a given position
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="position">The position to set</param>
      <param name="value">The value</param>
    </member>
    <member name="M:Ubisense.UBase.Multimap`2.Forwards(Ubisense.UBase.Iterator{System.Collections.Generic.KeyValuePair{`0,`1}},Ubisense.UBase.Iterator{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>
            An enumerator defined by two iterators
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="begin">The beginning iterator</param>
      <param name="end">The end iterator</param>
      <returns>An enumerator that goes between begin and end, incrementing begin</returns>
    </member>
    <member name="M:Ubisense.UBase.Multimap`2.Backwards(Ubisense.UBase.Iterator{System.Collections.Generic.KeyValuePair{`0,`1}},Ubisense.UBase.Iterator{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>
            An enumerator defined by two iterators
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="begin">The beginning iterator</param>
      <param name="end">The end iterator</param>
      <returns>An enumerator that goes between begin and end, decrementing begin</returns>
    </member>
    <member name="M:Ubisense.UBase.Multimap`2.ForwardsPair(Ubisense.UBase.Iterator{System.Collections.Generic.KeyValuePair{`0,`1}},Ubisense.UBase.Iterator{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>
            An enumerator defined by two iterators
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="begin">The beginning iterator</param>
      <param name="end">The end iterator</param>
      <returns>An enumerator that goes between begin and end, incrementing begin</returns>
    </member>
    <member name="M:Ubisense.UBase.Multimap`2.BackwardsPair(Ubisense.UBase.Iterator{System.Collections.Generic.KeyValuePair{`0,`1}},Ubisense.UBase.Iterator{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>
            An enumerator defined by two iterators
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="begin">The beginning iterator</param>
      <param name="end">The end iterator</param>
      <returns>An enumerator that goes between begin and end, decrementing begin</returns>
    </member>
    <member name="T:Ubisense.UBase.Set`1">
      <summary>
            A collection that cannot contain duplicate entries,
            implemented as a balanced tree
            </summary>
      <package>UbisensePlatform.dll</package>
      <typeparam name="TValue">The value type of the collection</typeparam>
    </member>
    <member name="M:Ubisense.UBase.Set`1.Count(`0)">
      <summary>
            Count the elements matching a given value
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="x">The value to match</param>
      <returns>The number of elements matching x</returns>
    </member>
    <member name="M:Ubisense.UBase.Set`1.Insert(`0)">
      <summary>
            Insert an element returning a pointer to it
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="x">The element to insert</param>
      <returns>A pointer to the element or End if the element
            was not inserted</returns>
    </member>
    <member name="M:Ubisense.UBase.Set`1.Insert(`0,Ubisense.UBase.Iterator{`0})">
      <summary>
            Insert an element returning a pointer to it, using an
            iterator as a positioning hint
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="x">The element to insert</param>
      <param name="hint">The hint iterator</param>
      <returns>A pointer to the element or End if the element
            was not inserted</returns>
    </member>
    <member name="M:Ubisense.UBase.Set`1.Erase(`0)">
      <summary>
            Find the value corresponding to x and erase it if there is one
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Set`1.Forwards(Ubisense.UBase.Iterator{`0},Ubisense.UBase.Iterator{`0})">
      <summary>
            An enumerator defined by two iterators
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="begin">The beginning iterator</param>
      <param name="end">The end iterator</param>
      <returns>An enumerator that goes between begin and end, incrementing begin</returns>
    </member>
    <member name="M:Ubisense.UBase.Set`1.Backwards(Ubisense.UBase.Iterator{`0},Ubisense.UBase.Iterator{`0})">
      <summary>
            An enumerator defined by two iterators
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="begin">The beginning iterator</param>
      <param name="end">The end iterator</param>
      <returns>An enumerator that goes between begin and end, decrementing begin</returns>
    </member>
    <member name="T:Ubisense.UBase.Map`2">
      <summary>
            A key-value mapping that cannot contain duplicate keys,
            implemented as a balanced tree of KeyValuePairs.
            </summary>
      <package>UbisensePlatform.dll</package>
      <typeparam name="TKey">The key type of the collection</typeparam>
      <typeparam name="TValue">The value type of the collection</typeparam>
    </member>
    <member name="M:Ubisense.UBase.Map`2.Count(`0)">
      <summary>
            Count the elements matching a given key
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="x">The key to match</param>
      <returns>The number of elements matching x</returns>
    </member>
    <member name="M:Ubisense.UBase.Map`2.Find(`0)">
      <summary>
            Find an element that exactly matches x
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="x">The element to match</param>
      <returns>A pointer to the element or End if the element
            was not found</returns>
    </member>
    <member name="M:Ubisense.UBase.Map`2.LowerBound(`0)">
      <summary>
            Find the smallest element greater than or equal to a given value
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="x">The value to search for</param>
      <returns>Pointer to the smallest element greater than or equal to x</returns>
    </member>
    <member name="M:Ubisense.UBase.Map`2.UpperBound(`0)">
      <summary>
            Find the smallest element greater than a given value
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="x">The value to search for</param>
      <returns>Pointer to the smallest element greater than x</returns>
    </member>
    <member name="M:Ubisense.UBase.Map`2.Erase(`0)">
      <summary>
            Erase an element by key
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="key">The key to erase</param>
    </member>
    <member name="M:Ubisense.UBase.Map`2.Assign(Ubisense.UBase.Iterator{System.Collections.Generic.KeyValuePair{`0,`1}},`1)">
      <summary>
            Set the value at a given position
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="position">The position to set</param>
      <param name="value">The value</param>
    </member>
    <member name="M:Ubisense.UBase.Map`2.Forwards(Ubisense.UBase.Iterator{System.Collections.Generic.KeyValuePair{`0,`1}},Ubisense.UBase.Iterator{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>
            An enumerator defined by two iterators
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="begin">The beginning iterator</param>
      <param name="end">The end iterator</param>
      <returns>An enumerator that goes between begin and end, incrementing begin</returns>
    </member>
    <member name="M:Ubisense.UBase.Map`2.Backwards(Ubisense.UBase.Iterator{System.Collections.Generic.KeyValuePair{`0,`1}},Ubisense.UBase.Iterator{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>
            An enumerator defined by two iterators
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="begin">The beginning iterator</param>
      <param name="end">The end iterator</param>
      <returns>An enumerator that goes between begin and end, decrementing begin</returns>
    </member>
    <member name="M:Ubisense.UBase.Map`2.ForwardsPair(Ubisense.UBase.Iterator{System.Collections.Generic.KeyValuePair{`0,`1}},Ubisense.UBase.Iterator{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>
            An enumerator defined by two iterators
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="begin">The beginning iterator</param>
      <param name="end">The end iterator</param>
      <returns>An enumerator that goes between begin and end, incrementing begin</returns>
    </member>
    <member name="M:Ubisense.UBase.Map`2.BackwardsPair(Ubisense.UBase.Iterator{System.Collections.Generic.KeyValuePair{`0,`1}},Ubisense.UBase.Iterator{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>
            An enumerator defined by two iterators
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="begin">The beginning iterator</param>
      <param name="end">The end iterator</param>
      <returns>An enumerator that goes between begin and end, decrementing begin</returns>
    </member>
    <member name="M:Ubisense.UBase.Map`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>
            Create a new map
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="comparer">The ordering to use</param>
    </member>
    <member name="P:Ubisense.UBase.Map`2.Item(`0)">
      <summary>
            Get or set the value referred to by key, creating an entry
            if there is no value currently, even if only getting the value
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="x">The key</param>
      <returns>The value in the map pointed to by key</returns>
    </member>
    <member name="T:Ubisense.UBase.RedBlackColour">
      <summary>
            A way of labelling nodes with a colour
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.GenericRedBlackNode`1">
      <summary>
            A generic node in a red-black tree
            </summary>
      <package>UbisensePlatform.dll</package>
      <typeparam name="TFamily">
            The type of parents and siblings of this node
            (and the type of this node and its children)
            </typeparam>
    </member>
    <member name="M:Ubisense.UBase.GenericRedBlackNode`1.CopyFrom(`0)">
      <summary>
            Copy values from an other cell
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="other">The cell to copy from</param>
    </member>
    <member name="P:Ubisense.UBase.GenericRedBlackNode`1.IsSentinel">
      <summary>
            Return true if this node is a sentinel node.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.GenericRedBlackNode`1.Colour">
      <summary>
             The color of this node (red or black)
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.GenericRedBlackNode`1.Left">
      <summary>
             The node to the left of this node
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.GenericRedBlackNode`1.Right">
      <summary>
             The node to the right of this node
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.GenericRedBlackNode`1.Parent">
      <summary>
            The parent node of this node
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.RedBlackValueNode`1">
      <summary>
            A node in a red-black tree that carries a specific key and value type
            </summary>
      <package>UbisensePlatform.dll</package>
      <typeparam name="TValue">The value type</typeparam>
    </member>
    <member name="M:Ubisense.UBase.RedBlackValueNode`1.CopyFrom(Ubisense.UBase.RedBlackValueNode{`0})">
      <summary>
            Copy the value from an other cell
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="other">The cell to copy from</param>
    </member>
    <member name="M:Ubisense.UBase.RedBlackValueNode`1.#ctor">
      <summary>
            Initialise this node as an empty node
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.RedBlackValueNode`1.#ctor(`0)">
      <summary>
            Initialise this node with the specified value
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.RedBlackValueNode`1.Value">
      <summary>
             The value stored at this node
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.ValueNodeComparer`1">
      <summary>
            A comparison combinator for RedBlackValueNode types
            </summary>
      <package>UbisensePlatform.dll</package>
      <typeparam name="TValue">The value type of the node</typeparam>
    </member>
    <member name="T:Ubisense.UBase.KeyValueComparer`2">
      <summary>
            A comparison combinator for KeyValuePairs 
            </summary>
      <package>UbisensePlatform.dll</package>
      <typeparam name="TKey">The key type of the pair</typeparam>
      <typeparam name="TValue">The value type of the pair</typeparam>
    </member>
    <member name="T:Ubisense.UBase.KeyValueNodeComparer`2">
      <summary>
            A comparison combinator for KeyValuePair tree nodes
            </summary>
      <package>UbisensePlatform.dll</package>
      <typeparam name="TKey">The key type of the pair</typeparam>
      <typeparam name="TValue">The value type of the pair</typeparam>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1">
      <summary>
            A 'set' version of the standard C# sorted dictionary class
            </summary>
      <package>UbisensePlatform.dll</package>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor">
      <summary>
            Create an empty set with the default comparer for the set contents type
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>
            Create an empty set with a given comparer for the set contents type
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="comparer"></param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Add(`0)">
      <summary>
            Insert an element
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Clear">
      <summary>
            Remove all the elements
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Contains(`0)">
      <summary>
            True if this set contains element a
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)">
      <summary>
            This calls the SortdDictionary.CopyTo function
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Remove(`0)">
      <summary>
            Remove element a from the set
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetEnumerator">
      <summary>
            Get the enumerator for this set
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Equals(System.Object)">
      <summary>
            True if all the elements of this and obj are exactly the same
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetHashCode">
      <summary>
            The exclusive OR of all the elements in this set
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
            Calls the CopyTo function for the Keys collection
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns the result of the GetEnumerator function for the Keys collection
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Comparer">
      <summary>
            The comparer used by this set
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Count">
      <summary>
            The number of elements in this set
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.IsReadOnly">
      <summary>
            Always false
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>
            Returns the result of the SyncRoot function for the Keys collection
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>
            Returns the result of the IsSynchronized function for the Keys collection
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.Id">
      <summary> Ubisense globally unique identifier.  This is a 20 byte
            identifier made up from 5 contiguous words</summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Id.Unique">
      <summary> Make this a new unique id </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Id.Nil">
      <summary> Make this the nil id </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Id.IsNil">
      <summary> Return true if the id is nil </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Id.#ctor(System.Boolean)">
      <summary>
            If unique is true, create an unique id, otherwise create the nil Id
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="unique">Whether to construct an unique id</param>
    </member>
    <member name="M:Ubisense.UBase.Id.ToString(System.String,System.IFormatProvider)">
      <summary> Returns a String representation of the value of
            this instance of the Id class.  The string is base 64
             using upper and lower case letters, digits, and the
             underscore and period characters.  The first character is
             a hex digit.
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="format">A format that is ignored</param>
      <param name="formatProvider">A format provider that is ignored</param>
    </member>
    <member name="M:Ubisense.UBase.Id.ToString(System.String)">
      <summary> Returns a String representation of the value of
             this instance of the Id class.  The string is base 64
             using upper and lower case letters, digits, and the
             underscore and period characters.  The first character is
             a hex digit.
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="format">A format that is ignored</param>
    </member>
    <member name="M:Ubisense.UBase.Id.ToString">
      <summary> Returns a String representation of the value of
            this instance of the Id class.  The string is base 64
             using upper and lower case letters, digits, and the
             underscore and period characters.  The first character is
             a hex digit.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Id.FromString(System.String)">
      <summary> 
            Convert from a string.  The string is base 64
            using upper and lower case letters, digits, and the
            underscore and period characters.  The first character must
            be a hex digit. 
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Id.Equals(System.Object)">
      <summary>
            True if all the fields of this and obj are the same
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="obj"></param>
      <returns></returns>
    </member>
    <member name="M:Ubisense.UBase.Id.GetHashCode">
      <summary>
            The exclusive OR of all the fields of the Id
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Id.CompareTo(Ubisense.UBase.Id)">
      <summary>
            Compare the fields in a consistent order, that is not
            correlated with any other ordering (e.g. machine ids,
            id creation times etc)
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Id.Equals(Ubisense.UBase.Id)">
      <summary>
            True if this.CompareTo(other) = 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Id.op_Equality(Ubisense.UBase.Id,Ubisense.UBase.Id)">
      <summary>
            True if this.CompareTo(other) = 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Id.op_Inequality(Ubisense.UBase.Id,Ubisense.UBase.Id)">
      <summary>
            True if this.CompareTo(other) != 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Id.op_LessThan(Ubisense.UBase.Id,Ubisense.UBase.Id)">
      <summary>
            True if this.CompareTo(other) &lt; 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Id.op_GreaterThan(Ubisense.UBase.Id,Ubisense.UBase.Id)">
      <summary>
            True if this.CompareTo(other) &gt; 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Id.GetLocalAddress">
      <summary> Get the local ip address </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Id.Read(System.IO.BinaryReader)">
      <summary>
            Read from a stream
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Id.Write(System.IO.BinaryWriter)">
      <summary>
            Write to a stream
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UBase.Symbol">
      <summary> 
            A string that is compared using a fast ordering.  Symbols are intended for
            use in contexts where the total number of different symbols is relatively low
            but the number of symbol references is very high (for example, an object's type
            identifier is a symbol).  Because the ordering relation on symbols is as fast
            as integer comparison, symbols may be used efficiently as keys in sorted 
            data structures (including Ubisense relational tables).
            
            The symbol ordering is an arbitrary ordering that is not guaranteed to
            correspond to any particular 'real-world' ordering, or even to be the same 
            across two invocations of the same program (but is guaranteed to be the same
            throughout one invocation of a program).
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Symbol.#ctor(System.String)">
      <summary>
            Create a symbol with a given name. The call Symbol("")
            is equivalent to Symbol().
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="str">The name of the symbol</param>
    </member>
    <member name="M:Ubisense.UBase.Symbol.ToString(System.String,System.IFormatProvider)">
      <summary> 
             Returns a String representation of the value of
             this instance of the Symbol class, according to the provided
             format specifier and culture-specific format information
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Symbol.ToString">
      <summary> 
             Returns a String representation of the value of
             this instance of the Symbol class, according to the provided
             format specifier and culture-specific format information
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Symbol.Equals(System.Object)">
      <summary>
            True iff this symbol is equal to the object 'obj'
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Symbol.Equals(Ubisense.UBase.Symbol)">
      <summary>
            True iff the two symbols are equal
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Symbol.GetHashCode">
      <summary>
            The hash code of this symbol.  This is an integer in the range
            0 .. N+2 where N is the total number of different symbols known
            to this instance of the program.  The hash code is not guaranteed
            to remain constant across invocations of the program.
            </summary>
      <package>UbisensePlatform.dll</package>
      <returns></returns>
    </member>
    <member name="M:Ubisense.UBase.Symbol.CompareTo(Ubisense.UBase.Symbol)">
      <summary>
            Compare using an arbitrary ordering that is not guaranteed to correspond
            to any particular 'real-world' ordering, or even to be the same across
            two invocations of the same program.  But it is guaranteed to be the same
            throughout one invocation of a program.
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="other">The Symbol to be compared against</param>
      <returns></returns>
    </member>
    <member name="M:Ubisense.UBase.Symbol.op_Equality(Ubisense.UBase.Symbol,Ubisense.UBase.Symbol)">
      <summary>
            True iff x.CompareTo(y) == 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Symbol.op_Inequality(Ubisense.UBase.Symbol,Ubisense.UBase.Symbol)">
      <summary>
            True iff x.CompareTo(y) != 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Symbol.op_LessThan(Ubisense.UBase.Symbol,Ubisense.UBase.Symbol)">
      <summary>
            True iff x.CompareTo(y) &lt; 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Symbol.op_GreaterThan(Ubisense.UBase.Symbol,Ubisense.UBase.Symbol)">
      <summary>
            True iff x.CompareTo(y) &gt; 0
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Symbol.Read(System.IO.BinaryReader)">
      <summary>
            Read a symbol from a stream
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Symbol.Write(System.IO.BinaryWriter)">
      <summary>
            Write this symbol to a stream
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="F:Ubisense.UBase.Symbol.symbol_table">
      <summary>
            The symbol table used to internalise the strings
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="F:Ubisense.UBase.Symbol.nil_string">
      <summary>
            A special nil string
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UBase.Symbol.Internalise(System.String,System.String@,System.Int32@)">
      <summary>
            Givan a string, provide an internalised version of that string
            and a (non-zero) tag that is unique to that string
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="value">The string to internalise</param>
      <param name="impl">An internalised version of the string</param>
      <param name="tag">A tag that is unique to the string</param>
    </member>
    <member name="M:Ubisense.UBase.Symbol.GuaranteeInitialised">
      <summary>
            Ensure that the symbol is initialised (if uninitialised,
            it should be a null string.
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="F:Ubisense.UBase.Symbol.tag">
      <summary>
            The string's tag -- this value is unique to the string
            0: The string is unset
            1: The string is nil_string ("")
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="F:Ubisense.UBase.Symbol.impl">
      <summary>
            The string's interned form -- this value is always pointer equal
            for two equal strings
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.Symbol.Name">
      <summary>
            The stringified form of the symbol
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.Symbol.IsNil">
      <summary>
            True if the symbol is the empty string
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="P:Ubisense.UBase.Symbol.Item(System.Int32)">
      <summary>
            The character at the given symbol's zero-based position 
            </summary>
      <package>UbisensePlatform.dll</package>
      <param name="i">The zero-based position to access</param>
    </member>
    <member name="P:Ubisense.UBase.Symbol.Length">
      <summary>
            The length of the symbol's string
            </summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.Licensing.CheckLicense">
      <summary>
            Provides a method for checking for a local or site license for a given named application.
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="F:Ubisense.Licensing.CheckLicense.permSignatureChecked">
      <summary>
            Record whether the signature has been successfully checked because statics can be preserved across invocations.
            </summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.Licensing.CheckLicense.HaveLicense(System.String,System.String@)">
      <summary>
            Check that we have a valid license to use the named application
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <remarks>
            The license can be on the local computer or for the entire site. 
            Local licenses are contained in a file called [application].license,
            located in the same directory as the application executable.  Site 
            licenses are contained in the capabilities section of the core server
            license file, and are loaded into the UPerm Config schema when the 
            core server starts.  All licenses are verified using DSA signatures.
            </remarks>
      <param name="application">The application to check</param>
      <param name="error">Returns the error if no license was found</param>
      <returns>True if a license was found, or false otherwise, in which case error contains the reason for failure.</returns>
    </member>
    <member name="P:Ubisense.Licensing.CheckLicense.PermSchema">
      <summary>
            A cached copy of the UPerm.Config schema.
            </summary>
      <package>UbisenseLocationServices.dll</package>
      <remarks>
            This schema is connected as a client the first time any of the static methods on CheckLicense are called.
            </remarks>
    </member>
    <member name="T:Ubisense.Licensing.Messages">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Ubisense.Licensing.Messages.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Ubisense.Licensing.Messages.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Ubisense.Licensing.Messages.CapabilitiesSignatureInvalid">
      <summary>
               Looks up a localized string similar to The signature of the site licenses is invalid.
            
            Application will exit..
             </summary>
    </member>
    <member name="P:Ubisense.Licensing.Messages.LicenseError">
      <summary>
              Looks up a localized string similar to License Error.
            </summary>
    </member>
    <member name="P:Ubisense.Licensing.Messages.LicenseNotFound">
      <summary>
              Looks up a localized string similar to License was not found for this machine.
            </summary>
    </member>
    <member name="T:Ubisense.UPerm.User">
      <summary>A user of the system who has some authentication credentials. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.User.op_Equality(Ubisense.UPerm.User,Ubisense.UPerm.User)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.User.op_Inequality(Ubisense.UPerm.User,Ubisense.UPerm.User)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.User.op_LessThan(Ubisense.UPerm.User,Ubisense.UPerm.User)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.User.op_GreaterThan(Ubisense.UPerm.User,Ubisense.UPerm.User)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.User.op_Implicit(Ubisense.UPerm.User)~Ubisense.UBase.UObject">
      <summary>Implicit conversion operator to ancestor type global::Ubisense.UBase.UObject</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPerm.User.#cctor">
      <summary>Initialise the User type</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.User.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>Unsafe constructor to create an instance of type User with a specific state.
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            </summary>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.User.#ctor(System.Boolean)">
      <summary>Create a new User instance that is either unique or nil</summary>
      <param name="unique">Make this instance unique</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.User.Narrow(Ubisense.UBase.IObject)">
      <summary>Assign another object to this one if and only if the other object's dynamic type inherits from the static type of this instance</summary>
      <param name="other">The object to assign to this object</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.User.Unique">
      <summary>Make this object into a new unique instance with DynamicType equal to User</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.User.Nil">
      <summary>True iff this object is the nil instance of type User</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.User.ToString">
      <summary>Returns a String representation of the value of this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.User.ToString(System.String,System.IFormatProvider)">
      <summary>Equivalent to ToString()</summary>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.User.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.User.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.User.CompareTo(Ubisense.UPerm.User)">
      <summary>Compare this instance with 'other'</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.User.Equals(Ubisense.UPerm.User)">
      <summary>True if this instance equals obj</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UPerm.User.StaticType">
      <summary>The statically-declared type of this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UPerm.User.DynamicType">
      <summary>The most-derived dynamic type of this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UPerm.User.Id">
      <summary>The id of this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="T:Ubisense.UPerm.WindowsAuthenticatedUser">
      <summary>A user of the system who has some authentication credentials, which are generated automatically from the domain, username, and (optionally) GUID of the user. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.WindowsAuthenticatedUser.op_Equality(Ubisense.UPerm.WindowsAuthenticatedUser,Ubisense.UPerm.WindowsAuthenticatedUser)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.WindowsAuthenticatedUser.op_Inequality(Ubisense.UPerm.WindowsAuthenticatedUser,Ubisense.UPerm.WindowsAuthenticatedUser)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.WindowsAuthenticatedUser.op_LessThan(Ubisense.UPerm.WindowsAuthenticatedUser,Ubisense.UPerm.WindowsAuthenticatedUser)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.WindowsAuthenticatedUser.op_GreaterThan(Ubisense.UPerm.WindowsAuthenticatedUser,Ubisense.UPerm.WindowsAuthenticatedUser)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.WindowsAuthenticatedUser.op_Implicit(Ubisense.UPerm.WindowsAuthenticatedUser)~Ubisense.UBase.UObject">
      <summary>Implicit conversion operator to ancestor type global::Ubisense.UBase.UObject</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPerm.WindowsAuthenticatedUser.op_Implicit(Ubisense.UPerm.WindowsAuthenticatedUser)~Ubisense.UPerm.User">
      <summary>Implicit conversion operator to ancestor type global::Ubisense.UPerm.User</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPerm.WindowsAuthenticatedUser.#cctor">
      <summary>Initialise the WindowsAuthenticatedUser type</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.WindowsAuthenticatedUser.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>Unsafe constructor to create an instance of type WindowsAuthenticatedUser with a specific state.
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            </summary>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.WindowsAuthenticatedUser.#ctor(System.Boolean)">
      <summary>Create a new WindowsAuthenticatedUser instance that is either unique or nil</summary>
      <param name="unique">Make this instance unique</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.WindowsAuthenticatedUser.Narrow(Ubisense.UBase.IObject)">
      <summary>Assign another object to this one if and only if the other object's dynamic type inherits from the static type of this instance</summary>
      <param name="other">The object to assign to this object</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.WindowsAuthenticatedUser.Unique">
      <summary>Make this object into a new unique instance with DynamicType equal to WindowsAuthenticatedUser</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.WindowsAuthenticatedUser.Nil">
      <summary>True iff this object is the nil instance of type WindowsAuthenticatedUser</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.WindowsAuthenticatedUser.ToString">
      <summary>Returns a String representation of the value of this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.WindowsAuthenticatedUser.ToString(System.String,System.IFormatProvider)">
      <summary>Equivalent to ToString()</summary>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.WindowsAuthenticatedUser.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.WindowsAuthenticatedUser.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.WindowsAuthenticatedUser.CompareTo(Ubisense.UPerm.WindowsAuthenticatedUser)">
      <summary>Compare this instance with 'other'</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.WindowsAuthenticatedUser.Equals(Ubisense.UPerm.WindowsAuthenticatedUser)">
      <summary>True if this instance equals obj</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UPerm.WindowsAuthenticatedUser.StaticType">
      <summary>The statically-declared type of this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UPerm.WindowsAuthenticatedUser.DynamicType">
      <summary>The most-derived dynamic type of this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UPerm.WindowsAuthenticatedUser.Id">
      <summary>The id of this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="T:Ubisense.UPerm.Group">
      <summary>A group is assigned access permissions to system schemas. Users are members of groups. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.Group.op_Equality(Ubisense.UPerm.Group,Ubisense.UPerm.Group)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.Group.op_Inequality(Ubisense.UPerm.Group,Ubisense.UPerm.Group)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.Group.op_LessThan(Ubisense.UPerm.Group,Ubisense.UPerm.Group)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.Group.op_GreaterThan(Ubisense.UPerm.Group,Ubisense.UPerm.Group)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.Group.op_Implicit(Ubisense.UPerm.Group)~Ubisense.UBase.UObject">
      <summary>Implicit conversion operator to ancestor type global::Ubisense.UBase.UObject</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPerm.Group.#cctor">
      <summary>Initialise the Group type</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.Group.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>Unsafe constructor to create an instance of type Group with a specific state.
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            </summary>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.Group.#ctor(System.Boolean)">
      <summary>Create a new Group instance that is either unique or nil</summary>
      <param name="unique">Make this instance unique</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.Group.Narrow(Ubisense.UBase.IObject)">
      <summary>Assign another object to this one if and only if the other object's dynamic type inherits from the static type of this instance</summary>
      <param name="other">The object to assign to this object</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.Group.Unique">
      <summary>Make this object into a new unique instance with DynamicType equal to Group</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.Group.Nil">
      <summary>True iff this object is the nil instance of type Group</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.Group.ToString">
      <summary>Returns a String representation of the value of this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.Group.ToString(System.String,System.IFormatProvider)">
      <summary>Equivalent to ToString()</summary>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.Group.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.Group.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.Group.CompareTo(Ubisense.UPerm.Group)">
      <summary>Compare this instance with 'other'</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.Group.Equals(Ubisense.UPerm.Group)">
      <summary>True if this instance equals obj</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UPerm.Group.StaticType">
      <summary>The statically-declared type of this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UPerm.Group.DynamicType">
      <summary>The most-derived dynamic type of this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UPerm.Group.Id">
      <summary>The id of this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="T:Ubisense.UPerm.Scheme">
      <summary>The authentication and encryption scheme used by a schema. <table><tr><td>SCHEME_NONE</td><td>no authentication or encryption</td></tr><tr><td>SCHEME_AMP_AES</td><td>use AMP-SHA1 for authentication, and 128 bit AES for encryption</td></tr><tr><td>SCHEME_AMP_AES_READ_CLEAR</td><td>use AMP-SHA1 for authentication, and 128 bit AES for encrypting schema RPCs.  No encryption or authentication is required to subscribe to the schema.</td></tr></table></summary>
      <package>UbisensePlatform.dll</package>
      <usage>Enumerations</usage>
    </member>
    <member name="T:Ubisense.UPerm.Permission">
      <summary>Access permissions granted for a schema to a group. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Enumerations</usage>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPerm.User">
      <summary>A user of the system who has some authentication credentials. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.User.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.User)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.User.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.User@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.User.Unmarshall(System.IO.BinaryReader,Ubisense.UPerm.User@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.User.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPerm.WindowsAuthenticatedUser">
      <summary>A user of the system who has some authentication credentials, which are generated automatically from the domain, username, and (optionally) GUID of the user. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.WindowsAuthenticatedUser.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.WindowsAuthenticatedUser)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.WindowsAuthenticatedUser.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.WindowsAuthenticatedUser@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.WindowsAuthenticatedUser.Unmarshall(System.IO.BinaryReader,Ubisense.UPerm.WindowsAuthenticatedUser@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.WindowsAuthenticatedUser.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPerm.Group">
      <summary>A group is assigned access permissions to system schemas. Users are members of groups. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Group.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Group)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Group.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Group@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Group.Unmarshall(System.IO.BinaryReader,Ubisense.UPerm.Group@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Group.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPerm.Scheme">
      <summary>The authentication and encryption scheme used by a schema. <table><tr><td>SCHEME_NONE</td><td>no authentication or encryption</td></tr><tr><td>SCHEME_AMP_AES</td><td>use AMP-SHA1 for authentication, and 128 bit AES for encryption</td></tr><tr><td>SCHEME_AMP_AES_READ_CLEAR</td><td>use AMP-SHA1 for authentication, and 128 bit AES for encrypting schema RPCs.  No encryption or authentication is required to subscribe to the schema.</td></tr></table></summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Scheme.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Scheme)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Scheme.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Scheme@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Scheme.Unmarshall(System.IO.BinaryReader,Ubisense.UPerm.Scheme@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Scheme.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPerm.Permission">
      <summary>Access permissions granted for a schema to a group. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Permission.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Permission)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Permission.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Permission@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Permission.Unmarshall(System.IO.BinaryReader,Ubisense.UPerm.Permission@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Permission.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UServiceAdmin.FileServer.Schema">
      <summary>The Ubisense.UServiceAdmin.FileServer schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.FileServer.Schema._rxpo">
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UServiceAdmin.FileServer.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.FileServer.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.FileServer.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.FileServer.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.FileServer.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UServiceAdmin.FileServer.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.FileServer.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.FileServer.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.FileServer.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.FileServer.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.FileServer.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.FileServer.Schema.list_file(Ubisense.UServiceAdmin.ServiceName,Ubisense.UServiceAdmin.Version,System.String,System.String)">
      <summary>Test for existence of a file. Returns true iff the file exists. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="name">The name of the service that owns the file. </param>
      <param name="version">The service version this file belongs to. </param>
      <param name="arch">The architecture the file is for. </param>
      <param name="filename">The name of the file to look for. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.FileServer.Schema.load_file(Ubisense.UServiceAdmin.ServiceName,Ubisense.UServiceAdmin.Version,System.String,System.String,Ubisense.UBase.Blob@)">
      <summary>Get a file from the file server. Returns true iff the file exists and the transfer succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="name">The name of the service that owns the file. </param>
      <param name="version">The service version this file belongs to. </param>
      <param name="arch">The architecture the file is for. </param>
      <param name="filename">The name of the file to retrieve. </param>
      <param name="blob">On success, will be filled with the contents of the file. </param>
    </member>
    <member name="M:Ubisense.UServiceAdmin.FileServer.Schema.save_file(Ubisense.UServiceAdmin.ServiceName,Ubisense.UServiceAdmin.Version,System.String,System.String,Ubisense.UBase.Blob)">
      <summary>Write a file to the file server. Returns true iff the transfer succeeded. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="name">The name of the service that owns the file. </param>
      <param name="version">The service version this file belongs to. </param>
      <param name="arch">The architecture the file is for. </param>
      <param name="filename">The name of the file to store. </param>
      <param name="blob">The contents of the file. </param>
    </member>
    <member name="P:Ubisense.UServiceAdmin.FileServer.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.UServiceAdmin.FileServer.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.UServiceAdmin.FileServer.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.Service">
      <summary>An object representing a platform service. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Service.op_Equality(Ubisense.UServiceAdmin.Service,Ubisense.UServiceAdmin.Service)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Service.op_Inequality(Ubisense.UServiceAdmin.Service,Ubisense.UServiceAdmin.Service)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Service.op_LessThan(Ubisense.UServiceAdmin.Service,Ubisense.UServiceAdmin.Service)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Service.op_GreaterThan(Ubisense.UServiceAdmin.Service,Ubisense.UServiceAdmin.Service)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Service.op_Implicit(Ubisense.UServiceAdmin.Service)~Ubisense.UBase.UObject">
      <summary>Implicit conversion operator to ancestor type global::Ubisense.UBase.UObject</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Service.#cctor">
      <summary>Initialise the Service type</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Service.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>Unsafe constructor to create an instance of type Service with a specific state.
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            </summary>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Service.#ctor(System.Boolean)">
      <summary>Create a new Service instance that is either unique or nil</summary>
      <param name="unique">Make this instance unique</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Service.Narrow(Ubisense.UBase.IObject)">
      <summary>Assign another object to this one if and only if the other object's dynamic type inherits from the static type of this instance</summary>
      <param name="other">The object to assign to this object</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Service.Unique">
      <summary>Make this object into a new unique instance with DynamicType equal to Service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Service.Nil">
      <summary>True iff this object is the nil instance of type Service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Service.ToString">
      <summary>Returns a String representation of the value of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Service.ToString(System.String,System.IFormatProvider)">
      <summary>Equivalent to ToString()</summary>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Service.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Service.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Service.CompareTo(Ubisense.UServiceAdmin.Service)">
      <summary>Compare this instance with 'other'</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Service.Equals(Ubisense.UServiceAdmin.Service)">
      <summary>True if this instance equals obj</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UServiceAdmin.Service.StaticType">
      <summary>The statically-declared type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UServiceAdmin.Service.DynamicType">
      <summary>The most-derived dynamic type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UServiceAdmin.Service.Id">
      <summary>The id of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.Node">
      <summary>An object representing a controller node, which is a host that can run platform services. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Node.op_Equality(Ubisense.UServiceAdmin.Node,Ubisense.UServiceAdmin.Node)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Node.op_Inequality(Ubisense.UServiceAdmin.Node,Ubisense.UServiceAdmin.Node)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Node.op_LessThan(Ubisense.UServiceAdmin.Node,Ubisense.UServiceAdmin.Node)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Node.op_GreaterThan(Ubisense.UServiceAdmin.Node,Ubisense.UServiceAdmin.Node)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Node.op_Implicit(Ubisense.UServiceAdmin.Node)~Ubisense.UBase.UObject">
      <summary>Implicit conversion operator to ancestor type global::Ubisense.UBase.UObject</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Node.#cctor">
      <summary>Initialise the Node type</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Node.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>Unsafe constructor to create an instance of type Node with a specific state.
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            </summary>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Node.#ctor(System.Boolean)">
      <summary>Create a new Node instance that is either unique or nil</summary>
      <param name="unique">Make this instance unique</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Node.Narrow(Ubisense.UBase.IObject)">
      <summary>Assign another object to this one if and only if the other object's dynamic type inherits from the static type of this instance</summary>
      <param name="other">The object to assign to this object</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Node.Unique">
      <summary>Make this object into a new unique instance with DynamicType equal to Node</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Node.Nil">
      <summary>True iff this object is the nil instance of type Node</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Node.ToString">
      <summary>Returns a String representation of the value of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Node.ToString(System.String,System.IFormatProvider)">
      <summary>Equivalent to ToString()</summary>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Node.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Node.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Node.CompareTo(Ubisense.UServiceAdmin.Node)">
      <summary>Compare this instance with 'other'</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Node.Equals(Ubisense.UServiceAdmin.Node)">
      <summary>True if this instance equals obj</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UServiceAdmin.Node.StaticType">
      <summary>The statically-declared type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UServiceAdmin.Node.DynamicType">
      <summary>The most-derived dynamic type of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UServiceAdmin.Node.Id">
      <summary>The id of this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.Version">
      <summary>A service version number, broken down into components. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.Version.major_">
      <summary>The major version number. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.Version.minor_">
      <summary>The minor version number. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.Version.build_">
      <summary>The build number, often known as the revision number, micro version number, or patch level. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Version.op_Equality(Ubisense.UServiceAdmin.Version,Ubisense.UServiceAdmin.Version)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Version.op_Inequality(Ubisense.UServiceAdmin.Version,Ubisense.UServiceAdmin.Version)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Version.op_LessThan(Ubisense.UServiceAdmin.Version,Ubisense.UServiceAdmin.Version)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Version.op_GreaterThan(Ubisense.UServiceAdmin.Version,Ubisense.UServiceAdmin.Version)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Version.#ctor(System.UInt32,System.UInt32,System.UInt32)">
      <summary>Create a new Version instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Version.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Version.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Version.CompareTo(Ubisense.UServiceAdmin.Version)">
      <summary>Compare this instance with 'other'</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.Version.Equals(Ubisense.UServiceAdmin.Version)">
      <summary>True if this instance equals obj</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.ServiceName">
      <summary>The fully qualified name of a service. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.ServiceName.vendor_">
      <summary>The name of the vendor or provider of the service. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.ServiceName.package_">
      <summary>The package of services to which this service belongs. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.ServiceName.service_">
      <summary>The name of this specific service within the package. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.ServiceName.op_Equality(Ubisense.UServiceAdmin.ServiceName,Ubisense.UServiceAdmin.ServiceName)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.ServiceName.op_Inequality(Ubisense.UServiceAdmin.ServiceName,Ubisense.UServiceAdmin.ServiceName)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.ServiceName.op_LessThan(Ubisense.UServiceAdmin.ServiceName,Ubisense.UServiceAdmin.ServiceName)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.ServiceName.op_GreaterThan(Ubisense.UServiceAdmin.ServiceName,Ubisense.UServiceAdmin.ServiceName)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.ServiceName.#ctor(System.String,System.String,System.String)">
      <summary>Create a new ServiceName instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.ServiceName.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.ServiceName.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.ServiceName.CompareTo(Ubisense.UServiceAdmin.ServiceName)">
      <summary>Compare this instance with 'other'</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.ServiceName.Equals(Ubisense.UServiceAdmin.ServiceName)">
      <summary>True if this instance equals obj</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UServiceAdmin.State">
      <summary>The state of a service. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.State.service_">
      <summary>The service object. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.State.version_">
      <summary>The version of the service. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.State.cell_">
      <summary>The cell for which the service has been instantiated. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.State.node_">
      <summary>The controller node on which the service instantiation has been deployed. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.State.status_">
      <summary>The status of a service, desired or actual. <table><tr><td>Starting</td><td>being started</td></tr><tr><td>Running</td><td>running</td></tr><tr><td>Stopping</td><td>writing persistent data back to the core in preparation for stopping</td></tr><tr><td>Stopped</td><td>deployed to the controller but stopped</td></tr><tr><td>Loading</td><td>being deployed to the controller</td></tr></table></summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UServiceAdmin.State.backup_">
      <summary>The time that persistent service data were last written back to the core. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UServiceAdmin.State.#ctor(Ubisense.UServiceAdmin.Service,Ubisense.UServiceAdmin.Version,Ubisense.UCell.Cell,Ubisense.UServiceAdmin.Node,Ubisense.UBase.Symbol,System.DateTime)">
      <summary>Create a new State instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UServiceAdmin.Service">
      <summary>An object representing a platform service. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.Service.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.Service)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.Service.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.Service@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.Service.Unmarshall(System.IO.BinaryReader,Ubisense.UServiceAdmin.Service@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.Service.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UServiceAdmin.Node">
      <summary>An object representing a controller node, which is a host that can run platform services. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.Node.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.Node)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.Node.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.Node@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.Node.Unmarshall(System.IO.BinaryReader,Ubisense.UServiceAdmin.Node@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.Node.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UServiceAdmin.Version">
      <summary>A service version number, broken down into components. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.Version.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.Version)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.Version.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.Version@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.Version.Unmarshall(System.IO.BinaryReader,Ubisense.UServiceAdmin.Version@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.Version.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UServiceAdmin.ServiceName">
      <summary>The fully qualified name of a service. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.ServiceName.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.ServiceName)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.ServiceName.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.ServiceName@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.ServiceName.Unmarshall(System.IO.BinaryReader,Ubisense.UServiceAdmin.ServiceName@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.ServiceName.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UServiceAdmin.State">
      <summary>The state of a service. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.State.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.State)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.State.Marshall(System.IO.BinaryWriter,Ubisense.UServiceAdmin.State@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.State.Unmarshall(System.IO.BinaryReader,Ubisense.UServiceAdmin.State@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UServiceAdmin.State.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserProperties">
      <summary>A structure holding a user name and description. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.UserProperties.user_">
      <summary>The User object. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.UserProperties.name_">
      <summary>The name of the user for authentication purposes. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.UserProperties.desc_">
      <summary>The human-readable description of the user. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserProperties.#ctor(Ubisense.UPerm.User,Ubisense.UBase.ZeroedBinaryString,System.String)">
      <summary>Create a new UserProperties instance with all values specified</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserAuthData">
      <summary>A structure holding salt and authentication data for a specific authentication scheme.   </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.UserAuthData.scheme_">
      <summary>The authentication scheme these data apply to. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.UserAuthData.user_">
      <summary>The user authenticated by these data. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.UserAuthData.salt_">
      <summary>The random salt used for the scheme. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.UserAuthData.auth_data_">
      <summary>The scheme-specific authentication data. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserAuthData.#ctor(Ubisense.UPerm.Scheme,Ubisense.UPerm.User,System.UInt32,Ubisense.UBase.ZeroedBinaryString)">
      <summary>Create a new UserAuthData instance with all values specified</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UPerm.Config.GroupProperties">
      <summary>A structure holding a group name and description.  The desc should be a human readable description of a member of the group, such as "an administrator". </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.GroupProperties.group_">
      <summary>Identifies the group. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.GroupProperties.name_">
      <summary>The name of the group for authentication purposes. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.GroupProperties.desc_">
      <summary>The human-readable description of the group. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupProperties.#ctor(Ubisense.UPerm.Group,Ubisense.UBase.ZeroedBinaryString,System.String)">
      <summary>Create a new GroupProperties instance with all values specified</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UPerm.Config.Implies">
      <summary>A structure holding a subject group and object group. Membership of the subject group implies membership of the object group. Another way of describing it is that the subject group is itself a member of the object group. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.Implies.subject_">
      <summary></summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.Implies.object_">
      <summary></summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Implies.#ctor(Ubisense.UPerm.Group,Ubisense.UPerm.Group)">
      <summary>Create a new Implies instance with all values specified</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserGroupCell">
      <summary>A structure holding a user, group and cell. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.UserGroupCell.user_">
      <summary>The user. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.UserGroupCell.group_">
      <summary>The group. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.UserGroupCell.cell_">
      <summary>The cell. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserGroupCell.#ctor(Ubisense.UPerm.User,Ubisense.UPerm.Group,Ubisense.UCell.Cell)">
      <summary>Create a new UserGroupCell instance with all values specified</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UPerm.Config.SchemaPermission">
      <summary>A structure holding schema permissions for a group. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.SchemaPermission.module_">
      <summary>The module the schema in question belongs to. This field is required because multiple modules can have different schemas with the same name. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.SchemaPermission.schema_">
      <summary>The schema this permission applies to. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.SchemaPermission.group_">
      <summary>The group that has this permission. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.SchemaPermission.permission_">
      <summary>The permission held. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.SchemaPermission.#ctor(System.String,System.String,Ubisense.UPerm.Group,Ubisense.UPerm.Permission)">
      <summary>Create a new SchemaPermission instance with all values specified</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UPerm.Config.SchemaScheme">
      <summary>A structure holding a schema and authentication scheme. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.SchemaScheme.module_">
      <summary>The module the schema in question belongs to. This field is required because multiple modules can have different schemas with the same name. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.SchemaScheme.schema_">
      <summary>The name of the schema in question. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.SchemaScheme.scheme_">
      <summary>The authentication scheme in question. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.SchemaScheme.#ctor(System.String,System.String,Ubisense.UPerm.Scheme)">
      <summary>Create a new SchemaScheme instance with all values specified</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserPassword">
      <summary>Holds a user and their authentication data (usually a password) for the given authentication scheme. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.UserPassword.user_">
      <summary>The user in question. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.UserPassword.scheme_">
      <summary>The authentication scheme this password relates to. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.UserPassword.password_">
      <summary>The user's password (or other authentication credentials) for the given scheme. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserPassword.#ctor(Ubisense.UPerm.User,Ubisense.UPerm.Scheme,Ubisense.UBase.ZeroedBinaryString)">
      <summary>Create a new UserPassword instance with all values specified</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UPerm.Config.ChangeOperation">
      <summary>A single structure that can hold any change for the schema, to allow a sequence of changes to be applied as a single transaction.  Each operation uses only some of the fields. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.ChangeOperation.operation_">
      <summary>Specifies the type of operation that this structure represents. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.ChangeOperation.user_">
      <summary>For user operations, specifies the user to operate on. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.ChangeOperation.name_">
      <summary>For SET_USER_PROPERTIES operations, gives the user name; for SET_GROUP_PROPERTIES, gives the group name. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.ChangeOperation.desc_">
      <summary>The human-readable description, for SET_USER_PROPERTIES and SET_GROUP_PROPERTIES operations. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.ChangeOperation.scheme_">
      <summary>For SET_USER_AUTH_DATA and SET_SCHEMA_AUTH_SCHEME, gives the scheme in question. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.ChangeOperation.password_">
      <summary>For SET_USER_AUTH_DATA, gives the user's password. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.ChangeOperation.group_">
      <summary>For group operations, specifies the group to operate on. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.ChangeOperation.implies_group_">
      <summary>For ASSERT_GROUP_IMPLIES_GROUP and RETRACT_GROUP_IMPLIES_GROUP, gives the object group (the parent in the hierarchy). </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.ChangeOperation.cell_">
      <summary>For ASSERT_USER_GROUP_CELL and RETRACT_USER_GROUP_CELL, gives the cell in question. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.ChangeOperation.module_">
      <summary>For ASSERT_SCHEMA_PERMISSION, RETRACT_SCHEMA_PERMISSION, SET_SCHEMA_AUTH_SCHEME and UNSET_SCHEMA_AUTH_SCHEME, gives the module owning the schema in question. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.ChangeOperation.schema_">
      <summary>For ASSERT_SCHEMA_PERMISSION, RETRACT_SCHEMA_PERMISSION, SET_SCHEMA_AUTH_SCHEME and UNSET_SCHEMA_AUTH_SCHEME, gives the name of the schema in question. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.ChangeOperation.permission_">
      <summary>For ASSERT_SCHEMA_PERMISSION and RETRACT_SCHEMA_PERMISSION, gives the permission being added or removed. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.ChangeOperation.#ctor(Ubisense.UPerm.Config.Operation,Ubisense.UPerm.User,Ubisense.UBase.ZeroedBinaryString,System.String,Ubisense.UPerm.Scheme,Ubisense.UBase.ZeroedBinaryString,Ubisense.UPerm.Group,Ubisense.UPerm.Group,Ubisense.UCell.Cell,System.String,System.String,Ubisense.UPerm.Permission)">
      <summary>Create a new ChangeOperation instance with all values specified</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UPerm.Config.Operation">
      <summary>Operations on the schema. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Enumerations</usage>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPerm.Config.UserProperties">
      <summary>A structure holding a user name and description. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.UserProperties.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Config.UserProperties)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.UserProperties.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Config.UserProperties@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.UserProperties.Unmarshall(System.IO.BinaryReader,Ubisense.UPerm.Config.UserProperties@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.UserProperties.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPerm.Config.UserAuthData">
      <summary>A structure holding salt and authentication data for a specific authentication scheme.   </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.UserAuthData.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Config.UserAuthData)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.UserAuthData.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Config.UserAuthData@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.UserAuthData.Unmarshall(System.IO.BinaryReader,Ubisense.UPerm.Config.UserAuthData@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.UserAuthData.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPerm.Config.GroupProperties">
      <summary>A structure holding a group name and description.  The desc should be a human readable description of a member of the group, such as "an administrator". </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.GroupProperties.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Config.GroupProperties)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.GroupProperties.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Config.GroupProperties@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.GroupProperties.Unmarshall(System.IO.BinaryReader,Ubisense.UPerm.Config.GroupProperties@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.GroupProperties.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPerm.Config.Implies">
      <summary>A structure holding a subject group and object group. Membership of the subject group implies membership of the object group. Another way of describing it is that the subject group is itself a member of the object group. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.Implies.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Config.Implies)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.Implies.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Config.Implies@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.Implies.Unmarshall(System.IO.BinaryReader,Ubisense.UPerm.Config.Implies@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.Implies.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPerm.Config.UserGroupCell">
      <summary>A structure holding a user, group and cell. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.UserGroupCell.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Config.UserGroupCell)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.UserGroupCell.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Config.UserGroupCell@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.UserGroupCell.Unmarshall(System.IO.BinaryReader,Ubisense.UPerm.Config.UserGroupCell@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.UserGroupCell.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPerm.Config.SchemaPermission">
      <summary>A structure holding schema permissions for a group. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.SchemaPermission.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Config.SchemaPermission)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.SchemaPermission.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Config.SchemaPermission@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.SchemaPermission.Unmarshall(System.IO.BinaryReader,Ubisense.UPerm.Config.SchemaPermission@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.SchemaPermission.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPerm.Config.SchemaScheme">
      <summary>A structure holding a schema and authentication scheme. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.SchemaScheme.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Config.SchemaScheme)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.SchemaScheme.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Config.SchemaScheme@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.SchemaScheme.Unmarshall(System.IO.BinaryReader,Ubisense.UPerm.Config.SchemaScheme@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.SchemaScheme.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPerm.Config.UserPassword">
      <summary>Holds a user and their authentication data (usually a password) for the given authentication scheme. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.UserPassword.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Config.UserPassword)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.UserPassword.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Config.UserPassword@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.UserPassword.Unmarshall(System.IO.BinaryReader,Ubisense.UPerm.Config.UserPassword@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.UserPassword.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPerm.Config.ChangeOperation">
      <summary>A single structure that can hold any change for the schema, to allow a sequence of changes to be applied as a single transaction.  Each operation uses only some of the fields. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.ChangeOperation.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Config.ChangeOperation)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.ChangeOperation.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Config.ChangeOperation@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.ChangeOperation.Unmarshall(System.IO.BinaryReader,Ubisense.UPerm.Config.ChangeOperation@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.ChangeOperation.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPerm.Config.Operation">
      <summary>Operations on the schema. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.Operation.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Config.Operation)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.Operation.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Config.Operation@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.Operation.Unmarshall(System.IO.BinaryReader,Ubisense.UPerm.Config.Operation@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.Operation.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UPerm.Config.Capabilities.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.Capabilities.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Config.Capabilities.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.Capabilities.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UPerm.Config.Capabilities.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.Capabilities.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UPerm.Config.Capabilities.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UPerm.Config.Capabilities.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.Schema">
      <summary>The Ubisense.UPerm.Config schema class controls all storage and connection for this relational schema</summary>
      <package>UbisensePlatform.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.Schema._rxpo">
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisensePlatform.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisensePlatform.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisensePlatform.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisensePlatform.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisensePlatform.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisensePlatform.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisensePlatform.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisensePlatform.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.batch_change(System.Collections.Generic.LinkedList{Ubisense.UPerm.Config.ChangeOperation},System.Collections.Generic.List{System.String}@)">
      <summary>Apply a sequence of change operations as a single transaction.  This can be quite important in UPerm because a failure to commit parts of a set of changes could leave the permissions broken.  Each operation is represented by an instance of the ChangeOperation structure with the appropriate fields set. Returns true iff the batch was successfully applied as a whole. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="changes">The list of changes to make. </param>
      <param name="report">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.set_user_properties(Ubisense.UPerm.Config.UserProperties,System.Collections.Generic.List{System.String}@)">
      <summary>Set the information for a user, replacing any existing information for that user. Returns true iff the change succeeded. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="props">The new UserProperties structure to store. </param>
      <param name="report">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.remove_user(Ubisense.UPerm.User,System.Boolean,System.Collections.Generic.List{System.String}@)">
      <summary>Remove a user, cascading through referencing relations if required. Returns true iff the change succeeded. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="user">The user to remove. </param>
      <param name="remove_references">Whether to force the removal by cascading through other relations that mention this user. If this is false and other relations mention this user, the operation will fail. </param>
      <param name="report">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.set_user_auth_data(Ubisense.UPerm.User,Ubisense.UPerm.Scheme,Ubisense.UBase.ZeroedBinaryString,System.Collections.Generic.List{System.String}@)">
      <summary>Set the authentication for a user and scheme. Generates a random salt and authentication data for the scheme, and replaces any existing entry for this combination of user and scheme. Returns true iff the change succeeded. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="user">The user to set. </param>
      <param name="scheme">The authentication scheme the data are intended for. </param>
      <param name="password">The authentication data (usually a password) to set. </param>
      <param name="report">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.remove_user_auth_data(Ubisense.UPerm.User,Ubisense.UPerm.Scheme,System.Collections.Generic.List{System.String}@)">
      <summary>Remove authentication for a user and scheme, if any exists. Returns true iff the removal occurred or there was no such entry present. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="user">The user in question. </param>
      <param name="scheme">The authentication scheme in question. </param>
      <param name="report">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.set_group_properties(Ubisense.UPerm.Config.GroupProperties,System.Collections.Generic.List{System.String}@)">
      <summary>Set the information for a group, replacing any existing information for that group. Returns true iff the change succeeded. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="props">The new GroupProperties structure to store. </param>
      <param name="report">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.remove_group(Ubisense.UPerm.Group,System.Boolean,System.Collections.Generic.List{System.String}@)">
      <summary>Remove a group, cascading through referencing tables if required. Returns true iff the change succeeded. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="group">The group to remove. </param>
      <param name="remove_references">Whether to force the removal by cascading through other relations that mention this group. If this is false and other relations mention this group, the operation will fail. </param>
      <param name="report">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.assert_group_implies_group(Ubisense.UPerm.Group,Ubisense.UPerm.Group,System.Collections.Generic.List{System.String}@)">
      <summary>Assert that membership of subject implies membership of object. Returns true iff the change succeeded. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="isubject">The subject (child) group. </param>
      <param name="iobject">The object (parent) group. </param>
      <param name="report">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.retract_group_implies_group(Ubisense.UPerm.Group,Ubisense.UPerm.Group,System.Collections.Generic.List{System.String}@)">
      <summary>Retract that membership of subject implies membership of object. Returns true iff the change succeeded or the (subject, object) pair was already not in the relation. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="isubject">The subject (child) group. </param>
      <param name="iobject">The object (parent) group. </param>
      <param name="report">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.assert_user_group_cell(Ubisense.UPerm.Config.UserGroupCell,System.Collections.Generic.List{System.String}@)">
      <summary>Assert that a user is a member of a group in a cell. Returns true iff the addition succeeded. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="r">Instance of the UserGroupCell structure to specify the new member, the group he or she is joining, and the cell the membership is valid in. </param>
      <param name="report">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.retract_user_group_cell(Ubisense.UPerm.Config.UserGroupCell,System.Collections.Generic.List{System.String}@)">
      <summary>Retract that a user is a member of a group in a cell. This is slightly different from removing the user from that group in that cell, because the relation does not store exclusions. If you call assert_user_group_cell on a particular user, group and cell, later calling retract_user_group_cell on the same user and group and one of the cell's children, this later call will succeed but have no effect: the membership is still valid inside that cell, because it is valid throughout the whole of the parent cell.  Returns true iff the membership was removed or the user was already not a member in that cell. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="r"></param>
      <param name="report"></param>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.assert_schema_permission(Ubisense.UPerm.Config.SchemaPermission,System.Collections.Generic.List{System.String}@)">
      <summary>Assert that a group has permission to access a schema. Returns true iff the addition succeeded. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="permission">Instance of the SchemaPermission structure to specify the new schema, group, and permission held. </param>
      <param name="report">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.retract_schema_permission(Ubisense.UPerm.Config.SchemaPermission,System.Collections.Generic.List{System.String}@)">
      <summary>Retract that a group has permission to access a schema. Returns true iff the permission was removed or was already absent. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="permission">Instance of the SchemaPermission structure to remove. </param>
      <param name="report">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.set_schema_auth_scheme(Ubisense.UPerm.Config.SchemaScheme,System.Collections.Generic.List{System.String}@)">
      <summary>Set schema authentication scheme, replacing the currently preferred authentication scheme for that schema. Returns true iff the change succeeded. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="s">Instance of the SchemaScheme structure to specify the schema to change and the new scheme it wants to use. </param>
      <param name="report">Will be used to return any errors. </param>
    </member>
    <member name="M:Ubisense.UPerm.Config.Schema.unset_schema_auth_scheme(Ubisense.UPerm.Config.SchemaScheme,System.Collections.Generic.List{System.String}@)">
      <summary>Remove schema authentication scheme, reverting to default of SCHEME_AMP_AES. Returns true iff the schema was successfully unset or was already not present in the relation. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="s">Instance of the SchemaScheme structure to specify the schema to remove. The authentication scheme specified is ignored. </param>
      <param name="report">Will be used to return any errors. </param>
    </member>
    <member name="P:Ubisense.UPerm.Config.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.UPerm.Config.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UPerm.Config.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserHasProperties">
      <summary>This relation stores the UserProperties structure for each user, and provides look-up. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasProperties.AddInsertHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UPerm.Config.UserProperties})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasProperties.AddUpdateHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UPerm.Config.UserProperties})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasProperties.AddDeleteHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UPerm.Config.UserProperties})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasProperties.user_(Ubisense.UPerm.Config.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index user_. The User object is a key. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasProperties.user_(Ubisense.UPerm.Config.ReadTransaction,Ubisense.UPerm.User)">
      <summary>Iterate over the elements of the table that match the first argument of the index user_. The User object is a key. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasProperties.name_(Ubisense.UPerm.Config.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index name_. The user's name is a key. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasProperties.name_(Ubisense.UPerm.Config.ReadTransaction,Ubisense.UBase.ZeroedBinaryString)">
      <summary>Iterate over the elements of the table that match the first argument of the index name_. The user's name is a key. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserHasProperties.___lop_key_user_">
      <summary>The lex-ordered prefixable key for the index user_</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserHasProperties.___lop_cmp_user_">
      <summary>The ordering for the index user_</summary>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasProperties.___lop_cmp_user_.Compare(Ubisense.UPerm.Config.UserHasProperties.___lop_key_user_,Ubisense.UPerm.Config.UserHasProperties.___lop_key_user_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserHasProperties.___lop_key_name_">
      <summary>The lex-ordered prefixable key for the index name_</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserHasProperties.___lop_cmp_name_">
      <summary>The ordering for the index name_</summary>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasProperties.___lop_cmp_name_.Compare(Ubisense.UPerm.Config.UserHasProperties.___lop_key_name_,Ubisense.UPerm.Config.UserHasProperties.___lop_key_name_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserHasAuthData">
      <summary>Relates users to their authentication data.  A single user can have only one entry for each authentication scheme. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasAuthData.AddInsertHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UPerm.Config.UserAuthData})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasAuthData.AddUpdateHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UPerm.Config.UserAuthData})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasAuthData.AddDeleteHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UPerm.Config.UserAuthData})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasAuthData.scheme_user_(Ubisense.UPerm.Config.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index scheme_user_. The (scheme,user) pair is the primary key. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasAuthData.scheme_user_(Ubisense.UPerm.Config.ReadTransaction,Ubisense.UPerm.Scheme)">
      <summary>Iterate over the elements of the table that match the first argument of the index scheme_user_. The (scheme,user) pair is the primary key. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasAuthData.scheme_user_(Ubisense.UPerm.Config.ReadTransaction,Ubisense.UPerm.Scheme,Ubisense.UPerm.User)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index scheme_user_. The (scheme,user) pair is the primary key. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasAuthData.user_(Ubisense.UPerm.Config.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index user_. Gets all of the data for one user. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasAuthData.user_(Ubisense.UPerm.Config.ReadTransaction,Ubisense.UPerm.User)">
      <summary>Iterate over the elements of the table that match the first argument of the index user_. Gets all of the data for one user. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserHasAuthData.___lop_key_scheme_user_">
      <summary>The lex-ordered prefixable key for the index scheme_user_</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserHasAuthData.___lop_cmp_scheme_user_">
      <summary>The ordering for the index scheme_user_</summary>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasAuthData.___lop_cmp_scheme_user_.Compare(Ubisense.UPerm.Config.UserHasAuthData.___lop_key_scheme_user_,Ubisense.UPerm.Config.UserHasAuthData.___lop_key_scheme_user_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserHasAuthData.___lop_key_user_">
      <summary>The lex-ordered prefixable key for the index user_</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserHasAuthData.___lop_cmp_user_">
      <summary>The ordering for the index user_</summary>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasAuthData.___lop_cmp_user_.Compare(Ubisense.UPerm.Config.UserHasAuthData.___lop_key_user_,Ubisense.UPerm.Config.UserHasAuthData.___lop_key_user_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.GroupHasProperties">
      <summary>A group has a name and description.  The desc should be a human readable description of a member the group, such as "an administrator". See also: GroupProperties </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupHasProperties.AddInsertHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UPerm.Config.GroupProperties})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupHasProperties.AddUpdateHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UPerm.Config.GroupProperties})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupHasProperties.AddDeleteHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UPerm.Config.GroupProperties})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupHasProperties.group_(Ubisense.UPerm.Config.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index group_. The group identity is a key. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupHasProperties.group_(Ubisense.UPerm.Config.ReadTransaction,Ubisense.UPerm.Group)">
      <summary>Iterate over the elements of the table that match the first argument of the index group_. The group identity is a key. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupHasProperties.name_(Ubisense.UPerm.Config.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index name_. The authentication name of the group is a key. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupHasProperties.name_(Ubisense.UPerm.Config.ReadTransaction,Ubisense.UBase.ZeroedBinaryString)">
      <summary>Iterate over the elements of the table that match the first argument of the index name_. The authentication name of the group is a key. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UPerm.Config.GroupHasProperties.___lop_key_group_">
      <summary>The lex-ordered prefixable key for the index group_</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.GroupHasProperties.___lop_cmp_group_">
      <summary>The ordering for the index group_</summary>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupHasProperties.___lop_cmp_group_.Compare(Ubisense.UPerm.Config.GroupHasProperties.___lop_key_group_,Ubisense.UPerm.Config.GroupHasProperties.___lop_key_group_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.GroupHasProperties.___lop_key_name_">
      <summary>The lex-ordered prefixable key for the index name_</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.GroupHasProperties.___lop_cmp_name_">
      <summary>The ordering for the index name_</summary>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupHasProperties.___lop_cmp_name_.Compare(Ubisense.UPerm.Config.GroupHasProperties.___lop_key_name_,Ubisense.UPerm.Config.GroupHasProperties.___lop_key_name_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.GroupImpliesGroup">
      <summary>Membership of subject group implies membership of object group. This relation handles the group hierarchy. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupImpliesGroup.AddInsertHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UPerm.Config.Implies})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupImpliesGroup.AddUpdateHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UPerm.Config.Implies})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupImpliesGroup.AddDeleteHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UPerm.Config.Implies})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupImpliesGroup.subject_object_(Ubisense.UPerm.Config.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index subject_object_. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupImpliesGroup.subject_object_(Ubisense.UPerm.Config.ReadTransaction,Ubisense.UPerm.Group)">
      <summary>Iterate over the elements of the table that match the first argument of the index subject_object_. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupImpliesGroup.subject_object_(Ubisense.UPerm.Config.ReadTransaction,Ubisense.UPerm.Group,Ubisense.UPerm.Group)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index subject_object_. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupImpliesGroup.subject_(Ubisense.UPerm.Config.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index subject_. Gives the object groups for a subject (the groups the subject is a member of). </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupImpliesGroup.subject_(Ubisense.UPerm.Config.ReadTransaction,Ubisense.UPerm.Group)">
      <summary>Iterate over the elements of the table that match the first argument of the index subject_. Gives the object groups for a subject (the groups the subject is a member of). </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupImpliesGroup.object_(Ubisense.UPerm.Config.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index object_. Gives the subject groups for an object (the member groups of the object). </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupImpliesGroup.object_(Ubisense.UPerm.Config.ReadTransaction,Ubisense.UPerm.Group)">
      <summary>Iterate over the elements of the table that match the first argument of the index object_. Gives the subject groups for an object (the member groups of the object). </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UPerm.Config.GroupImpliesGroup.___lop_key_subject_object_">
      <summary>The lex-ordered prefixable key for the index subject_object_</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.GroupImpliesGroup.___lop_cmp_subject_object_">
      <summary>The ordering for the index subject_object_</summary>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupImpliesGroup.___lop_cmp_subject_object_.Compare(Ubisense.UPerm.Config.GroupImpliesGroup.___lop_key_subject_object_,Ubisense.UPerm.Config.GroupImpliesGroup.___lop_key_subject_object_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.GroupImpliesGroup.___lop_key_subject_">
      <summary>The lex-ordered prefixable key for the index subject_</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.GroupImpliesGroup.___lop_cmp_subject_">
      <summary>The ordering for the index subject_</summary>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupImpliesGroup.___lop_cmp_subject_.Compare(Ubisense.UPerm.Config.GroupImpliesGroup.___lop_key_subject_,Ubisense.UPerm.Config.GroupImpliesGroup.___lop_key_subject_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.GroupImpliesGroup.___lop_key_object_">
      <summary>The lex-ordered prefixable key for the index object_</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.GroupImpliesGroup.___lop_cmp_object_">
      <summary>The ordering for the index object_</summary>
    </member>
    <member name="M:Ubisense.UPerm.Config.GroupImpliesGroup.___lop_cmp_object_.Compare(Ubisense.UPerm.Config.GroupImpliesGroup.___lop_key_object_,Ubisense.UPerm.Config.GroupImpliesGroup.___lop_key_object_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserHasGroupInCell">
      <summary>A user is a member of a group within a cell. Its row type is UserGroupCell. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasGroupInCell.AddInsertHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UPerm.Config.UserGroupCell})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasGroupInCell.AddUpdateHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UPerm.Config.UserGroupCell})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasGroupInCell.AddDeleteHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UPerm.Config.UserGroupCell})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasGroupInCell.user_group_cell_(Ubisense.UPerm.Config.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index user_group_cell_. The only key is formed by all three fields together. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasGroupInCell.user_group_cell_(Ubisense.UPerm.Config.ReadTransaction,Ubisense.UPerm.User)">
      <summary>Iterate over the elements of the table that match the first argument of the index user_group_cell_. The only key is formed by all three fields together. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasGroupInCell.user_group_cell_(Ubisense.UPerm.Config.ReadTransaction,Ubisense.UPerm.User,Ubisense.UPerm.Group)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index user_group_cell_. The only key is formed by all three fields together. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasGroupInCell.user_group_cell_(Ubisense.UPerm.Config.ReadTransaction,Ubisense.UPerm.User,Ubisense.UPerm.Group,Ubisense.UCell.Cell)">
      <summary>Iterate over the elements of the table defined by the first 3 arguments of the index user_group_cell_. The only key is formed by all three fields together. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasGroupInCell.group_cell_(Ubisense.UPerm.Config.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index group_cell_. Used to get the users belonging to a given group within a given cell. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasGroupInCell.group_cell_(Ubisense.UPerm.Config.ReadTransaction,Ubisense.UPerm.Group)">
      <summary>Iterate over the elements of the table that match the first argument of the index group_cell_. Used to get the users belonging to a given group within a given cell. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasGroupInCell.group_cell_(Ubisense.UPerm.Config.ReadTransaction,Ubisense.UPerm.Group,Ubisense.UCell.Cell)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index group_cell_. Used to get the users belonging to a given group within a given cell. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasGroupInCell.user_(Ubisense.UPerm.Config.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index user_. Indexes group memberships by user. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasGroupInCell.user_(Ubisense.UPerm.Config.ReadTransaction,Ubisense.UPerm.User)">
      <summary>Iterate over the elements of the table that match the first argument of the index user_. Indexes group memberships by user. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasGroupInCell.group_(Ubisense.UPerm.Config.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index group_. Indexes memberships by group. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasGroupInCell.group_(Ubisense.UPerm.Config.ReadTransaction,Ubisense.UPerm.Group)">
      <summary>Iterate over the elements of the table that match the first argument of the index group_. Indexes memberships by group. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserHasGroupInCell.___lop_key_user_group_cell_">
      <summary>The lex-ordered prefixable key for the index user_group_cell_</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserHasGroupInCell.___lop_cmp_user_group_cell_">
      <summary>The ordering for the index user_group_cell_</summary>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasGroupInCell.___lop_cmp_user_group_cell_.Compare(Ubisense.UPerm.Config.UserHasGroupInCell.___lop_key_user_group_cell_,Ubisense.UPerm.Config.UserHasGroupInCell.___lop_key_user_group_cell_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserHasGroupInCell.___lop_key_group_cell_">
      <summary>The lex-ordered prefixable key for the index group_cell_</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserHasGroupInCell.___lop_cmp_group_cell_">
      <summary>The ordering for the index group_cell_</summary>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasGroupInCell.___lop_cmp_group_cell_.Compare(Ubisense.UPerm.Config.UserHasGroupInCell.___lop_key_group_cell_,Ubisense.UPerm.Config.UserHasGroupInCell.___lop_key_group_cell_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserHasGroupInCell.___lop_key_user_">
      <summary>The lex-ordered prefixable key for the index user_</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserHasGroupInCell.___lop_cmp_user_">
      <summary>The ordering for the index user_</summary>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasGroupInCell.___lop_cmp_user_.Compare(Ubisense.UPerm.Config.UserHasGroupInCell.___lop_key_user_,Ubisense.UPerm.Config.UserHasGroupInCell.___lop_key_user_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserHasGroupInCell.___lop_key_group_">
      <summary>The lex-ordered prefixable key for the index group_</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.UserHasGroupInCell.___lop_cmp_group_">
      <summary>The ordering for the index group_</summary>
    </member>
    <member name="M:Ubisense.UPerm.Config.UserHasGroupInCell.___lop_cmp_group_.Compare(Ubisense.UPerm.Config.UserHasGroupInCell.___lop_key_group_,Ubisense.UPerm.Config.UserHasGroupInCell.___lop_key_group_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.SchemaHasPermission">
      <summary>A schema has permission for a group.  Empty module and schema are used to specify permissions applied by default to those schemas with no entry in this relation. The row type is SchemaPermission. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.SchemaHasPermission.AddInsertHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UPerm.Config.SchemaPermission})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.SchemaHasPermission.AddUpdateHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UPerm.Config.SchemaPermission})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.SchemaHasPermission.AddDeleteHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UPerm.Config.SchemaPermission})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.SchemaHasPermission.module_schema_group_(Ubisense.UPerm.Config.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index module_schema_group_. The (module, schema) pair and the group together uniquely identify a permission. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.SchemaHasPermission.module_schema_group_(Ubisense.UPerm.Config.ReadTransaction,System.String)">
      <summary>Iterate over the elements of the table that match the first argument of the index module_schema_group_. The (module, schema) pair and the group together uniquely identify a permission. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.SchemaHasPermission.module_schema_group_(Ubisense.UPerm.Config.ReadTransaction,System.String,System.String)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index module_schema_group_. The (module, schema) pair and the group together uniquely identify a permission. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.SchemaHasPermission.module_schema_group_(Ubisense.UPerm.Config.ReadTransaction,System.String,System.String,Ubisense.UPerm.Group)">
      <summary>Iterate over the elements of the table defined by the first 3 arguments of the index module_schema_group_. The (module, schema) pair and the group together uniquely identify a permission. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.SchemaHasPermission.group_(Ubisense.UPerm.Config.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index group_. This index facilitates finding the permissions for a group. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.SchemaHasPermission.group_(Ubisense.UPerm.Config.ReadTransaction,Ubisense.UPerm.Group)">
      <summary>Iterate over the elements of the table that match the first argument of the index group_. This index facilitates finding the permissions for a group. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UPerm.Config.SchemaHasPermission.___lop_key_module_schema_group_">
      <summary>The lex-ordered prefixable key for the index module_schema_group_</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.SchemaHasPermission.___lop_cmp_module_schema_group_">
      <summary>The ordering for the index module_schema_group_</summary>
    </member>
    <member name="M:Ubisense.UPerm.Config.SchemaHasPermission.___lop_cmp_module_schema_group_.Compare(Ubisense.UPerm.Config.SchemaHasPermission.___lop_key_module_schema_group_,Ubisense.UPerm.Config.SchemaHasPermission.___lop_key_module_schema_group_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.SchemaHasPermission.___lop_key_group_">
      <summary>The lex-ordered prefixable key for the index group_</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.SchemaHasPermission.___lop_cmp_group_">
      <summary>The ordering for the index group_</summary>
    </member>
    <member name="M:Ubisense.UPerm.Config.SchemaHasPermission.___lop_cmp_group_.Compare(Ubisense.UPerm.Config.SchemaHasPermission.___lop_key_group_,Ubisense.UPerm.Config.SchemaHasPermission.___lop_key_group_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.SchemaHasScheme">
      <summary>Gives the authentication scheme used by each schema. A schema can use at most one scheme.  Empty module and schema are used to specify the scheme used by default for schemas with no entry in this relation. The row type of this relation is SchemaScheme. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.SchemaHasScheme.AddInsertHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UPerm.Config.SchemaScheme})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.SchemaHasScheme.AddUpdateHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UPerm.Config.SchemaScheme})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.SchemaHasScheme.AddDeleteHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UPerm.Config.SchemaScheme})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.SchemaHasScheme.module_schema_(Ubisense.UPerm.Config.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index module_schema_. The (module,schema) pair identifying the schema amongst all schemas is the primary key. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.SchemaHasScheme.module_schema_(Ubisense.UPerm.Config.ReadTransaction,System.String)">
      <summary>Iterate over the elements of the table that match the first argument of the index module_schema_. The (module,schema) pair identifying the schema amongst all schemas is the primary key. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.SchemaHasScheme.module_schema_(Ubisense.UPerm.Config.ReadTransaction,System.String,System.String)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index module_schema_. The (module,schema) pair identifying the schema amongst all schemas is the primary key. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UPerm.Config.SchemaHasScheme.___lop_key_module_schema_">
      <summary>The lex-ordered prefixable key for the index module_schema_</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.SchemaHasScheme.___lop_cmp_module_schema_">
      <summary>The ordering for the index module_schema_</summary>
    </member>
    <member name="M:Ubisense.UPerm.Config.SchemaHasScheme.___lop_cmp_module_schema_.Compare(Ubisense.UPerm.Config.SchemaHasScheme.___lop_key_module_schema_,Ubisense.UPerm.Config.SchemaHasScheme.___lop_key_module_schema_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.Capabilities">
      <summary>Capabilities of the core license file. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Capabilities.AddInsertHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UPerm.Config.Capabilities.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Capabilities.AddUpdateHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UPerm.Config.Capabilities.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Capabilities.AddDeleteHandler(Ubisense.UPerm.Config.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UPerm.Config.Capabilities.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Capabilities.name_value_(Ubisense.UPerm.Config.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index name_value_. The (name, value) pair is unique. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Capabilities.name_value_(Ubisense.UPerm.Config.ReadTransaction,System.String)">
      <summary>Iterate over the elements of the table that match the first argument of the index name_value_. The (name, value) pair is unique. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Capabilities.name_value_(Ubisense.UPerm.Config.ReadTransaction,System.String,System.String)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index name_value_. The (name, value) pair is unique. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UPerm.Config.Capabilities.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.Capabilities.RowType.name_">
      <summary>The name of the capability. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UPerm.Config.Capabilities.RowType.value_">
      <summary>The value held for this capability. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Capabilities.RowType.op_Equality(Ubisense.UPerm.Config.Capabilities.RowType,Ubisense.UPerm.Config.Capabilities.RowType)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Capabilities.RowType.op_Inequality(Ubisense.UPerm.Config.Capabilities.RowType,Ubisense.UPerm.Config.Capabilities.RowType)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Capabilities.RowType.op_LessThan(Ubisense.UPerm.Config.Capabilities.RowType,Ubisense.UPerm.Config.Capabilities.RowType)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Capabilities.RowType.op_GreaterThan(Ubisense.UPerm.Config.Capabilities.RowType,Ubisense.UPerm.Config.Capabilities.RowType)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Capabilities.RowType.#ctor(System.String,System.String)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Capabilities.RowType.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Capabilities.RowType.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Capabilities.RowType.CompareTo(Ubisense.UPerm.Config.Capabilities.RowType)">
      <summary>Compare this instance with 'other'</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UPerm.Config.Capabilities.RowType.Equals(Ubisense.UPerm.Config.Capabilities.RowType)">
      <summary>True if this instance equals obj</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UPerm.Config.Capabilities.___lop_key_name_value_">
      <summary>The lex-ordered prefixable key for the index name_value_</summary>
    </member>
    <member name="T:Ubisense.UPerm.Config.Capabilities.___lop_cmp_name_value_">
      <summary>The ordering for the index name_value_</summary>
    </member>
    <member name="M:Ubisense.UPerm.Config.Capabilities.___lop_cmp_name_value_.Compare(Ubisense.UPerm.Config.Capabilities.___lop_key_name_value_,Ubisense.UPerm.Config.Capabilities.___lop_key_name_value_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UCell.Config.Names.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.Config.Names.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UCell.Config.Names.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.Config.Names.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UCell.Config.Names.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.Config.Names.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UCell.Config.Names.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.Config.Names.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UCell.Config.Hierarchy.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.Config.Hierarchy.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UCell.Config.Hierarchy.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.Config.Hierarchy.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UCell.Config.Hierarchy.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.Config.Hierarchy.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UCell.Config.Hierarchy.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UCell.Config.Hierarchy.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UCell.Config.Schema">
      <summary>The Ubisense.UCell.Config schema class controls all storage and connection for this relational schema</summary>
      <package>UbisensePlatform.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.UCell.Config.Schema._rxpo">
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UCell.Config.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisensePlatform.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisensePlatform.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisensePlatform.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisensePlatform.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="M:Ubisense.UCell.Config.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisensePlatform.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisensePlatform.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisensePlatform.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisensePlatform.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Schema.get_named_cell(System.String,Ubisense.UCell.Cell@)">
      <summary>Get a cell by name, returning true and filling in the  cell value if the name is valid, or false and setting the cell to nil if not. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="name">The name of the cell </param>
      <param name="cell">The cell with the given name </param>
    </member>
    <member name="M:Ubisense.UCell.Config.Schema.get_cell_name(Ubisense.UCell.Cell,System.String@)">
      <summary>Get the name of a cell, returning true and filling in the  name value if the name is valid, or false and setting the cell to the empty string if not. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="cell">The cell </param>
      <param name="name">The name of the cell </param>
    </member>
    <member name="M:Ubisense.UCell.Config.Schema.set_cell_name(Ubisense.UCell.Cell,System.String)">
      <summary>Set the name of a cell, returning true if this was possible given cell naming constraints and referential integrity constraints.   </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="cell">The cell </param>
      <param name="name">The name of the cell </param>
    </member>
    <member name="M:Ubisense.UCell.Config.Schema.add_parent_child(Ubisense.UCell.Cell,Ubisense.UCell.Cell)">
      <summary>Add a parent to child relationship, returning true if this was possible given cell naming and hierarchy constraints. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="parent">The parent cell </param>
      <param name="child">The child cell </param>
    </member>
    <member name="M:Ubisense.UCell.Config.Schema.remove_parent_child(Ubisense.UCell.Cell,Ubisense.UCell.Cell)">
      <summary>Remove a parent to child relationship, returning true if this was possible given cell naming constraints and referential integrity constraints.   </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="parent">The parent cell </param>
      <param name="child">The child cell </param>
    </member>
    <member name="M:Ubisense.UCell.Config.Schema.remove_cell(Ubisense.UCell.Cell)">
      <summary>Remove a cell from the name table and from the hierarchy.  This always succeeds. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="cell">The cell to remove </param>
    </member>
    <member name="M:Ubisense.UCell.Config.Schema.get_parents(Ubisense.UCell.Cell)">
      <summary>Get the parents of a cell.  This returns either an empty set or a set with one element. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="child">The cell whose parents you want to find. </param>
    </member>
    <member name="M:Ubisense.UCell.Config.Schema.get_children(Ubisense.UCell.Cell)">
      <summary>Get the children of a cell. The result may be empty. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>RemoteOperations</usage>
      <param name="parent">The cell whose children you want to find. </param>
    </member>
    <member name="P:Ubisense.UCell.Config.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.UCell.Config.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisensePlatform.dll</package>
    </member>
    <member name="T:Ubisense.UCell.Config.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.UCell.Config.Names">
      <summary>Each cell has one unique name. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Names.AddInsertHandler(Ubisense.UCell.Config.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UCell.Config.Names.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Names.AddUpdateHandler(Ubisense.UCell.Config.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UCell.Config.Names.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Names.AddDeleteHandler(Ubisense.UCell.Config.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UCell.Config.Names.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Names.name_(Ubisense.UCell.Config.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index name_. Look up cell information by its unique name. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Names.name_(Ubisense.UCell.Config.ReadTransaction,System.String)">
      <summary>Iterate over the elements of the table that match the first argument of the index name_. Look up cell information by its unique name. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Names.cell_(Ubisense.UCell.Config.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index cell_. Look up cell information by cell object. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Names.cell_(Ubisense.UCell.Config.ReadTransaction,Ubisense.UCell.Cell)">
      <summary>Iterate over the elements of the table that match the first argument of the index cell_. Look up cell information by cell object. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UCell.Config.Names.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UCell.Config.Names.RowType.cell_">
      <summary>The cell </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UCell.Config.Names.RowType.name_">
      <summary>The name of the cell </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Names.RowType.op_Equality(Ubisense.UCell.Config.Names.RowType,Ubisense.UCell.Config.Names.RowType)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Names.RowType.op_Inequality(Ubisense.UCell.Config.Names.RowType,Ubisense.UCell.Config.Names.RowType)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Names.RowType.op_LessThan(Ubisense.UCell.Config.Names.RowType,Ubisense.UCell.Config.Names.RowType)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Names.RowType.op_GreaterThan(Ubisense.UCell.Config.Names.RowType,Ubisense.UCell.Config.Names.RowType)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Names.RowType.#ctor(Ubisense.UCell.Cell,System.String)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Names.RowType.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Names.RowType.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Names.RowType.CompareTo(Ubisense.UCell.Config.Names.RowType)">
      <summary>Compare this instance with 'other'</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Names.RowType.Equals(Ubisense.UCell.Config.Names.RowType)">
      <summary>True if this instance equals obj</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UCell.Config.Names.___lop_key_name_">
      <summary>The lex-ordered prefixable key for the index name_</summary>
    </member>
    <member name="T:Ubisense.UCell.Config.Names.___lop_cmp_name_">
      <summary>The ordering for the index name_</summary>
    </member>
    <member name="M:Ubisense.UCell.Config.Names.___lop_cmp_name_.Compare(Ubisense.UCell.Config.Names.___lop_key_name_,Ubisense.UCell.Config.Names.___lop_key_name_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UCell.Config.Names.___lop_key_cell_">
      <summary>The lex-ordered prefixable key for the index cell_</summary>
    </member>
    <member name="T:Ubisense.UCell.Config.Names.___lop_cmp_cell_">
      <summary>The ordering for the index cell_</summary>
    </member>
    <member name="M:Ubisense.UCell.Config.Names.___lop_cmp_cell_.Compare(Ubisense.UCell.Config.Names.___lop_key_cell_,Ubisense.UCell.Config.Names.___lop_key_cell_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UCell.Config.Hierarchy">
      <summary>A relation containing the cell hierarchy.  Each child has only one parent and cycles are not allowed (i.e. the hierarchy is a tree).   Each pair in the relation records a single parent-child relationship. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Hierarchy.AddInsertHandler(Ubisense.UCell.Config.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UCell.Config.Hierarchy.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Hierarchy.AddUpdateHandler(Ubisense.UCell.Config.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UCell.Config.Hierarchy.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Hierarchy.AddDeleteHandler(Ubisense.UCell.Config.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UCell.Config.Hierarchy.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisensePlatform.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Hierarchy.parent_child_(Ubisense.UCell.Config.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index parent_child_. Look up records ordered by parent, child </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Hierarchy.parent_child_(Ubisense.UCell.Config.ReadTransaction,Ubisense.UCell.Cell)">
      <summary>Iterate over the elements of the table that match the first argument of the index parent_child_. Look up records ordered by parent, child </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Hierarchy.parent_child_(Ubisense.UCell.Config.ReadTransaction,Ubisense.UCell.Cell,Ubisense.UCell.Cell)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index parent_child_. Look up records ordered by parent, child </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Hierarchy.parent_(Ubisense.UCell.Config.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index parent_. An index required to enforce referential integrity for parents </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Hierarchy.parent_(Ubisense.UCell.Config.ReadTransaction,Ubisense.UCell.Cell)">
      <summary>Iterate over the elements of the table that match the first argument of the index parent_. An index required to enforce referential integrity for parents </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Hierarchy.child_(Ubisense.UCell.Config.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index child_. Look up the (unique) parent-child relationship for a given child </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Hierarchy.child_(Ubisense.UCell.Config.ReadTransaction,Ubisense.UCell.Cell)">
      <summary>Iterate over the elements of the table that match the first argument of the index child_. Look up the (unique) parent-child relationship for a given child </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UCell.Config.Hierarchy.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UCell.Config.Hierarchy.RowType.parent_">
      <summary>The parent </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UCell.Config.Hierarchy.RowType.child_">
      <summary>The child </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Hierarchy.RowType.op_Equality(Ubisense.UCell.Config.Hierarchy.RowType,Ubisense.UCell.Config.Hierarchy.RowType)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Hierarchy.RowType.op_Inequality(Ubisense.UCell.Config.Hierarchy.RowType,Ubisense.UCell.Config.Hierarchy.RowType)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Hierarchy.RowType.op_LessThan(Ubisense.UCell.Config.Hierarchy.RowType,Ubisense.UCell.Config.Hierarchy.RowType)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Hierarchy.RowType.op_GreaterThan(Ubisense.UCell.Config.Hierarchy.RowType,Ubisense.UCell.Config.Hierarchy.RowType)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Hierarchy.RowType.#ctor(Ubisense.UCell.Cell,Ubisense.UCell.Cell)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Hierarchy.RowType.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Hierarchy.RowType.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Hierarchy.RowType.CompareTo(Ubisense.UCell.Config.Hierarchy.RowType)">
      <summary>Compare this instance with 'other'</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UCell.Config.Hierarchy.RowType.Equals(Ubisense.UCell.Config.Hierarchy.RowType)">
      <summary>True if this instance equals obj</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UCell.Config.Hierarchy.___lop_key_parent_child_">
      <summary>The lex-ordered prefixable key for the index parent_child_</summary>
    </member>
    <member name="T:Ubisense.UCell.Config.Hierarchy.___lop_cmp_parent_child_">
      <summary>The ordering for the index parent_child_</summary>
    </member>
    <member name="M:Ubisense.UCell.Config.Hierarchy.___lop_cmp_parent_child_.Compare(Ubisense.UCell.Config.Hierarchy.___lop_key_parent_child_,Ubisense.UCell.Config.Hierarchy.___lop_key_parent_child_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UCell.Config.Hierarchy.___lop_key_parent_">
      <summary>The lex-ordered prefixable key for the index parent_</summary>
    </member>
    <member name="T:Ubisense.UCell.Config.Hierarchy.___lop_cmp_parent_">
      <summary>The ordering for the index parent_</summary>
    </member>
    <member name="M:Ubisense.UCell.Config.Hierarchy.___lop_cmp_parent_.Compare(Ubisense.UCell.Config.Hierarchy.___lop_key_parent_,Ubisense.UCell.Config.Hierarchy.___lop_key_parent_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UCell.Config.Hierarchy.___lop_key_child_">
      <summary>The lex-ordered prefixable key for the index child_</summary>
    </member>
    <member name="T:Ubisense.UCell.Config.Hierarchy.___lop_cmp_child_">
      <summary>The ordering for the index child_</summary>
    </member>
    <member name="M:Ubisense.UCell.Config.Hierarchy.___lop_cmp_child_.Compare(Ubisense.UCell.Config.Hierarchy.___lop_key_child_,Ubisense.UCell.Config.Hierarchy.___lop_key_child_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UConfig.Params.ParamHasValue.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UConfig.Params.ParamHasValue.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UConfig.Params.ParamHasValue.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UConfig.Params.ParamHasValue.RowType.Marshall(System.IO.BinaryWriter,Ubisense.UConfig.Params.ParamHasValue.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UConfig.Params.ParamHasValue.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.UConfig.Params.ParamHasValue.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UConfig.Params.ParamHasValue.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.UConfig.Params.Schema">
      <summary>The Ubisense.UConfig.Params schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.UConfig.Params.Schema._rxpo">
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UConfig.Params.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="M:Ubisense.UConfig.Params.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.Schema.set_param(Ubisense.UConfig.Params.ParamHasValue.RowType)">
      <summary>Set the value and description of a parameter, replacing any existing value and description </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="param">The new (param_,value_,desc_) triple </param>
    </member>
    <member name="M:Ubisense.UConfig.Params.Schema.remove_param(System.String)">
      <summary>Remove a parameter from the configuration schema </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RemoteOperations</usage>
      <param name="param">The name of the parameter to remove </param>
    </member>
    <member name="P:Ubisense.UConfig.Params.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.UConfig.Params.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationServices.dll</package>
    </member>
    <member name="T:Ubisense.UConfig.Params.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.UConfig.Params.ParamHasValue">
      <summary>Storage for a parameter with a given value and description. </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.ParamHasValue.AddInsertHandler(Ubisense.UConfig.Params.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.UConfig.Params.ParamHasValue.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.ParamHasValue.AddUpdateHandler(Ubisense.UConfig.Params.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.UConfig.Params.ParamHasValue.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.ParamHasValue.AddDeleteHandler(Ubisense.UConfig.Params.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.UConfig.Params.ParamHasValue.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.ParamHasValue.param_(Ubisense.UConfig.Params.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index param_. The parameter name uniquely denotes a value and description </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.ParamHasValue.param_(Ubisense.UConfig.Params.ReadTransaction,System.String)">
      <summary>Iterate over the elements of the table that match the first argument of the index param_. The parameter name uniquely denotes a value and description </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.UConfig.Params.ParamHasValue.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UConfig.Params.ParamHasValue.RowType.param_">
      <summary>The name of the parameter </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UConfig.Params.ParamHasValue.RowType.value_">
      <summary>The value of the parameter </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.UConfig.Params.ParamHasValue.RowType.desc_">
      <summary>A description for the parameter, explaining informally what it means </summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.ParamHasValue.RowType.op_Equality(Ubisense.UConfig.Params.ParamHasValue.RowType,Ubisense.UConfig.Params.ParamHasValue.RowType)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.ParamHasValue.RowType.op_Inequality(Ubisense.UConfig.Params.ParamHasValue.RowType,Ubisense.UConfig.Params.ParamHasValue.RowType)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.ParamHasValue.RowType.op_LessThan(Ubisense.UConfig.Params.ParamHasValue.RowType,Ubisense.UConfig.Params.ParamHasValue.RowType)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.ParamHasValue.RowType.op_GreaterThan(Ubisense.UConfig.Params.ParamHasValue.RowType,Ubisense.UConfig.Params.ParamHasValue.RowType)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.ParamHasValue.RowType.#ctor(System.String,System.String,System.String)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.ParamHasValue.RowType.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisenseLocationServices.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.ParamHasValue.RowType.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.ParamHasValue.RowType.CompareTo(Ubisense.UConfig.Params.ParamHasValue.RowType)">
      <summary>Compare this instance with 'other'</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.UConfig.Params.ParamHasValue.RowType.Equals(Ubisense.UConfig.Params.ParamHasValue.RowType)">
      <summary>True if this instance equals obj</summary>
      <package>UbisenseLocationServices.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.UConfig.Params.ParamHasValue.___lop_key_param_">
      <summary>The lex-ordered prefixable key for the index param_</summary>
    </member>
    <member name="T:Ubisense.UConfig.Params.ParamHasValue.___lop_cmp_param_">
      <summary>The ordering for the index param_</summary>
    </member>
    <member name="M:Ubisense.UConfig.Params.ParamHasValue.___lop_cmp_param_.Compare(Ubisense.UConfig.Params.ParamHasValue.___lop_key_param_,Ubisense.UConfig.Params.ParamHasValue.___lop_key_param_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.UBase.Object">
      <summary>The base type for objects in the model. </summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBase.Object.op_Equality(Ubisense.UBase.Object,Ubisense.UBase.Object)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBase.Object.op_Inequality(Ubisense.UBase.Object,Ubisense.UBase.Object)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBase.Object.op_LessThan(Ubisense.UBase.Object,Ubisense.UBase.Object)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBase.Object.op_GreaterThan(Ubisense.UBase.Object,Ubisense.UBase.Object)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBase.Object.#cctor">
      <summary>Initialise the Object type</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBase.Object.#ctor(Ubisense.UBase.Id,Ubisense.UBase.Symbol,System.UInt32)">
      <summary>Unsafe constructor to create an instance of type Object with a specific state.
            Has no effect unless the cookie argument is set to the correct value.
            This should only be used by Ubisense-generated code.
            </summary>
      <param name="other_id">The id to use</param>
      <param name="other_type">The dynamic type to use</param>
      <param name="cookie">Magic number known only to Ubisense-generated code</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBase.Object.#ctor(System.Boolean)">
      <summary>Create a new Object instance that is either unique or nil</summary>
      <param name="unique">Make this instance unique</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBase.Object.Narrow(Ubisense.UBase.IObject)">
      <summary>Assign another object to this one if and only if the other object's dynamic type inherits from the static type of this instance</summary>
      <param name="other">The object to assign to this object</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBase.Object.Unique">
      <summary>Make this object into a new unique instance with DynamicType equal to Object</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBase.Object.Nil">
      <summary>True iff this object is the nil instance of type Object</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBase.Object.ToString">
      <summary>Returns a String representation of the value of this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBase.Object.ToString(System.String,System.IFormatProvider)">
      <summary>Equivalent to ToString()</summary>
      <param name="format">The format as a string (ignored)</param>
      <param name="provider">The format provider (ignored)</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBase.Object.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBase.Object.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBase.Object.CompareTo(Ubisense.UBase.Object)">
      <summary>Compare this instance with 'other'</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.UBase.Object.Equals(Ubisense.UBase.Object)">
      <summary>True if this instance equals obj</summary>
      <param name="other">The object to compare to this</param>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UBase.Object.StaticType">
      <summary>The statically-declared type of this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UBase.Object.DynamicType">
      <summary>The most-derived dynamic type of this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="P:Ubisense.UBase.Object.Id">
      <summary>The id of this instance</summary>
      <package>UbisensePlatform.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.UBase.Object">
      <summary>The base type for objects in the model. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBase.Object.Marshall(System.IO.BinaryWriter,Ubisense.UBase.UObject)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBase.Object.Marshall(System.IO.BinaryWriter,Ubisense.UBase.UObject@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBase.Object.Unmarshall(System.IO.BinaryReader,Ubisense.UBase.UObject@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.UBase.Object.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
  </members>
</doc>