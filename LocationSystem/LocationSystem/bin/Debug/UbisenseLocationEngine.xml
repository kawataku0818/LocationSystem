<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>UbisenseLocationEngine</name>
  </assembly>
  <members>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.BootServiceConfiguration.Schema">
      <summary>The Ubisense.ULocationEngine.BootServiceConfiguration schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.BootServiceConfiguration.Schema._rxpo">
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationEngine.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.Schema.set_max_sensors(System.UInt16)">
      <summary>Set the value of max_sensors_ in the BootServiceHasProperties relation </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RemoteOperations</usage>
      <param name="max_sensors">The new value for max_sensors in the BootServiceHasProperties relation </param>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.Schema.set_override_bootfiles(System.String)">
      <summary>Set the value of override_bootfiles_ in the BootServiceHasProperties relation </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RemoteOperations</usage>
      <param name="override_bootfiles">The new value for override_bootfiles in the BootServiceHasProperties relation </param>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.Schema.reset">
      <summary>Set boot server configuration parameters back to default values. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RemoteOperations</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.Schema.set_tag_reprogrammer(Ubisense.UBase.MAC,Ubisense.UBase.Blob)">
      <summary>Set the specified sensor to be the tag reprogramming sensors and the specified tag program file as the file to use as the radio file for the sensor. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RemoteOperations</usage>
      <param name="tag_programming_sensor">The sensor used to reprogram the tags </param>
      <param name="tag_program_file">The tag program file used to reporogram the tags </param>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.Schema.reset_tag_reprogrammer">
      <summary>Reset the reprogramming sensor. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RemoteOperations</usage>
    </member>
    <member name="P:Ubisense.ULocationEngine.BootServiceConfiguration.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.ULocationEngine.BootServiceConfiguration.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="T:Ubisense.ULocationEngine.BootServiceConfiguration.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties">
      <summary>Storage of properties for boot services. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.AddInsertHandler(Ubisense.ULocationEngine.BootServiceConfiguration.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.AddUpdateHandler(Ubisense.ULocationEngine.BootServiceConfiguration.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.AddDeleteHandler(Ubisense.ULocationEngine.BootServiceConfiguration.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.max_sensors_(Ubisense.ULocationEngine.BootServiceConfiguration.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index max_sensors_. There is only ever one row in this relation. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.max_sensors_(Ubisense.ULocationEngine.BootServiceConfiguration.ReadTransaction,System.UInt16)">
      <summary>Iterate over the elements of the table that match the first argument of the index max_sensors_. There is only ever one row in this relation. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.RowType.max_sensors_">
      <summary>The maximum number of sensors to be booted at any one time. If a sensor requests bootfiles from a boot server that is already serving this number of sensors, then it will be refused and will try again later. This provides a simple queueing mechanism, preventing the boot server from being overloaded by requests from sensors (e.g. when many sensors restart simultaneously after a power cut).  Its default value is 8. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.RowType.override_bootfiles_">
      <summary>The pathname for a directory that can be used as a 'first resort' in the search for bootfiles, so that it is easy to override bootfile selection when testing. This should not normally be changed.  Its default value is "". </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.RowType.tag_programming_sensor_">
      <summary>The sensor that will be used to reprogram tags. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.RowType.tag_program_file_">
      <summary>The tag program file that will be used to reprogram tags. If this contains any data, when a sensor with the same mac address as the tag programming sensor requests a radio file, this data will be provided as the radio file. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.RowType.#ctor(System.UInt16,System.String,Ubisense.UBase.MAC,Ubisense.UBase.Blob)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.___lop_key_max_sensors_">
      <summary>The lex-ordered prefixable key for the index max_sensors_</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.___lop_cmp_max_sensors_">
      <summary>The ordering for the index max_sensors_</summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.___lop_cmp_max_sensors_.Compare(Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.___lop_key_max_sensors_,Ubisense.ULocationEngine.BootServiceConfiguration.BootServiceHasProperties.___lop_key_max_sensors_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.Schema">
      <summary>The Ubisense.ULocationEngine.TagConfiguration schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagConfiguration.Schema._rxpo">
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationEngine.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="P:Ubisense.ULocationEngine.TagConfiguration.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.ULocationEngine.TagConfiguration.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor">
      <summary>Specification of formal parameters for algorithm classes </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.AddInsertHandler(Ubisense.ULocationEngine.TagConfiguration.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.AddUpdateHandler(Ubisense.ULocationEngine.TagConfiguration.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.AddDeleteHandler(Ubisense.ULocationEngine.TagConfiguration.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.algorithm_(Ubisense.ULocationEngine.TagConfiguration.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index algorithm_. The filter algorithm name is unique. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.algorithm_(Ubisense.ULocationEngine.TagConfiguration.ReadTransaction,System.String)">
      <summary>Iterate over the elements of the table that match the first argument of the index algorithm_. The filter algorithm name is unique. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.RowType.algorithm_">
      <summary>The name of the algorithm. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.RowType.parameters_">
      <summary>The filter parameters for the algorithm. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.RowType.#ctor(System.String,System.Collections.Generic.List{System.String})">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.___lop_key_algorithm_">
      <summary>The lex-ordered prefixable key for the index algorithm_</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.___lop_cmp_algorithm_">
      <summary>The ordering for the index algorithm_</summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.___lop_cmp_algorithm_.Compare(Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.___lop_key_algorithm_,Ubisense.ULocationEngine.TagConfiguration.AlgorithmHasDescriptor.___lop_key_algorithm_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters">
      <summary>Specification of parameters for individual named filters. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.AddInsertHandler(Ubisense.ULocationEngine.TagConfiguration.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.AddUpdateHandler(Ubisense.ULocationEngine.TagConfiguration.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.AddDeleteHandler(Ubisense.ULocationEngine.TagConfiguration.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.name_(Ubisense.ULocationEngine.TagConfiguration.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index name_. The filter name is unique </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.name_(Ubisense.ULocationEngine.TagConfiguration.ReadTransaction,System.String)">
      <summary>Iterate over the elements of the table that match the first argument of the index name_. The filter name is unique </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.algorithm_(Ubisense.ULocationEngine.TagConfiguration.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index algorithm_. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.algorithm_(Ubisense.ULocationEngine.TagConfiguration.ReadTransaction,System.String)">
      <summary>Iterate over the elements of the table that match the first argument of the index algorithm_. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.RowType.name_">
      <summary>The name of the filter. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.RowType.algorithm_">
      <summary>The name of the filtering algorithm to use. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.RowType.parameters_">
      <summary>A mapping from parameter name to value. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.RowType.#ctor(System.String,System.String,System.Collections.Generic.List{System.Single})">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.___lop_key_name_">
      <summary>The lex-ordered prefixable key for the index name_</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.___lop_cmp_name_">
      <summary>The ordering for the index name_</summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.___lop_cmp_name_.Compare(Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.___lop_key_name_,Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.___lop_key_name_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.___lop_key_algorithm_">
      <summary>The lex-ordered prefixable key for the index algorithm_</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.___lop_cmp_algorithm_">
      <summary>The ordering for the index algorithm_</summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.___lop_cmp_algorithm_.Compare(Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.___lop_key_algorithm_,Ubisense.ULocationEngine.TagConfiguration.FilterHasParameters.___lop_key_algorithm_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters">
      <summary>Specification of filter and QoS parameters for tag ranges so that large numbers of tags can be handled without scaling problems.  For every row in this relation, all tags from lower_ to upper_ inclusive, have the given filter and QoS parameters </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.AddInsertHandler(Ubisense.ULocationEngine.TagConfiguration.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.AddUpdateHandler(Ubisense.ULocationEngine.TagConfiguration.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.AddDeleteHandler(Ubisense.ULocationEngine.TagConfiguration.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.lower_(Ubisense.ULocationEngine.TagConfiguration.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index lower_. Find the tag range starting at lower_. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.lower_(Ubisense.ULocationEngine.TagConfiguration.ReadTransaction,Ubisense.ULocationEngine.Tag)">
      <summary>Iterate over the elements of the table that match the first argument of the index lower_. Find the tag range starting at lower_. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.filter_(Ubisense.ULocationEngine.TagConfiguration.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index filter_. Find the tags using the given filter. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.filter_(Ubisense.ULocationEngine.TagConfiguration.ReadTransaction,System.String)">
      <summary>Iterate over the elements of the table that match the first argument of the index filter_. Find the tags using the given filter. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.RowType.lower_">
      <summary>The lower limit of the tag range. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.RowType.upper_">
      <summary>The upper limit of the tag range. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.RowType.filter_">
      <summary>The name of the filter to use. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.RowType.qos_">
      <summary>The QoS parameters. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.RowType.#ctor(Ubisense.ULocationEngine.Tag,Ubisense.ULocationEngine.Tag,System.String,Ubisense.ULocationEngine.QoS)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.___lop_key_lower_">
      <summary>The lex-ordered prefixable key for the index lower_</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.___lop_cmp_lower_">
      <summary>The ordering for the index lower_</summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.___lop_cmp_lower_.Compare(Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.___lop_key_lower_,Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.___lop_key_lower_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.___lop_key_filter_">
      <summary>The lex-ordered prefixable key for the index filter_</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.___lop_cmp_filter_">
      <summary>The ordering for the index filter_</summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.___lop_cmp_filter_.Compare(Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.___lop_key_filter_,Ubisense.ULocationEngine.TagConfiguration.TagRangeHasParameters.___lop_key_filter_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.TagHasParameters">
      <summary>Specification of filter and QoS parameters for individual tags. This overrides the tag range specification. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.AddInsertHandler(Ubisense.ULocationEngine.TagConfiguration.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.AddUpdateHandler(Ubisense.ULocationEngine.TagConfiguration.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.AddDeleteHandler(Ubisense.ULocationEngine.TagConfiguration.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.tag_(Ubisense.ULocationEngine.TagConfiguration.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index tag_. The tag is the primary key. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.tag_(Ubisense.ULocationEngine.TagConfiguration.ReadTransaction,Ubisense.ULocationEngine.Tag)">
      <summary>Iterate over the elements of the table that match the first argument of the index tag_. The tag is the primary key. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.filter_(Ubisense.ULocationEngine.TagConfiguration.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index filter_. Find the tags using the given filter. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.filter_(Ubisense.ULocationEngine.TagConfiguration.ReadTransaction,System.String)">
      <summary>Iterate over the elements of the table that match the first argument of the index filter_. Find the tags using the given filter. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.RowType.tag_">
      <summary>The tag. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.RowType.filter_">
      <summary>The name of the filter. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.RowType.qos_">
      <summary>The QoS parameters. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.RowType.#ctor(Ubisense.ULocationEngine.Tag,System.String,Ubisense.ULocationEngine.QoS)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.___lop_key_tag_">
      <summary>The lex-ordered prefixable key for the index tag_</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.___lop_cmp_tag_">
      <summary>The ordering for the index tag_</summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.___lop_cmp_tag_.Compare(Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.___lop_key_tag_,Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.___lop_key_tag_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.___lop_key_filter_">
      <summary>The lex-ordered prefixable key for the index filter_</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.___lop_cmp_filter_">
      <summary>The ordering for the index filter_</summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.___lop_cmp_filter_.Compare(Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.___lop_key_filter_,Ubisense.ULocationEngine.TagConfiguration.TagHasParameters.___lop_key_filter_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.TagStatus.TagHasStatus.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagStatus.TagHasStatus.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.TagStatus.TagHasStatus.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagStatus.TagHasStatus.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.TagStatus.TagHasStatus.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagStatus.TagHasStatus.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.TagStatus.TagHasStatus.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagStatus.TagHasStatus.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagStatus.Schema">
      <summary>The Ubisense.ULocationEngine.TagStatus schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.Schema._rxpo">
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationEngine.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.Schema.delete_tag_status(System.Collections.Generic.List{Ubisense.ULocationEngine.Tag},System.Collections.Generic.List{System.String}@)">
      <summary>Delete the status information for the given tags. Returns true iff tag status is removed or did not exist. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RemoteOperations</usage>
      <param name="tag">The tags for which to delete information. </param>
      <param name="errors">Any error messages raised (empty if the return value is true) </param>
    </member>
    <member name="P:Ubisense.ULocationEngine.TagStatus.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.ULocationEngine.TagStatus.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagStatus.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagStatus.TagHasStatus">
      <summary>Battery status data for a tag. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.TagHasStatus.AddInsertHandler(Ubisense.ULocationEngine.TagStatus.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.ULocationEngine.TagStatus.TagHasStatus.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.TagHasStatus.AddUpdateHandler(Ubisense.ULocationEngine.TagStatus.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.ULocationEngine.TagStatus.TagHasStatus.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.TagHasStatus.AddDeleteHandler(Ubisense.ULocationEngine.TagStatus.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.ULocationEngine.TagStatus.TagHasStatus.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.TagHasStatus.tag_(Ubisense.ULocationEngine.TagStatus.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index tag_. The tag is the primary key of this relation. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.TagHasStatus.tag_(Ubisense.ULocationEngine.TagStatus.ReadTransaction,Ubisense.ULocationEngine.Tag)">
      <summary>Iterate over the elements of the table that match the first argument of the index tag_. The tag is the primary key of this relation. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagStatus.TagHasStatus.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasStatus.RowType.tag_">
      <summary>The tag. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasStatus.RowType.voltage_">
      <summary>The most recent voltage. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasStatus.RowType.voltage_smoothed_">
      <summary>The voltage using a low pass IIR filter with alpha 0.1. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasStatus.RowType.time_">
      <summary>The time of the last voltage reading from the tag. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.TagHasStatus.RowType.#ctor(Ubisense.ULocationEngine.Tag,System.Single,System.Single,System.DateTime)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagStatus.TagHasStatus.___lop_key_tag_">
      <summary>The lex-ordered prefixable key for the index tag_</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagStatus.TagHasStatus.___lop_cmp_tag_">
      <summary>The ordering for the index tag_</summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.TagHasStatus.___lop_cmp_tag_.Compare(Ubisense.ULocationEngine.TagStatus.TagHasStatus.___lop_key_tag_,Ubisense.ULocationEngine.TagStatus.TagHasStatus.___lop_key_tag_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus">
      <summary>Status data for the tag other than battery status data. Values not yet set by the tag are reported as zero. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.AddInsertHandler(Ubisense.ULocationEngine.TagStatus.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.AddUpdateHandler(Ubisense.ULocationEngine.TagStatus.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.AddDeleteHandler(Ubisense.ULocationEngine.TagStatus.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.tag_(Ubisense.ULocationEngine.TagStatus.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index tag_. The tag is the primary key of this relation. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.tag_(Ubisense.ULocationEngine.TagStatus.ReadTransaction,Ubisense.ULocationEngine.Tag)">
      <summary>Iterate over the elements of the table that match the first argument of the index tag_. The tag is the primary key of this relation. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.tag_">
      <summary>The tag. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.clock_">
      <summary>The current tuning adjustment to the tag's crystal. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.firmware_version_">
      <summary>Version of firmware running on the tag. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.chip_version_">
      <summary>Version of the tag's on-board processor. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.bootloader_version_">
      <summary>Bootloader version. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.beacon_count_log2_">
      <summary>Log to the base two of the number of beacons that have been sent by the tag. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.beacon_count_div_64K_">
      <summary>The number of beacons that have been sent by the tag divided by 2 to the 16 (i.e. 65536 decimal). </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.application_0_">
      <summary>This slot is reserved to be updated by Ubisense. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.application_1_">
      <summary>This slot is reserved to be updated by Ubisense. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.application_2_">
      <summary>This slot is reserved to be updated by Ubisense. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.application_3_">
      <summary>This slot is reserved to be updated by Ubisense. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.application_4_">
      <summary>This slot is reserved to be updated by Ubisense. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.application_5_">
      <summary>This slot is reserved to be updated by Ubisense. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.application_6_">
      <summary>This slot is reserved to be updated by Ubisense. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.application_7_">
      <summary>This slot is reserved to be updated by Ubisense. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.application_8_">
      <summary>This slot is reserved to be updated by Ubisense. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.application_9_">
      <summary>This slot is reserved to be updated by Ubisense. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.application_10_">
      <summary>This slot is reserved to be updated by Ubisense. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.application_11_">
      <summary>This slot is reserved to be updated by Ubisense. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.application_12_">
      <summary>This slot is reserved to be updated by Ubisense. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.application_13_">
      <summary>A slot for an application-defined value to be set by the tag. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.application_14_">
      <summary>A slot for an application-defined value to be set by the tag. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.application_15_">
      <summary>A slot for an application-defined value to be set by the tag. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.application_16_">
      <summary>A slot for an application-defined value to be set by the tag. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.application_17_">
      <summary>A slot for an application-defined value to be set by the tag. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.application_18_">
      <summary>A slot for an application-defined value to be set by the tag. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.RowType.#ctor(Ubisense.ULocationEngine.Tag,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.___lop_key_tag_">
      <summary>The lex-ordered prefixable key for the index tag_</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.___lop_cmp_tag_">
      <summary>The ordering for the index tag_</summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.___lop_cmp_tag_.Compare(Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.___lop_key_tag_,Ubisense.ULocationEngine.TagStatus.TagHasNonBatteryStatus.___lop_key_tag_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.Survey.PointData.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Survey.PointData.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.Survey.PointData.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Survey.PointData.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.Survey.PointData.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Survey.PointData.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.Survey.PointData.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Survey.PointData.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.Survey.Schema">
      <summary>The Ubisense.ULocationEngine.Survey schema class controls all storage and connection for this relational schema</summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Survey.Schema._rxpo">
      <package>ULocationEngine-Survey.dll</package>
    </member>
    <member name="M:Ubisense.ULocationEngine.Survey.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>ULocationEngine-Survey.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Survey.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Survey.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Survey.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Survey.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>ULocationEngine-Survey.dll</package>
    </member>
    <member name="M:Ubisense.ULocationEngine.Survey.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Survey.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Survey.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>ULocationEngine-Survey.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Survey.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Survey.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Survey.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Survey.Schema.add_points(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,Ubisense.UBase.Vector3D}},System.Collections.Generic.List{System.String}@)">
      <summary>Add a sequence of points to a group, returning true if all the points can be added, and returning false if any of the points are already in use.  If the function returns false, the schema is unchanged </summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>RemoteOperations</usage>
      <param name="group">The point group </param>
      <param name="points">The sequence of labelled points to add </param>
      <param name="errors">Any error messages raised (empty if the return value is true) </param>
    </member>
    <member name="M:Ubisense.ULocationEngine.Survey.Schema.delete_point(System.String,System.String,System.Collections.Generic.List{System.String}@)">
      <summary>Delete a point from a group, returning true if the point was deleted, and returning false if it was not. If the function returns false, the schema is unchanged </summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>RemoteOperations</usage>
      <param name="group">The point group </param>
      <param name="label">The label of the point that is to be deleted </param>
      <param name="errors">Any error messages raised (empty if the return value is true) </param>
    </member>
    <member name="M:Ubisense.ULocationEngine.Survey.Schema.delete_point_group(System.String,System.Collections.Generic.List{System.String}@)">
      <summary>Delete an entire group of points, returning true if the group was deleted, and returning false if it was not. If the function returns false, the schema is unchanged </summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>RemoteOperations</usage>
      <param name="group">The point group </param>
      <param name="errors">Any error messages raised (empty if the return value is true) </param>
    </member>
    <member name="P:Ubisense.ULocationEngine.Survey.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.ULocationEngine.Survey.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>ULocationEngine-Survey.dll</package>
    </member>
    <member name="T:Ubisense.ULocationEngine.Survey.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.Survey.PointData">
      <summary>A relation storing the actual value of each labelled point </summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Survey.PointData.AddInsertHandler(Ubisense.ULocationEngine.Survey.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.ULocationEngine.Survey.PointData.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Survey.PointData.AddUpdateHandler(Ubisense.ULocationEngine.Survey.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.ULocationEngine.Survey.PointData.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Survey.PointData.AddDeleteHandler(Ubisense.ULocationEngine.Survey.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.ULocationEngine.Survey.PointData.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Survey.PointData.group_label_(Ubisense.ULocationEngine.Survey.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index group_label_. Each label can only occur once within a given group </summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Survey.PointData.group_label_(Ubisense.ULocationEngine.Survey.ReadTransaction,System.String)">
      <summary>Iterate over the elements of the table that match the first argument of the index group_label_. Each label can only occur once within a given group </summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Survey.PointData.group_label_(Ubisense.ULocationEngine.Survey.ReadTransaction,System.String,System.String)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index group_label_. Each label can only occur once within a given group </summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.Survey.PointData.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Survey.PointData.RowType.group_">
      <summary>The point group </summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Survey.PointData.RowType.label_">
      <summary>The label of the point within the point group </summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Survey.PointData.RowType.value_">
      <summary>The 3D position of the point </summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Survey.PointData.RowType.#ctor(System.String,System.String,Ubisense.UBase.Vector3D)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>ULocationEngine-Survey.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.Survey.PointData.___lop_key_group_label_">
      <summary>The lex-ordered prefixable key for the index group_label_</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.Survey.PointData.___lop_cmp_group_label_">
      <summary>The ordering for the index group_label_</summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Survey.PointData.___lop_cmp_group_label_.Compare(Ubisense.ULocationEngine.Survey.PointData.___lop_key_group_label_,Ubisense.ULocationEngine.Survey.PointData.___lop_key_group_label_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.SystemStatus.Schema">
      <summary>The Ubisense.ULocationEngine.SystemStatus schema class controls all storage and connection for this relational schema</summary>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SystemStatus.Schema._rxpo">
      <package>ULocationEngine-SystemStatus.dll</package>
    </member>
    <member name="M:Ubisense.ULocationEngine.SystemStatus.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.SystemStatus.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.SystemStatus.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.SystemStatus.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.SystemStatus.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>ULocationEngine-SystemStatus.dll</package>
    </member>
    <member name="M:Ubisense.ULocationEngine.SystemStatus.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.SystemStatus.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.SystemStatus.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.SystemStatus.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.SystemStatus.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.SystemStatus.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.SystemStatus.Schema.unknown_sensor_seen(Ubisense.ULocationEngine.Sensor)">
      <summary>Assert that an unknown sensor has been seen. </summary>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>RemoteOperations</usage>
      <param name="sensor"></param>
    </member>
    <member name="P:Ubisense.ULocationEngine.SystemStatus.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.ULocationEngine.SystemStatus.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>ULocationEngine-SystemStatus.dll</package>
    </member>
    <member name="T:Ubisense.ULocationEngine.SystemStatus.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen">
      <summary>Sensors that have been seen by the boot service in the last 24 hours, but nothing is known about them </summary>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.AddInsertHandler(Ubisense.ULocationEngine.SystemStatus.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.AddUpdateHandler(Ubisense.ULocationEngine.SystemStatus.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.AddDeleteHandler(Ubisense.ULocationEngine.SystemStatus.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.sensor_(Ubisense.ULocationEngine.SystemStatus.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index sensor_. The sensor is the primary key of this relation. </summary>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.sensor_(Ubisense.ULocationEngine.SystemStatus.ReadTransaction,Ubisense.ULocationEngine.Sensor)">
      <summary>Iterate over the elements of the table that match the first argument of the index sensor_. The sensor is the primary key of this relation. </summary>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.RowType.sensor_">
      <summary>The sensor. </summary>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.RowType.time_">
      <summary>The most recent time that it was seen. </summary>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.RowType.#ctor(Ubisense.ULocationEngine.Sensor,System.DateTime)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>ULocationEngine-SystemStatus.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.___lop_key_sensor_">
      <summary>The lex-ordered prefixable key for the index sensor_</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.___lop_cmp_sensor_">
      <summary>The ordering for the index sensor_</summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.___lop_cmp_sensor_.Compare(Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.___lop_key_sensor_,Ubisense.ULocationEngine.SystemStatus.UnknownSensorsSeen.___lop_key_sensor_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.SensorTiming">
      <summary>Details of sensor timing for sensors whose timing signal is provided by another sensor using a timing cable. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorTiming.timing_source_">
      <summary>The sensor that is providing a timing signal for this sensor. In the current version of the system, the value must be a timing source and it might provide the timing signal via a number of other (daisy-chained) non-timing-source sensors. If a sensor is itself a timing source, this value will be the same as the sensor (i.e. it is its own timing source). </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorTiming.timing_source_frozen_">
      <summary>True if the timing source should not be calculated and overwritten by the configuration service. In the current version of the system, this is not used. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorTiming.cable_length_">
      <summary>The length of the cable providing a timing signal. In the current version of the system, this is not used. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorTiming.cable_velocity_factor_">
      <summary>The velocity factor of the cable providing a timing signal. In the current version of the system, this is not used. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorTiming.timing_adjustment_">
      <summary>A timing adjustment that is in principle calculable from the cable length and the velocity factor together. In the current version of the system, this is not used. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorTiming.timing_adjustment_frozen_">
      <summary>True if the timing adjustment should not be calculated and overwritten by the configuration service. In the current version of the system, this is not used. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.SensorTiming.#ctor(Ubisense.ULocationEngine.Sensor,System.Boolean,System.Single,System.Single,System.Single,System.Boolean)">
      <summary>Create a new SensorTiming instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.CellGeometry">
      <summary>Parameters of the cell's real-world shape, used for the location calculation. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellGeometry.clipping_polygon_">
      <summary>The clipping polygon for the cell.  Readings outside this polygon will be discarded if they are more than clipping_distance_ metres from the polygon and 'snapped' to the polygon edge if they are less far away from it. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellGeometry.clipping_distance_">
      <summary>The distance outside clipping_polygon_ at which a reading is snapped to the polygon edge. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellGeometry.ceiling_">
      <summary>The upper vertical limit of the cell in metres above the origin. Readings above this height wil be discarded. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellGeometry.floor_">
      <summary>The lower vertical limit of the cell in metres above the origin. Readings below this height wil be discarded. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellGeometry.max_std_error_">
      <summary>The maximum acceptable standard error on the regression used to extract a tag position from readings in the cell. Readings with a higher standard error than this will be discarded. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.CellGeometry.#ctor(Ubisense.ULocationEngine.Polygon2D,System.Single,System.Single,System.Single,System.Single)">
      <summary>Create a new CellGeometry instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.Bootfiles">
      <summary>Details of code files used to program the various processors in a sensor. This is set up by Ubisense and should not normally be changed. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Bootfiles.arm_">
      <summary>The .elf file used to program the ARM processor that controls sensor timing and networked communications. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Bootfiles.radio_">
      <summary>The .HEX file used to program the PIC processor that controls the sensor's radio. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Bootfiles.dsp_">
      <summary>The .ldr file used to program the DSP processor that interfaces to the UWB front-end and performs the location calculation. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Bootfiles.#ctor(System.String,System.String,System.String)">
      <summary>Create a new Bootfiles instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.DSPConfig">
      <summary>Calibration information for a sensor's UWB receivers, used as input to the sensor DSP.  This is calibrated by Ubisense and should not be changed. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.DSPConfig.prf2iqangle_">
      <summary>Coefficients for a polynomial that adjusts for variations in the measured IQ angle as PRF changes. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.DSPConfig.prf2ppm_">
      <summary>Coefficients for a polynomial that adjusts for variations in the measured offsets as PRF changes.  Not currently used. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.DSPConfig.prf2if_">
      <summary>Coefficients for a polynomial that adjusts for variations in the measured IF angle as PRF changes. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.DSPConfig.cpo_">
      <summary>Adjustment for relative circuit delays in the four UWB receivers in the sensor. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.DSPConfig.zero_offset_">
      <summary>Timing adjustment. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.DSPConfig.#ctor(Ubisense.ULocationEngine.PolynomialParams,Ubisense.ULocationEngine.PolynomialParams,Ubisense.ULocationEngine.PolynomialParams,Ubisense.ULocationEngine.ChannelPhaseOffsets,System.Single)">
      <summary>Create a new DSPConfig instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.ControlConfig">
      <summary>Calibration information used to control the UWB receiver front-end. This is calibrated by Ubisense and should not be changed. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.ControlConfig.clock_adjust_">
      <summary>Fine adjustment to the sensor's on-board crystal.  This is calibrated by Ubisense and should not be changed. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.ControlConfig.sweep_rate_">
      <summary>Fine adjustment to sweep rate of UWB receiver.  This is calibrated by Ubisense and should not be changed. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.ControlConfig.iq_offset_">
      <summary>Fine adjustment to IQ offset of UWB receiver.  This is calibrated by Ubisense and should not be changed. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.ControlConfig.local_clock_">
      <summary>True if the sensor is using a local clock </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.ControlConfig.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
      <summary>Create a new ControlConfig instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.UserConfig">
      <summary>Calibration of the sensor in some specific environment. This is set by user calibration using the Ubisense calibration tools. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.UserConfig.activity_threshold_">
      <summary>A threshold set close to the noise floor that is used to gate the input at the front-end of the UWB receiver. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.UserConfig.peak_detect_threshold_">
      <summary>A threshold used to gate UWB signals that have passed through a matched filter stage.  This can be used to filter out signals that have been distorted either because they have been reflected or have passed through some medium. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.UserConfig.cable_offset_">
      <summary>The timing offset introduced by the sensor's timing cable. This should be zero if the sensor is a master. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.UserConfig.#ctor(System.Single,System.Single,System.Single)">
      <summary>Create a new UserConfig instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.CellRadioConfig">
      <summary>Configuration of the conventional RF control channel in some specific environment. This is set by the user. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellRadioConfig.channel_">
      <summary>The RF control channel identifier for the cell. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellRadioConfig.rfpower_">
      <summary>The RF control channel transmit power for the cell. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellRadioConfig.frozen_">
      <summary>The RF control channel is frozen and will not be calculated by the configuration service. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.CellRadioConfig.#ctor(System.UInt32,System.UInt32,System.Boolean)">
      <summary>Create a new CellRadioConfig instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.SensorRadioConfig">
      <summary>Configuration of the conventional RF control channel for a given sensor. This is set by Ubisense. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorRadioConfig.clock_adjust_">
      <summary>The sensor radio clock adjustment </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.SensorRadioConfig.#ctor(System.UInt32)">
      <summary>Create a new SensorRadioConfig instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.SensorPosition">
      <summary>The position of a sensor, in a form that is convenient to the DSP and to human readers. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorPosition.x_">
      <summary>The distance of the sensor from the origin, parallel to the x-axis, measured in metres </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorPosition.y_">
      <summary>The distance of the sensor from the origin, parallel to the y-axis, measured in metres </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorPosition.z_">
      <summary>The distance of the sensor from the origin, parallel to the z-axis, measured in metres </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorPosition.yaw_">
      <summary>The angle in radians between the positive x-axis, and the projection into the x-y plane of the normal emerging from the face of the sensor. The sign of the angle is such that a sensor facing along the positive x-axis has a yaw of 0, and a sensor facing along the positive y-axis has a yaw of pi/2. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorPosition.pitch_">
      <summary>The angle between the normal from the face of the sensor and the projection into the x-y plane of the normal from the face of the sensor.  The sign of the angle is such that a sensor facing along the positive x axis has a pitch of 0 and a sensor facing along the positive z-axis has a pitch of pi/2. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorPosition.roll_">
      <summary>This value is always zero </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.SensorPosition.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Create a new SensorPosition instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.UnusedConfig">
      <summary>A set of unused parameters that can be used for unforeseen purposes. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.UnusedConfig.unused0_">
      <summary>Used for storing internal sensor data describing the phase of the timing signal as sampled by the DSP. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.UnusedConfig.unused1_">
      <summary>Used for extended flag settings, including: recording that the sensor is in 'Provisional' mode, and enabling hailing on sensors.  Provisional mode is used by some production sites where sensors can be hot-swapped if they are physically damaged: when this happens they need to be automatically recalibrated on the fly, and this is handled by the provisional mode flag.  Hailing is a technique for reducing tag search power usage: it can be enabled on any sensor. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.UnusedConfig.unused2_">
      <summary>Not used </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.UnusedConfig.unused3_">
      <summary>Not used </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.UnusedConfig.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Create a new UnusedConfig instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.QoS">
      <summary>Quality-of-service parameters for tag tracking. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.QoS.lower_">
      <summary>The rate specifier for the lower rate.  This the log of the number of slots between updates (e.g. 5 is one update every 32 time slots). </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.QoS.upper_">
      <summary>The rate specifier for the upper rate.  This the log of the number of slots between updates (e.g. 5 is one update every 32 time slots). </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.QoS.speed_threshold_">
      <summary>The threshold at which we switch between the rates. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.QoS.op_Equality(Ubisense.ULocationEngine.QoS,Ubisense.ULocationEngine.QoS)">
      <summary>x == y is true if and only if x.CompareTo(y) == 0</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.QoS.op_Inequality(Ubisense.ULocationEngine.QoS,Ubisense.ULocationEngine.QoS)">
      <summary>x != y is true if and only if x.CompareTo(y) != 0</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.QoS.op_LessThan(Ubisense.ULocationEngine.QoS,Ubisense.ULocationEngine.QoS)">
      <summary>x &lt; y is true if and only if x.CompareTo(y) &lt; 0</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.QoS.op_GreaterThan(Ubisense.ULocationEngine.QoS,Ubisense.ULocationEngine.QoS)">
      <summary>x &gt; y is true if and only if x.CompareTo(y) &gt; 0</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.QoS.#ctor(System.Byte,System.Byte,System.Single)">
      <summary>Create a new QoS instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.QoS.Equals(System.Object)">
      <summary>True if this instance (boxed) equals obj</summary>
      <param name="obj">The object to compare to this</param>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Objects</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.QoS.GetHashCode">
      <summary>A suitable hash code for this instance</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.QoS.CompareTo(Ubisense.ULocationEngine.QoS)">
      <summary>Compare this instance with 'other'</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.QoS.Equals(Ubisense.ULocationEngine.QoS)">
      <summary>True if this instance equals obj</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.CellTiming">
      <summary>The the configuration details for wireless cell-to-cell timing distribution. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellTiming.radio_zone_">
      <summary>The radio zone for this cell </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellTiming.nearest_cells_">
      <summary>The cells and channels that can be heard best by this cell. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellTiming.nearest_cells_frozen_">
      <summary>If set, do not modify the setting for the nearest cells. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellTiming.timing_sources_">
      <summary>The cells and channels that will be used by this cell to receive timing signals. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellTiming.candidate_timing_generator_">
      <summary>This cell is a candidate to be the timing generator for the entire radio zone. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellTiming.actual_timing_generator_">
      <summary>This cell is the timing generator for the entire radio zone. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellTiming.timing_sources_frozen_">
      <summary>If set, do not modify the setting for the timing sources. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.CellTiming.#ctor(Ubisense.ULocationEngine.RadioZone,Ubisense.ULocationEngine.CellTable,System.Boolean,Ubisense.ULocationEngine.CellTable,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Create a new CellTiming instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.CellProperties">
      <summary>The properties of a cell. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellProperties.cell_">
      <summary>The cell's identity. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellProperties.radio_">
      <summary>The radio channel parameters of the cell. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellProperties.geometry_">
      <summary>The geometric parameters of the cell. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellProperties.sink_">
      <summary>The (network) address to send location events, button events, etc. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellProperties.master_sink_">
      <summary>The (network) address to send slave-master events. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellProperties.adjacent_cells_">
      <summary>The master sink addresses for adjacent cells. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellProperties.timing_">
      <summary>The wireless timing distribution properties for the cell. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.CellProperties.#ctor(Ubisense.ULocationEngine.Cell,Ubisense.ULocationEngine.CellRadioConfig,Ubisense.ULocationEngine.CellGeometry,Ubisense.UBase.Address,Ubisense.UBase.Address,Ubisense.ULocationEngine.AddressTable,Ubisense.ULocationEngine.CellTiming)">
      <summary>Create a new CellProperties instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.SensorProperties">
      <summary>The properties of a sensor. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorProperties.sensor_">
      <summary>The sensor. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorProperties.ip_address_">
      <summary>The last IP address assigned to this sensor by DHCP. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorProperties.calibration_sink_">
      <summary>The address to send calibration events. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorProperties.cell_">
      <summary>The parent cell of the sensor. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorProperties.flags_">
      <summary>Flags for the sensor. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorProperties.calibration_flags_">
      <summary>Calibration flags for the sensor. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorProperties.bootfiles_">
      <summary>The boot files used to program a sensor. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorProperties.dsp_">
      <summary>The Ubisense-generated parameters used to configure the sensor DSP. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorProperties.user_">
      <summary>The user-generated parameters used to configure the sensor DSP. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorProperties.control_">
      <summary>The Ubisense-generated parameters used to control the UWB receiver. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorProperties.radio_">
      <summary>The Ubisense-generated parameters used to control the radio transceiver. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorProperties.position_">
      <summary>The position of the sensor </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorProperties.timing_">
      <summary>The timing distribution properties for the sensor. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.SensorProperties.unused_">
      <summary>A set of unused parameters that can be used for unforeseen purposes. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.SensorProperties.#ctor(Ubisense.ULocationEngine.Sensor,Ubisense.UBase.Address,Ubisense.UBase.Address,Ubisense.ULocationEngine.Cell,Ubisense.ULocationEngine.Flags,Ubisense.ULocationEngine.CalibrationFlags,Ubisense.ULocationEngine.Bootfiles,Ubisense.ULocationEngine.DSPConfig,Ubisense.ULocationEngine.UserConfig,Ubisense.ULocationEngine.ControlConfig,Ubisense.ULocationEngine.SensorRadioConfig,Ubisense.ULocationEngine.SensorPosition,Ubisense.ULocationEngine.SensorTiming,Ubisense.ULocationEngine.UnusedConfig)">
      <summary>Create a new SensorProperties instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.CellConfiguration">
      <summary>The configuration of a cell </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellConfiguration.cell_properties_">
      <summary>The cell properties </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.CellConfiguration.sensors_properties_">
      <summary>The properties of the sensors in the cell </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.CellConfiguration.#ctor(Ubisense.ULocationEngine.CellProperties,System.Collections.Generic.List{Ubisense.ULocationEngine.SensorProperties})">
      <summary>Create a new CellConfiguration instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.SensorTiming">
      <summary>Details of sensor timing for sensors whose timing signal is provided by another sensor using a timing cable. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.SensorTiming.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.SensorTiming)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.SensorTiming.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.SensorTiming@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.SensorTiming.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.SensorTiming@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.SensorTiming.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.CellGeometry">
      <summary>Parameters of the cell's real-world shape, used for the location calculation. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.CellGeometry.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.CellGeometry)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.CellGeometry.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.CellGeometry@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.CellGeometry.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.CellGeometry@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.CellGeometry.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.Bootfiles">
      <summary>Details of code files used to program the various processors in a sensor. This is set up by Ubisense and should not normally be changed. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Bootfiles.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.Bootfiles)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Bootfiles.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.Bootfiles@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Bootfiles.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.Bootfiles@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Bootfiles.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.DSPConfig">
      <summary>Calibration information for a sensor's UWB receivers, used as input to the sensor DSP.  This is calibrated by Ubisense and should not be changed. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.DSPConfig.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.DSPConfig)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.DSPConfig.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.DSPConfig@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.DSPConfig.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.DSPConfig@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.DSPConfig.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.ControlConfig">
      <summary>Calibration information used to control the UWB receiver front-end. This is calibrated by Ubisense and should not be changed. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.ControlConfig.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.ControlConfig)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.ControlConfig.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.ControlConfig@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.ControlConfig.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.ControlConfig@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.ControlConfig.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.UserConfig">
      <summary>Calibration of the sensor in some specific environment. This is set by user calibration using the Ubisense calibration tools. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.UserConfig.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.UserConfig)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.UserConfig.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.UserConfig@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.UserConfig.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.UserConfig@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.UserConfig.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.CellRadioConfig">
      <summary>Configuration of the conventional RF control channel in some specific environment. This is set by the user. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.CellRadioConfig.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.CellRadioConfig)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.CellRadioConfig.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.CellRadioConfig@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.CellRadioConfig.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.CellRadioConfig@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.CellRadioConfig.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.SensorRadioConfig">
      <summary>Configuration of the conventional RF control channel for a given sensor. This is set by Ubisense. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.SensorRadioConfig.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.SensorRadioConfig)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.SensorRadioConfig.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.SensorRadioConfig@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.SensorRadioConfig.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.SensorRadioConfig@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.SensorRadioConfig.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.SensorPosition">
      <summary>The position of a sensor, in a form that is convenient to the DSP and to human readers. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.SensorPosition.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.SensorPosition)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.SensorPosition.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.SensorPosition@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.SensorPosition.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.SensorPosition@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.SensorPosition.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.UnusedConfig">
      <summary>A set of unused parameters that can be used for unforeseen purposes. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.UnusedConfig.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.UnusedConfig)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.UnusedConfig.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.UnusedConfig@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.UnusedConfig.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.UnusedConfig@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.UnusedConfig.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.QoS">
      <summary>Quality-of-service parameters for tag tracking. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.QoS.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.QoS)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.QoS.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.QoS@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.QoS.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.QoS@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.QoS.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.CellTiming">
      <summary>The the configuration details for wireless cell-to-cell timing distribution. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.CellTiming.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.CellTiming)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.CellTiming.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.CellTiming@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.CellTiming.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.CellTiming@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.CellTiming.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.CellProperties">
      <summary>The properties of a cell. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.CellProperties.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.CellProperties)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.CellProperties.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.CellProperties@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.CellProperties.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.CellProperties@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.CellProperties.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.SensorProperties">
      <summary>The properties of a sensor. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.SensorProperties.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.SensorProperties)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.SensorProperties.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.SensorProperties@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.SensorProperties.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.SensorProperties@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.SensorProperties.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.CellConfiguration">
      <summary>The configuration of a cell </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.CellConfiguration.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.CellConfiguration)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.CellConfiguration.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.CellConfiguration@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.CellConfiguration.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.CellConfiguration@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.CellConfiguration.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.AddressTable">
      <summary>
            A table used for recording adjacent cell addresses.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.AddressTable.Read(System.IO.BinaryReader)">
      <summary>
            Read using a binary reader.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.AddressTable.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer.
            </summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.Cell">
      <summary>
            A Ubisense sensor cell.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Cell.#ctor">
      <summary>
            Default constructor creates a cell with id zero.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Cell.#ctor(System.UInt32)">
      <summary>
            Construct an object representing the cell with a given id.
            </summary>
      <param name="id">The cell id</param>
    </member>
    <member name="M:Ubisense.ULocationEngine.Cell.ToString(System.String,System.IFormatProvider)">
      <summary>
            Convert a cell object to a string of the form ULocationEngine.Cell Id
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Cell.Read(System.IO.BinaryReader)">
      <summary>
            Read using a binary reader.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Cell.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Cell.CompareTo(Ubisense.ULocationEngine.Cell)">
      <summary>
            this.CompareTo(other) == this.Id.CompareTo(other.Id)
            </summary>
    </member>
    <member name="P:Ubisense.ULocationEngine.Cell.Id">
      <summary>
            The id of the cell.
            </summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.CalibrationFlags">
      <summary>
            CalibrationFlags set for a Ubisense sensor.
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.CalibrationFlags.Flag1">
            First
        </member>
    <member name="F:Ubisense.ULocationEngine.CalibrationFlags.Flag32768">
            Last
        </member>
    <member name="T:Ubisense.ULocationEngine.ChannelPhaseOffsets">
      <summary>
             The offsets between the four channels of the receiver
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.ChannelPhaseOffsets.channel0">
      <summary>
            Internal calibration data
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.ChannelPhaseOffsets.channel1">
      <summary>
            Internal calibration data
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.ChannelPhaseOffsets.channel2">
      <summary>
            Internal calibration data
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.ChannelPhaseOffsets.channel3">
      <summary>
            Internal calibration data
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.ChannelPhaseOffsets.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.ChannelPhaseOffsets.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Construct some internal calibration data.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.ChannelPhaseOffsets.ToString(System.String,System.IFormatProvider)">
      <summary>
            Convert a cell object to a string of the form ULocationEngine.PolynomialParams 1 2 3 4
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.ChannelPhaseOffsets.Read(System.IO.BinaryReader)">
      <summary>
            Read using a binary reader.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.ChannelPhaseOffsets.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer.
            </summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.CellTable">
      <summary>
            A table used for recording cells and channels to listen to for timing synchronization.
            The length of this table should normally be 3.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.CellTable.Pair(System.UInt32)">
      <summary>
            The nth pair in the cell table
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.CellTable.#ctor">
      <summary>
            Create a new cell table
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.CellTable.Read(System.IO.BinaryReader)">
      <summary>
            Read using a binary reader.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.CellTable.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer.
            </summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.RadioZone">
      <summary>
            A Ubisense radio zone: this is used to group together cells
            into separate isolated sets.  In this context 'isolated' means
            that, for all radio zones a and b, if radio zone a is not equal
            to radio zone b, then none of the cells in radio zone a can hear 
            any of the cells in radio zone b
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.RadioZone.#ctor">
      <summary>
            Default constructor creates a radio zone with id zero.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.RadioZone.#ctor(System.UInt32)">
      <summary>
            Construct an object representing the radio zone with a given id.
            </summary>
      <param name="id">The radio zone id</param>
    </member>
    <member name="M:Ubisense.ULocationEngine.RadioZone.ToString(System.String,System.IFormatProvider)">
      <summary>
            Convert a radio zone object to a string of the form ULocationEngine.RadioZone Id
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.RadioZone.Read(System.IO.BinaryReader)">
      <summary>
            Read using a binary reader.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.RadioZone.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.RadioZone.CompareTo(Ubisense.ULocationEngine.RadioZone)">
      <summary>
            this.CompareTo(other) == this.Id.CompareTo(other.Id)
            </summary>
    </member>
    <member name="P:Ubisense.ULocationEngine.RadioZone.Id">
      <summary>
            The id of the radio zone.
            </summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.Polygon2D">
      <summary>
            A 2D polygon made from floats suitable for use by the (32-bit) DSP
            processor used in the Ubisense sensor.  The DSP uses a clipping 
            polygon with a maximum length of Size points.  The polygon is always
            stored as a constant-length sequence of points but if it has less than
            Size values then the sequence is terminated with the point that has
            IsEnd equal to true.  Normal users who do not want to set the points
            can use the PointList property to return the polygon as a list of points.
            </summary>
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="M:Ubisense.ULocationEngine.Polygon2D.Clear">
      <summary>
            Set the array to empty.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Polygon2D.Read(System.IO.BinaryReader)">
      <summary>
            Read using a binary reader.
            </summary>
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="M:Ubisense.ULocationEngine.Polygon2D.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer.
            </summary>
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="P:Ubisense.ULocationEngine.Polygon2D.Size">
      <summary>
            The maximum size of a 2D polygon
            </summary>
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="P:Ubisense.ULocationEngine.Polygon2D.Points">
      <summary>
            The array of points in the polygon
            </summary>
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="P:Ubisense.ULocationEngine.Polygon2D.PointList">
      <summary>
            The polygon as a regular list of points
            </summary>
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="T:Ubisense.ULocationEngine.Polygon2D.Point">
      <summary>
            A 2D point made from floats suitable for use by the (32-bit) DSP
            processor used in the Ubisense sensor. 
            </summary>
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="M:Ubisense.ULocationEngine.Polygon2D.Point.#ctor(System.Single,System.Single)">
      <summary>
            Create a point with given X and Y values
            </summary>
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="P:Ubisense.ULocationEngine.Polygon2D.Point.X">
      <summary>
            The X ordinate of the point
            </summary>
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="P:Ubisense.ULocationEngine.Polygon2D.Point.Y">
      <summary>
            The Y ordinate of the point
            </summary>
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="P:Ubisense.ULocationEngine.Polygon2D.Point.IsEnd">
      <summary>
            True if this point marks the end of the polygon.
            </summary>
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="T:Ubisense.ULocationEngine.PolynomialParams">
      <summary>
            Parameters to a configuration polynomial implemented in the DSP
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.PolynomialParams.xscale">
      <summary>
            Internal calibration data
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.PolynomialParams.xmid">
      <summary>
            Internal calibration data
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.PolynomialParams.yscale">
      <summary>
            Internal calibration data
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.PolynomialParams.ymid">
      <summary>
            Internal calibration data
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.PolynomialParams.a3">
      <summary>
            Internal calibration data
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.PolynomialParams.a2">
      <summary>
            Internal calibration data
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.PolynomialParams.a1">
      <summary>
            Internal calibration data
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.PolynomialParams.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.PolynomialParams.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Construct a polynomial's parameters.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.PolynomialParams.ToString(System.String,System.IFormatProvider)">
      <summary>
            Convert a cell object to a string with the form ULocationEngine.PolynomialParams xscale xmid yscale ymid a3 a2 a1
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.PolynomialParams.Read(System.IO.BinaryReader)">
      <summary>
            Read using a binary reader.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.PolynomialParams.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer.
            </summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.Flags">
      <summary>
            Flags set for a Ubisense sensor.
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.Flags.Reboot">
      <summary>
            Reboot the sensor
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.Flags.SightingTrace">
      <summary>
            Trace the sighting processor (only applies to master sensor)
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.Flags.DataTrace">
      <summary>
            Trace the data processor (only applies to master sensor)
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.Flags.ButtonTrace">
      <summary>
            Trace the buttons processor (only applies to master sensor)
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.Flags.HandoverTrace">
      <summary>
            Trace the handover processor (only applies to master sensor)
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.Flags.TimingTrace">
      <summary>
            Trace the cable timing adjustment processor 
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.Flags.SchedulerTrace">
      <summary>
            Trace the scheduler processor (only applies to master sensor)
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.Flags.QOSTrace">
      <summary>
            Trace the location quality-of-service processor (only applies to master sensor)
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.Flags.DisableSleep">
      <summary>
            Disable all sleep in this cell (only applies to master sensor)
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.Flags.TuningTrace">
      <summary>
            Trace the tag tuning processor (only applies to master sensor)
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.Flags.AdvertTrace">
      <summary>
            Trace the service discovery processor 
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.Flags.DisableRadio">
      <summary>
            Disable the radio control channel by setting transmitted power to zero (only applies to master sensor)
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.Flags.DisableUWB">
      <summary>
            Disable the uwb channel by setting activity threshold very high in the DSP
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.Flags.DisableHandover">
      <summary>
            Disable handover (only applies to master sensor)
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.Flags.TimingSource">
      <summary>
            The sensor is a timing source for itself and all sensors connected to it via timing cables
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.Flags.Master">
      <summary>
            The sensor is a master sensor
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.Flags.ForwardUplinks">
      <summary>
            The sensor should forward uplinks to be used by presence.
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.Flags.ForwardChirps">
      <summary>
            The sensor should forward chirps to be used by presence.
            </summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.Tag">
      <summary>
            A Ubisense tag.
            <seealso cref="!:Ubisense.ULocationIntegration.Tag" /></summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Tag.#ctor">
      <summary>
            Construct a nil tag with zero id.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Tag.#ctor(System.UInt32)">
      <summary>
            Construct an object representing the tag with a given id.
            </summary>
      <param name="id">The tag id</param>
    </member>
    <member name="M:Ubisense.ULocationEngine.Tag.ToString(System.String,System.IFormatProvider)">
      <summary>
            Convert a tag object to a string.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Tag.Read(System.IO.BinaryReader)">
      <summary>
            Read using a binary reader.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Tag.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Tag.CompareTo(Ubisense.ULocationEngine.Tag)">
      <summary>
            Compare the tags using the tag ids
            </summary>
    </member>
    <member name="P:Ubisense.ULocationEngine.Tag.Id">
      <summary>
            The id of the tag.
            </summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.Sensor">
      <summary>
            A Ubisense sensor.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Sensor.#ctor">
      <summary>
            Constuct a nil sensor, with zero MAC address.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Sensor.#ctor(Ubisense.UBase.MAC)">
      <summary>
            Construct an object representing the sensor with a given MAC address.
            </summary>
      <param name="mac">The sensor MAC address or serial number</param>
    </member>
    <member name="M:Ubisense.ULocationEngine.Sensor.ToString(System.String,System.IFormatProvider)">
      <summary>
            Convert a sensor object to a string.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Sensor.Read(System.IO.BinaryReader)">
      <summary>
            Read using a binary reader.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Sensor.Write(System.IO.BinaryWriter)">
      <summary>
            Write using a binary writer.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Sensor.CompareTo(Ubisense.ULocationEngine.Sensor)">
      <summary>
            Compare the sensors using the MAC addresses
            </summary>
    </member>
    <member name="P:Ubisense.ULocationEngine.Sensor.MAC">
      <summary>
            The MAC address of the sensor, which is also the sensor's serial number.
            </summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagBatteryWarning">
      <summary>
            Estimate the state of tag batteries given their voltage readings.
            </summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.TagBatteryWarning.ComputeState(System.Double,System.Double)">
      <summary>
            Estimate the current battery warning state for a tag, given the two voltage reading fields
            from the ULocationEngine.TagStatus.TagHasStatus table.
            </summary>
      <remarks>
            The tag will only send battery voltage updates while it is still live, so if a tag battery 
            fails completely then the TagHasStatus table will no longer be updated for the tag.  If a 
            tag has not generated a battery reading in an hour then it is either not in contact with any
            sensors (removed from the site) or its battery may have already failed.  Given extremes of 
            temperature changes or other unusual environmental factors this function may generate 
            spurious warnings, or may not generate a warning at all.
            </remarks>
      <param name="voltage">The voltage_ field</param>
      <param name="voltage_smoothed">The voltage_smoothed field</param>
      <returns>A BatteryState for the tag based on the two voltages.</returns>
    </member>
    <member name="P:Ubisense.ULocationEngine.TagBatteryWarning.WarnThreshold">
      <summary>
            This threshold defaults to 0.01, indicating that a 1% variation in battery
            voltage over a period of a day is a potential issue.  The threshold should 
            normally not be modified.
            </summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.TagBatteryWarning.BatteryState">
      <summary>
            The battery states for a tag, indicating soon the battery will expire.
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagBatteryWarning.BatteryState.Good">
      <summary>
            The battery state is fine.
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagBatteryWarning.BatteryState.AdvancedWarning">
      <summary>
            The battery voltage is starting to drop, but the tag is still functional.
            </summary>
    </member>
    <member name="F:Ubisense.ULocationEngine.TagBatteryWarning.BatteryState.Failing">
      <summary>
            The battery voltage is dropping sharply, and the tag will fail imminently. 
            </summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.Properties">
      <summary>Properties of a calibration instance. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.Properties.instance_">
      <summary>The calibration instance.  This will be set by the begin_calibration function. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.Properties.type_">
      <summary>The type of calibration to perform.  This determines which of the other properties are relevant. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.Properties.sensor_">
      <summary>The sensor to calibrate.  Used for Orientation, Cable, EquidistantCable and Dual calibrations. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.Properties.cell_">
      <summary>The cell to calibrate.  Used for Full calibration. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.Properties.reference_">
      <summary>The reference to calibrate against.  Used for Dual, EquidistantCable and Cable calibration. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.Properties.tag_">
      <summary>The tag that will be used to calibrate.  Used for all calibrations. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.Properties.position_">
      <summary>The position of the tag.  Used for Orientation, Cable and Dual calibrations. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.Properties.use_cable_offsets_">
      <summary>Use the cable offsets rather than solve for them.  Used for Full calibration. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.Properties.#ctor(System.UInt32,Ubisense.ULocationEngine.Calibration.CalibrationType,Ubisense.ULocationEngine.Sensor,Ubisense.ULocationEngine.Cell,Ubisense.ULocationEngine.Sensor,Ubisense.ULocationEngine.Tag,Ubisense.UBase.Vector3D,System.Boolean)">
      <summary>Create a new Properties instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.Progress">
      <summary>The progress status of a calibration. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.Progress.instance_">
      <summary>The calibration instance. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.Progress.status_">
      <summary>The status of the calibration. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.Progress.percent_complete_">
      <summary>If the status is Capturing or Calculating, this field holds the percentage completion. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.Progress.message_">
      <summary>Message associated with completion or failure. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.Progress.other_">
      <summary>Other data associated with the progress, specific to the type of calibration.  For example, a successfull full calibration will write the solved sequence of points in this blob. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.Progress.#ctor(System.UInt32,Ubisense.ULocationEngine.Calibration.Status,System.UInt32,System.String,Ubisense.UBase.Blob)">
      <summary>Create a new Progress instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.Result">
      <summary>The parameters obtained from a successful calibration. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.Result.instance_">
      <summary>The calibration instance. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.Result.sensor_">
      <summary>The sensor to which this parameter applies. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.Result.name_">
      <summary>The name of the parameter. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.Result.value_">
      <summary>The value of the parameter. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.Result.#ctor(System.UInt32,Ubisense.ULocationEngine.Sensor,System.String,System.Single)">
      <summary>Create a new Result instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.CalibrationType">
      <summary>What type of calibration is being performed. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Enumerations</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.Status">
      <summary>What stage of operation a calibration instance is at; how well the calibration is doing. <table><tr><td>Capturing</td><td>The data for calibration are being read from the sensor.</td></tr><tr><td>Calculating</td><td>The data have been collected and are being transformed into calibration parameters.</td></tr><tr><td>Failed</td><td>Calibration was unsuccessful.</td></tr><tr><td>Succeeded</td><td>Parameters have been successfully created from the calibration data, but are not yet in use.</td></tr></table></summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Enumerations</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.SensorStatus">
      <summary>The status of a sensor. <table><tr><td>NotRunning</td><td>The sensor is up but not running normally.  It might be downloading boot code, or there might be some other problem.</td></tr><tr><td>Running</td><td>The sensor is running normally.</td></tr><tr><td>Unknown</td><td>The sensor status is unknown/ because it is not in contact.</td></tr><tr><td>NoTimingSignal</td><td>The sensor has not detected a timing signal.</td></tr><tr><td>ResetTiming</td><td>The sensor is reseting its timing synchronization.</td></tr><tr><td>AdjustTiming</td><td>The sensor is adjusting its timing synchronization.</td></tr><tr><td>StaleLocationCellManager = 8</td><td>The sensor is not currently in contact with a location cell.</td></tr><tr><td>StaleSensorConfiguration = 16</td><td>The sensor is not currently getting up to date sensor configuration.</td></tr><tr><td>StaleTagConfiguration = 32</td><td>The sensor is not currently getting up to date tag configuration.</td></tr></table></summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Enumerations</usage>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.Properties">
      <summary>Properties of a calibration instance. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.Properties.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.Calibration.Properties)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.Properties.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.Calibration.Properties@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.Properties.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.Calibration.Properties@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.Properties.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.Progress">
      <summary>The progress status of a calibration. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.Progress.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.Calibration.Progress)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.Progress.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.Calibration.Progress@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.Progress.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.Calibration.Progress@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.Progress.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.Result">
      <summary>The parameters obtained from a successful calibration. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.Result.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.Calibration.Result)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.Result.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.Calibration.Result@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.Result.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.Calibration.Result@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.Result.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.CalibrationType">
      <summary>What type of calibration is being performed. </summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.CalibrationType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.Calibration.CalibrationType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.CalibrationType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.Calibration.CalibrationType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.CalibrationType.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.Calibration.CalibrationType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.CalibrationType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.Status">
      <summary>What stage of operation a calibration instance is at; how well the calibration is doing. <table><tr><td>Capturing</td><td>The data for calibration are being read from the sensor.</td></tr><tr><td>Calculating</td><td>The data have been collected and are being transformed into calibration parameters.</td></tr><tr><td>Failed</td><td>Calibration was unsuccessful.</td></tr><tr><td>Succeeded</td><td>Parameters have been successfully created from the calibration data, but are not yet in use.</td></tr></table></summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.Status.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.Calibration.Status)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.Status.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.Calibration.Status@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.Status.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.Calibration.Status@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.Status.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.SensorStatus">
      <summary>The status of a sensor. <table><tr><td>NotRunning</td><td>The sensor is up but not running normally.  It might be downloading boot code, or there might be some other problem.</td></tr><tr><td>Running</td><td>The sensor is running normally.</td></tr><tr><td>Unknown</td><td>The sensor status is unknown/ because it is not in contact.</td></tr><tr><td>NoTimingSignal</td><td>The sensor has not detected a timing signal.</td></tr><tr><td>ResetTiming</td><td>The sensor is reseting its timing synchronization.</td></tr><tr><td>AdjustTiming</td><td>The sensor is adjusting its timing synchronization.</td></tr><tr><td>StaleLocationCellManager = 8</td><td>The sensor is not currently in contact with a location cell.</td></tr><tr><td>StaleSensorConfiguration = 16</td><td>The sensor is not currently getting up to date sensor configuration.</td></tr><tr><td>StaleTagConfiguration = 32</td><td>The sensor is not currently getting up to date tag configuration.</td></tr></table></summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.SensorStatus.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.Calibration.SensorStatus)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.SensorStatus.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.Calibration.SensorStatus@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.SensorStatus.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.Calibration.SensorStatus@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.SensorStatus.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.SensorHasStatus.RowType">
      <summary>The contents of a row of the table</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.SensorHasStatus.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.Calibration.SensorHasStatus.RowType)">
      <summary>Marshall the object by value</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.SensorHasStatus.RowType.Marshall(System.IO.BinaryWriter,Ubisense.ULocationEngine.Calibration.SensorHasStatus.RowType@)">
      <summary>Marshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.SensorHasStatus.RowType.Unmarshall(System.IO.BinaryReader,Ubisense.ULocationEngine.Calibration.SensorHasStatus.RowType@)">
      <summary>Unmarshall the object by reference</summary>
    </member>
    <member name="M:UbisenseMarshalling.Ubisense.ULocationEngine.Calibration.SensorHasStatus.RowType.Unmarshall(System.IO.BinaryReader)">
      <summary>Unmarshall the object by return</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.Schema">
      <summary>The Ubisense.ULocationEngine.Calibration schema class controls all storage and connection for this relational schema</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaClass</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.Schema._rxpo">
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.Schema.#ctor(System.Boolean)">
      <summary>Create the schema</summary>
      <param name="dataless">Create as a dataless schema (a client schema that just receives events but holds no data)</param>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaConstructor</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.Schema.Dispose">
      <summary>Dispose of the schema. Do not override this method in derived classes.  Override DisposeManaged instead</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.Schema.DisposeManaged">
      <summary>If you override this method, you must call base.DisposeManaged after your own cleanup code</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaDispose</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.Schema.Disconnect">
      <summary>Disconnect client or server, so no more events are received or sent and event-service-related resources are reclaimed</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.Schema.GetHook">
      <summary>Get the schema conversion hook, so that the schema can be converted</summary>
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.Schema.ReadTransaction">
      <summary>Create a new read transaction.  Throw a ClientException if the schema is dataless or has not been connected unless ReadTransactionPreconditionOverride is true</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.Schema.ConnectAsClient">
      <summary>Connect as a client when this schema is served by a global service</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.Schema.ConnectAsClient(System.String)">
      <summary>Connect as a client when this schema is served by a cellular service</summary>
      <param name="cell_name">The name of the cell for which the target service is run</param>
      <package>UbisenseLocationEngine.dll</package>
      <usage>ClientConnectAndDisconnect</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.Schema.AddCommitHandler(Ubisense.UBase.CommitEventHandler)">
      <summary>Attach an event that is raised when a commit occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.Schema.AddEstablishHandler(Ubisense.UBase.EstablishEventHandler)">
      <summary>Attach an event that is raised when state is established</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.Schema.AddInvalidHandler(Ubisense.UBase.InvalidEventHandler)">
      <summary>Attach an event that is raised immediately before state is established</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>SchemaEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.Schema.begin_calibration(Ubisense.ULocationEngine.Calibration.Properties,System.Collections.Generic.List{System.String}@)">
      <summary>Start a calibration of a sensor or cell.  Returns the calibration instance used to report progress and results, or zero on error. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RemoteOperations</usage>
      <param name="properties">The properties of this calibration instance. </param>
      <param name="errors">Any error messages raised (empty if the return value is true) </param>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.Schema.commit_calibration(System.UInt32,System.Collections.Generic.List{System.String}@)">
      <summary>Commit the calibration.  Applies all calculated parameters from the given instance's entry in the CalibrationHasResult table to the appropriate cells' parameters in the SensorConfiguration schema. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RemoteOperations</usage>
      <param name="instance">The calibration instance to be committed. </param>
      <param name="errors">Any error messages raised (empty if the return value is true) </param>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.Schema.commit_results(System.Collections.Generic.List{Ubisense.ULocationEngine.Calibration.Result},System.Collections.Generic.List{System.String}@)">
      <summary>Commit specific calibration results.  Applies the specified results to the appropriate cells' parameters in the SensorConfiguration schema.  Allows the user to selectively apply only some of the generated results in the CalibrationHasResult table. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RemoteOperations</usage>
      <param name="results">A sequence of results to apply. </param>
      <param name="errors">Any error messages raised (empty if the return value is true) </param>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.Schema.remove_calibration(System.UInt32,System.Collections.Generic.List{System.String}@)">
      <summary>Remove the calibration.  Cancels the calibration if it is in progress, and removes all references to it. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RemoteOperations</usage>
      <param name="instance">The calibration instance to be removed. </param>
      <param name="errors">Any error messages raised (empty if the return value is true) </param>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.Schema.finish_capture(System.UInt32,System.Collections.Generic.List{System.String}@)">
      <summary>Used to indicate that the user has finished capturing data for a calibration, and that the engine should proceed to calculation.  This is only needed for full calibration. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RemoteOperations</usage>
      <param name="instance">The calibration instance for which capture is finished. </param>
      <param name="errors">Any error messages raised (empty if the return value is true) </param>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.Schema.set_status(Ubisense.ULocationEngine.Sensor,Ubisense.ULocationEngine.Calibration.SensorStatus,System.DateTime)">
      <summary></summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RemoteOperations</usage>
      <param name="sensor">Elements of SensorHasStatus row </param>
      <param name="status"></param>
      <param name="time"></param>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.Schema.delete_status(Ubisense.ULocationEngine.Sensor)">
      <summary></summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RemoteOperations</usage>
      <param name="sensor">Elements of SensorHasStatus row </param>
    </member>
    <member name="P:Ubisense.ULocationEngine.Calibration.Schema.ReadTransactionPreconditionOverride">
      <summary>If this property is true, ReadTransaction() will not throw ClientExceptions.</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="P:Ubisense.ULocationEngine.Calibration.Schema.AuthenticatedUser">
      <summary>Return the current authenticated user, or null if no authentication is required or has been successful</summary>
      <package>UbisenseLocationEngine.dll</package>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.ReadTransaction">
      <summary>A read transaction for the schema, required to access relation data</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Transactions</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.CalibrationHasProperties">
      <summary>The properties of each calibration in progress. The row type is Properties. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasProperties.AddInsertHandler(Ubisense.ULocationEngine.Calibration.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.ULocationEngine.Calibration.Properties})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasProperties.AddUpdateHandler(Ubisense.ULocationEngine.Calibration.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.ULocationEngine.Calibration.Properties})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasProperties.AddDeleteHandler(Ubisense.ULocationEngine.Calibration.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.ULocationEngine.Calibration.Properties})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasProperties.instance_(Ubisense.ULocationEngine.Calibration.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index instance_. The calibration instance identifier is the primary key. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasProperties.instance_(Ubisense.ULocationEngine.Calibration.ReadTransaction,System.UInt32)">
      <summary>Iterate over the elements of the table that match the first argument of the index instance_. The calibration instance identifier is the primary key. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasProperties.tag_(Ubisense.ULocationEngine.Calibration.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index tag_. Look up calibrations using a tag. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasProperties.tag_(Ubisense.ULocationEngine.Calibration.ReadTransaction,Ubisense.ULocationEngine.Tag)">
      <summary>Iterate over the elements of the table that match the first argument of the index tag_. Look up calibrations using a tag. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.CalibrationHasProperties.___lop_key_instance_">
      <summary>The lex-ordered prefixable key for the index instance_</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.CalibrationHasProperties.___lop_cmp_instance_">
      <summary>The ordering for the index instance_</summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasProperties.___lop_cmp_instance_.Compare(Ubisense.ULocationEngine.Calibration.CalibrationHasProperties.___lop_key_instance_,Ubisense.ULocationEngine.Calibration.CalibrationHasProperties.___lop_key_instance_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.CalibrationHasProperties.___lop_key_tag_">
      <summary>The lex-ordered prefixable key for the index tag_</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.CalibrationHasProperties.___lop_cmp_tag_">
      <summary>The ordering for the index tag_</summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasProperties.___lop_cmp_tag_.Compare(Ubisense.ULocationEngine.Calibration.CalibrationHasProperties.___lop_key_tag_,Ubisense.ULocationEngine.Calibration.CalibrationHasProperties.___lop_key_tag_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.CalibrationHasProgress">
      <summary>The status of each calibration in progress. The row type is Progress. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasProgress.AddInsertHandler(Ubisense.ULocationEngine.Calibration.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.ULocationEngine.Calibration.Progress})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasProgress.AddUpdateHandler(Ubisense.ULocationEngine.Calibration.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.ULocationEngine.Calibration.Progress})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasProgress.AddDeleteHandler(Ubisense.ULocationEngine.Calibration.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.ULocationEngine.Calibration.Progress})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasProgress.instance_(Ubisense.ULocationEngine.Calibration.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index instance_. The calibration instance identifier is the primary key. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasProgress.instance_(Ubisense.ULocationEngine.Calibration.ReadTransaction,System.UInt32)">
      <summary>Iterate over the elements of the table that match the first argument of the index instance_. The calibration instance identifier is the primary key. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.CalibrationHasProgress.___lop_key_instance_">
      <summary>The lex-ordered prefixable key for the index instance_</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.CalibrationHasProgress.___lop_cmp_instance_">
      <summary>The ordering for the index instance_</summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasProgress.___lop_cmp_instance_.Compare(Ubisense.ULocationEngine.Calibration.CalibrationHasProgress.___lop_key_instance_,Ubisense.ULocationEngine.Calibration.CalibrationHasProgress.___lop_key_instance_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.CalibrationHasResult">
      <summary>Results for completed calibrations. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasResult.AddInsertHandler(Ubisense.ULocationEngine.Calibration.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.ULocationEngine.Calibration.Result})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasResult.AddUpdateHandler(Ubisense.ULocationEngine.Calibration.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.ULocationEngine.Calibration.Result})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasResult.AddDeleteHandler(Ubisense.ULocationEngine.Calibration.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.ULocationEngine.Calibration.Result})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasResult.instance_(Ubisense.ULocationEngine.Calibration.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index instance_. This index is not unique because each calibration instance has several results. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasResult.instance_(Ubisense.ULocationEngine.Calibration.ReadTransaction,System.UInt32)">
      <summary>Iterate over the elements of the table that match the first argument of the index instance_. This index is not unique because each calibration instance has several results. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasResult.sensor_name_instance_(Ubisense.ULocationEngine.Calibration.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index sensor_name_instance_. This index is a key: a calibration gives each sensor it applies to at most one value for each parameter. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasResult.sensor_name_instance_(Ubisense.ULocationEngine.Calibration.ReadTransaction,Ubisense.ULocationEngine.Sensor)">
      <summary>Iterate over the elements of the table that match the first argument of the index sensor_name_instance_. This index is a key: a calibration gives each sensor it applies to at most one value for each parameter. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasResult.sensor_name_instance_(Ubisense.ULocationEngine.Calibration.ReadTransaction,Ubisense.ULocationEngine.Sensor,System.String)">
      <summary>Iterate over the elements of the table defined by the first 2 arguments of the index sensor_name_instance_. This index is a key: a calibration gives each sensor it applies to at most one value for each parameter. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasResult.sensor_name_instance_(Ubisense.ULocationEngine.Calibration.ReadTransaction,Ubisense.ULocationEngine.Sensor,System.String,System.UInt32)">
      <summary>Iterate over the elements of the table defined by the first 3 arguments of the index sensor_name_instance_. This index is a key: a calibration gives each sensor it applies to at most one value for each parameter. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.CalibrationHasResult.___lop_key_instance_">
      <summary>The lex-ordered prefixable key for the index instance_</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.CalibrationHasResult.___lop_cmp_instance_">
      <summary>The ordering for the index instance_</summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasResult.___lop_cmp_instance_.Compare(Ubisense.ULocationEngine.Calibration.CalibrationHasResult.___lop_key_instance_,Ubisense.ULocationEngine.Calibration.CalibrationHasResult.___lop_key_instance_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.CalibrationHasResult.___lop_key_sensor_name_instance_">
      <summary>The lex-ordered prefixable key for the index sensor_name_instance_</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.CalibrationHasResult.___lop_cmp_sensor_name_instance_">
      <summary>The ordering for the index sensor_name_instance_</summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.CalibrationHasResult.___lop_cmp_sensor_name_instance_.Compare(Ubisense.ULocationEngine.Calibration.CalibrationHasResult.___lop_key_sensor_name_instance_,Ubisense.ULocationEngine.Calibration.CalibrationHasResult.___lop_key_sensor_name_instance_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore">
      <summary>A calibration tag has parameters to restore on completion. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.AddInsertHandler(Ubisense.ULocationEngine.Calibration.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.AddUpdateHandler(Ubisense.ULocationEngine.Calibration.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.AddDeleteHandler(Ubisense.ULocationEngine.Calibration.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.tag_(Ubisense.ULocationEngine.Calibration.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index tag_. The tag is the primary key. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.tag_(Ubisense.ULocationEngine.Calibration.ReadTransaction,Ubisense.ULocationEngine.Tag)">
      <summary>Iterate over the elements of the table that match the first argument of the index tag_. The tag is the primary key. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.RowType.tag_">
      <summary>The tag. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.RowType.valid_">
      <summary>The tag had parameters set. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.RowType.filter_">
      <summary>The name of the filter to restore. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.RowType.qos_">
      <summary>The QoS parameters to restore. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.RowType.#ctor(Ubisense.ULocationEngine.Tag,System.Boolean,System.String,Ubisense.ULocationEngine.QoS)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.___lop_key_tag_">
      <summary>The lex-ordered prefixable key for the index tag_</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.___lop_cmp_tag_">
      <summary>The ordering for the index tag_</summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.___lop_cmp_tag_.Compare(Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.___lop_key_tag_,Ubisense.ULocationEngine.Calibration.TagHasParametersToRestore.___lop_key_tag_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.SensorHasStatus">
      <summary>Table of last recorded status for each sensor. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Relations</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.SensorHasStatus.AddInsertHandler(Ubisense.ULocationEngine.Calibration.Schema,Ubisense.UBase.InsertEventHandler{Ubisense.ULocationEngine.Calibration.SensorHasStatus.RowType})">
      <summary>Attach an event that is raised when an insert occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.SensorHasStatus.AddUpdateHandler(Ubisense.ULocationEngine.Calibration.Schema,Ubisense.UBase.UpdateEventHandler{Ubisense.ULocationEngine.Calibration.SensorHasStatus.RowType})">
      <summary>Attach an event that is raised when an update occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.SensorHasStatus.AddDeleteHandler(Ubisense.ULocationEngine.Calibration.Schema,Ubisense.UBase.DeleteEventHandler{Ubisense.ULocationEngine.Calibration.SensorHasStatus.RowType})">
      <summary>Attach an event that is raised when a delete occurs</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>RelationEventHandlers</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.SensorHasStatus.sensor_(Ubisense.ULocationEngine.Calibration.ReadTransaction)">
      <summary>Iterate over the whole table in the order defined by the index sensor_. The sensor is the primary key. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.SensorHasStatus.sensor_(Ubisense.ULocationEngine.Calibration.ReadTransaction,Ubisense.ULocationEngine.Sensor)">
      <summary>Iterate over the elements of the table that match the first argument of the index sensor_. The sensor is the primary key. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Indexes</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.SensorHasStatus.RowType">
      <summary>Implicitly-defined RowType structure</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.SensorHasStatus.RowType.sensor_">
      <summary>The sensor. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.SensorHasStatus.RowType.status_">
      <summary>The status. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="F:Ubisense.ULocationEngine.Calibration.SensorHasStatus.RowType.time_">
      <summary>The time when the last status was received. </summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.SensorHasStatus.RowType.#ctor(Ubisense.ULocationEngine.Sensor,Ubisense.ULocationEngine.Calibration.SensorStatus,System.DateTime)">
      <summary>Create a new RowType instance with all values specified</summary>
      <package>UbisenseLocationEngine.dll</package>
      <usage>Records</usage>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.SensorHasStatus.___lop_key_sensor_">
      <summary>The lex-ordered prefixable key for the index sensor_</summary>
    </member>
    <member name="T:Ubisense.ULocationEngine.Calibration.SensorHasStatus.___lop_cmp_sensor_">
      <summary>The ordering for the index sensor_</summary>
    </member>
    <member name="M:Ubisense.ULocationEngine.Calibration.SensorHasStatus.___lop_cmp_sensor_.Compare(Ubisense.ULocationEngine.Calibration.SensorHasStatus.___lop_key_sensor_,Ubisense.ULocationEngine.Calibration.SensorHasStatus.___lop_key_sensor_)">
      <summary>Compare this index key with 'other'</summary>
    </member>
  </members>
</doc>